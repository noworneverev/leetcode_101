"use strict";(self.webpackChunkleetcode_101=self.webpackChunkleetcode_101||[]).push([[5761],{4182:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>t,metadata:()=>o,toc:()=>a});const o=JSON.parse('{"id":"trees/13-4-preorder-inorder-postorder-traversal","title":"13.4 \u524d\u4e2d\u540e\u5e8f\u904d\u5386","description":"\u524d\u5e8f\u904d\u5386\u3001\u4e2d\u5e8f\u904d\u5386\u548c\u540e\u5e8f\u904d\u5386\u662f\u4e09\u79cd\u5229\u7528\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u904d\u5386\u4e8c\u53c9\u6811\u7684\u65b9\u5f0f\u3002\u5b83\u4eec\u662f\u5728\u5bf9\u8282\u70b9\u8bbf\u95ee\u7684\u987a\u5e8f\u6709\u4e00\u70b9\u4e0d\u540c\uff0c\u5176\u5b83\u5b8c\u5168\u76f8\u540c\u3002\u8003\u8651\u5982\u4e0b\u4e00\u68f5\u6811\uff0c","source":"@site/docs/13-trees/13-4-preorder-inorder-postorder-traversal.mdx","sourceDirName":"13-trees","slug":"/trees/13-4-preorder-inorder-postorder-traversal","permalink":"/leetcode_101/trees/13-4-preorder-inorder-postorder-traversal","draft":false,"unlisted":false,"editUrl":"https://github.com/noworneverev/leetcode_101/tree/master/leetcode_101/docs/13-trees/13-4-preorder-inorder-postorder-traversal.mdx","tags":[],"version":"current","sidebarPosition":71,"frontMatter":{"sidebar_position":71},"sidebar":"tutorialSidebar","previous":{"title":"13.3 \u5c42\u6b21\u904d\u5386","permalink":"/leetcode_101/trees/13-3-level-order-traversal"},"next":{"title":"13.5 \u4e8c\u53c9\u67e5\u627e\u6811","permalink":"/leetcode_101/trees/13-5-binary-search-tree"}}');var i=n(4848),d=n(8453);const t={sidebar_position:71},l="13.4 \u524d\u4e2d\u540e\u5e8f\u904d\u5386",s={},a=[{value:"105. Construct Binary Tree from Preorder and Inorder Traversal",id:"105-construct-binary-tree-from-preorder-and-inorder-traversal",level:2},{value:"\u9898\u76ee\u63cf\u8ff0",id:"\u9898\u76ee\u63cf\u8ff0",level:3},{value:"\u8f93\u5165\u8f93\u51fa\u6837\u4f8b",id:"\u8f93\u5165\u8f93\u51fa\u6837\u4f8b",level:3},{value:"\u9898\u89e3",id:"\u9898\u89e3",level:3},{value:"144. Binary Tree Preorder Traversal",id:"144-binary-tree-preorder-traversal",level:2},{value:"\u9898\u76ee\u63cf\u8ff0",id:"\u9898\u76ee\u63cf\u8ff0-1",level:3},{value:"\u8f93\u5165\u8f93\u51fa\u6837\u4f8b",id:"\u8f93\u5165\u8f93\u51fa\u6837\u4f8b-1",level:3},{value:"\u9898\u89e3",id:"\u9898\u89e3-1",level:3}];function p(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,d.R)(),...e.components},{TabItem:n,Tabs:o}=r;return n||h("TabItem",!0),o||h("Tabs",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.header,{children:(0,i.jsx)(r.h1,{id:"134-\u524d\u4e2d\u540e\u5e8f\u904d\u5386",children:"13.4 \u524d\u4e2d\u540e\u5e8f\u904d\u5386"})}),"\n",(0,i.jsx)(r.p,{children:"\u524d\u5e8f\u904d\u5386\u3001\u4e2d\u5e8f\u904d\u5386\u548c\u540e\u5e8f\u904d\u5386\u662f\u4e09\u79cd\u5229\u7528\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u904d\u5386\u4e8c\u53c9\u6811\u7684\u65b9\u5f0f\u3002\u5b83\u4eec\u662f\u5728\u5bf9\u8282\u70b9\u8bbf\u95ee\u7684\u987a\u5e8f\u6709\u4e00\u70b9\u4e0d\u540c\uff0c\u5176\u5b83\u5b8c\u5168\u76f8\u540c\u3002\u8003\u8651\u5982\u4e0b\u4e00\u68f5\u6811\uff0c"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{children:"    1\n   / \\\n  2   3\n / \\   \\\n4   5   6\n"})}),"\n",(0,i.jsx)(r.p,{children:"\u524d\u5e8f\u904d\u5386\u5148\u904d\u5386\u7236\u7ed3\u70b9\uff0c\u518d\u904d\u5386\u5de6\u7ed3\u70b9\uff0c\u6700\u540e\u904d\u5386\u53f3\u8282\u70b9\uff0c\u6211\u4eec\u5f97\u5230\u7684\u904d\u5386\u987a\u5e8f\u662f [1 2 4 5 3 6]\u3002"}),"\n",(0,i.jsxs)(o,{children:[(0,i.jsx)(n,{value:"cpp",label:"C++",children:(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-cpp",children:"void preorder(TreeNode* root) {\n    visit(root);\n    preorder(root->left);\n    preorder(root->right);\n}\n"})})}),(0,i.jsx)(n,{value:"py",label:"Python",children:(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-py",children:"def preorder(root: TreeNode):\n    visit(root)\n    preorder(root.left)\n    preorder(root.right)\n"})})})]}),"\n",(0,i.jsx)(r.p,{children:"\u4e2d\u5e8f\u904d\u5386\u5148\u904d\u5386\u5de6\u8282\u70b9\uff0c\u518d\u904d\u5386\u7236\u7ed3\u70b9\uff0c\u6700\u540e\u904d\u5386\u53f3\u8282\u70b9\uff0c\u6211\u4eec\u5f97\u5230\u7684\u904d\u5386\u987a\u5e8f\u662f [4 2 5 1 3 6]\u3002"}),"\n",(0,i.jsxs)(o,{children:[(0,i.jsx)(n,{value:"cpp",label:"C++",children:(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-cpp",children:"void inorder(TreeNode* root) {\n    inorder(root->left);\n    visit(root);\n    inorder(root->right);\n}\n"})})}),(0,i.jsx)(n,{value:"py",label:"Python",children:(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-py",children:"def inorder(root: TreeNode):\n    inorder(root.left)\n    visit(root)\n    inorder(root.right)\n"})})})]}),"\n",(0,i.jsx)(r.p,{children:"\u540e\u5e8f\u904d\u5386\u5148\u904d\u5386\u5de6\u8282\u70b9\uff0c\u518d\u904d\u5386\u53f3\u7ed3\u70b9\uff0c\u6700\u540e\u904d\u5386\u7236\u8282\u70b9\uff0c\u6211\u4eec\u5f97\u5230\u7684\u904d\u5386\u987a\u5e8f\u662f [4 5 2 6 3 1]\u3002"}),"\n",(0,i.jsxs)(o,{children:[(0,i.jsx)(n,{value:"cpp",label:"C++",children:(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-cpp",children:"void postorder(TreeNode* root) {\n    postorder(root->left);\n    postorder(root->right);\n    visit(root);\n}\n"})})}),(0,i.jsx)(n,{value:"py",label:"Python",children:(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-py",children:"def postorder(root: TreeNode):\n    postorder(root.left)\n    postorder(root.right)\n    visit(root)\n"})})})]}),"\n",(0,i.jsx)(r.h2,{id:"105-construct-binary-tree-from-preorder-and-inorder-traversal",children:(0,i.jsx)(r.a,{href:"https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/",children:"105. Construct Binary Tree from Preorder and Inorder Traversal"})}),"\n",(0,i.jsx)(r.h3,{id:"\u9898\u76ee\u63cf\u8ff0",children:"\u9898\u76ee\u63cf\u8ff0"}),"\n",(0,i.jsx)(r.p,{children:"\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u7ed3\u679c\uff0c\u5c1d\u8bd5\u590d\u539f\u8fd9\u4e2a\u6811\u3002\u5df2\u77e5\u6811\u91cc\u4e0d\u5b58\u5728\u91cd\u590d\u503c\u7684\u8282\u70b9\u3002"}),"\n",(0,i.jsx)(r.h3,{id:"\u8f93\u5165\u8f93\u51fa\u6837\u4f8b",children:"\u8f93\u5165\u8f93\u51fa\u6837\u4f8b"}),"\n",(0,i.jsx)(r.p,{children:"\u8f93\u5165\u662f\u4e24\u4e2a\u4e00\u7ef4\u6570\u7ec4\uff0c\u5206\u522b\u8868\u793a\u6811\u7684\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u7ed3\u679c\uff1b\u8f93\u51fa\u662f\u4e00\u4e2a\u4e8c\u53c9\u6811\u3002"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{children:"Input: preorder = [4,9,20,15,7], inorder = [9,4,15,20,7]\nOutput:\n    4\n   / \\\n  9  20\n     / \\\n    15  7\n"})}),"\n",(0,i.jsx)(r.h3,{id:"\u9898\u89e3",children:"\u9898\u89e3"}),"\n",(0,i.jsx)(r.p,{children:"\u6211\u4eec\u901a\u8fc7\u672c\u9898\u7684\u6837\u4f8b\u8bb2\u89e3\u4e00\u4e0b\u672c\u9898\u7684\u601d\u8def\u3002\u524d\u5e8f\u904d\u5386\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\u662f 4\uff0c\u610f\u5473\u7740 4 \u662f\u6839\u8282\u70b9\u3002\u6211\u4eec\u5728\u4e2d\u5e8f\u904d\u5386\u7ed3\u679c\u91cc\u627e\u5230 4 \u8fd9\u4e2a\u8282\u70b9\uff0c\u6839\u636e\u4e2d\u5e8f\u904d\u5386\u7684\u6027\u8d28\u53ef\u4ee5\u5f97\u51fa\uff0c4 \u5728\u4e2d\u5e8f\u904d\u5386\u6570\u7ec4\u4f4d\u7f6e\u7684\u5de6\u5b50\u6570\u7ec4\u4e3a\u5de6\u5b50\u6811\uff0c\u8282\u70b9\u6570\u4e3a 1\uff0c\u5bf9\u5e94\u7684\u662f\u524d\u5e8f\u6392\u5217\u6570\u7ec4\u91cc 4 \u4e4b\u540e\u7684 1 \u4e2a\u6570\u5b57\uff089\uff09\uff1b4 \u5728\u4e2d\u5e8f\u904d\u5386\u6570\u7ec4\u4f4d\u7f6e\u7684\u53f3\u5b50\u6570\u7ec4\u4e3a\u53f3\u5b50\u6811\uff0c\u8282\u70b9\u6570\u4e3a 3\uff0c\u5bf9\u5e94\u7684\u662f\u524d\u5e8f\u6392\u5217\u6570\u7ec4\u91cc\u6700\u540e\u7684 3 \u4e2a\u6570\u5b57\u3002\u6709\u4e86\u8fd9\u4e9b\u4fe1\u606f\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5bf9\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u8fdb\u884c\u9012\u5f52\u590d\u539f\u4e86\u3002\u4e3a\u4e86\u65b9\u4fbf\u67e5\u627e\u6570\u5b57\u7684\u4f4d\u7f6e\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u54c8\u5e0c\u8868\u9884\u5904\u7406\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u679c\u3002"}),"\n",(0,i.jsxs)(o,{children:[(0,i.jsx)(n,{value:"cpp",label:"C++",children:(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-cpp",children:"// \u8f85\u51fd\u6570\u3002\nTreeNode* reconstruct(unordered_map<int, int>& io_map, vector<int>& po, int l,\n                      int r, int mid_po) {\n    if (l > r) {\n        return nullptr;\n    }\n    int mid_val = po[mid_po];\n    int mid_io = io_map[mid_val];\n    int left_len = mid_io - l + 1;\n    TreeNode* node = new TreeNode(mid_val);\n    node->left = reconstruct(io_map, po, l, mid_io - 1, mid_po + 1);\n    node->right = reconstruct(io_map, po, mid_io + 1, r, mid_po + left_len);\n    return node;\n}\n// \u4e3b\u51fd\u6570\u3002\nTreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {\n    unordered_map<int, int> io_map;\n    for (int i = 0; i < inorder.size(); ++i) {\n        io_map[inorder[i]] = i;\n    }\n    return reconstruct(io_map, preorder, 0, preorder.size() - 1, 0);\n}\n"})})}),(0,i.jsx)(n,{value:"py",label:"Python",children:(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-py",children:"# \u8f85\u51fd\u6570\u3002\ndef reconstruct(\n    io_map: Dict[int, int], po: List[int], l: int, r: int, mid_po: int\n) -> Optional[TreeNode]:\n    if l > r:\n        return None\n    mid_val = po[mid_po]\n    mid_io = io_map[mid_val]\n    left_len = mid_io - l + 1\n    node = TreeNode(mid_val)\n    node.left = reconstruct(io_map, po, l, mid_io - 1, mid_po + 1)\n    node.right = reconstruct(io_map, po, mid_io + 1, r, mid_po + left_len)\n    return node\n\n# \u4e3b\u51fd\u6570\u3002\ndef buildTree(preorder: List[int], inorder: List[int]) -> Optional[TreeNode]:\n    io_map = {val: i for i, val in enumerate(inorder)}\n    return reconstruct(io_map, preorder, 0, len(preorder) - 1, 0)\n\n"})})})]}),"\n",(0,i.jsx)(r.h2,{id:"144-binary-tree-preorder-traversal",children:(0,i.jsx)(r.a,{href:"https://leetcode.com/problems/binary-tree-preorder-traversal/",children:"144. Binary Tree Preorder Traversal"})}),"\n",(0,i.jsx)(r.h3,{id:"\u9898\u76ee\u63cf\u8ff0-1",children:"\u9898\u76ee\u63cf\u8ff0"}),"\n",(0,i.jsx)(r.p,{children:"\u4e0d\u4f7f\u7528\u9012\u5f52\uff0c\u5b9e\u73b0\u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386\u3002"}),"\n",(0,i.jsx)(r.h3,{id:"\u8f93\u5165\u8f93\u51fa\u6837\u4f8b-1",children:"\u8f93\u5165\u8f93\u51fa\u6837\u4f8b"}),"\n",(0,i.jsx)(r.p,{children:"\u8f93\u5165\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u8f93\u51fa\u4e00\u4e2a\u6570\u7ec4\uff0c\u4e3a\u4e8c\u53c9\u6811\u524d\u5e8f\u904d\u5386\u7684\u7ed3\u679c\uff0c"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{children:"Input:\n    1\n     \\\n      2\n     /\n    3\nOutput: [1,2,3]\n"})}),"\n",(0,i.jsx)(r.h3,{id:"\u9898\u89e3-1",children:"\u9898\u89e3"}),"\n",(0,i.jsx)(r.p,{children:"\u56e0\u4e3a\u9012\u5f52\u7684\u672c\u8d28\u662f\u6808\u8c03\u7528\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u6808\u6765\u5b9e\u73b0\u524d\u5e8f\u904d\u5386\u3002\u6ce8\u610f\u5165\u6808\u7684\u987a\u5e8f\u3002"}),"\n",(0,i.jsxs)(o,{children:[(0,i.jsx)(n,{value:"cpp",label:"C++",children:(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-cpp",children:"vector<int> preorderTraversal(TreeNode* root) {\n    vector<int> po;\n    if (root == nullptr) {\n        return po;\n    }\n    stack<TreeNode*> s;\n    s.push(root);\n    while (!s.empty()) {\n        TreeNode* node = s.top();\n        s.pop();\n        po.push_back(node->val);\n        if (node->right) {\n            s.push(node->right);  // \u5148\u53f3\u540e\u5de6\uff0c\u4fdd\u8bc1\u5de6\u5b50\u6811\u5148\u904d\u5386\n        }\n        if (node->left) {\n            s.push(node->left);\n        }\n    }\n    return po;\n}\n"})})}),(0,i.jsx)(n,{value:"py",label:"Python",children:(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-py",children:"def preorderTraversal(root: Optional[TreeNode]) -> List[int]:\n    po = []\n    if root is None:\n        return po\n    s = [root]\n    while len(s) > 0:\n        node = s.pop()\n        po.append(node.val)\n        if node.right is not None:\n            s.append(node.right)  # \u5148\u53f3\u540e\u5de6\uff0c\u4fdd\u8bc1\u5de6\u5b50\u6811\u5148\u904d\u5386\n        if node.left is not None:\n            s.append(node.left)\n    return po\n"})})})]})]})}function c(e={}){const{wrapper:r}={...(0,d.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}function h(e,r){throw new Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);