"use strict";(self.webpackChunkleetcode_101=self.webpackChunkleetcode_101||[]).push([[9844],{2391:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>s,contentTitle:()=>a,default:()=>c,frontMatter:()=>l,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"trees/13-5-binary-search-tree","title":"13.5 \u4e8c\u53c9\u67e5\u627e\u6811","description":"\u4e8c\u53c9\u67e5\u627e\u6811\uff08Binary Search Tree, BST\uff09\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u4e8c\u53c9\u6811\uff1a\u5bf9\u4e8e\u6bcf\u4e2a\u7236\u8282\u70b9\uff0c\u5176\u5de6\u5b50\u6811\u4e2d\u6240\u6709\u8282\u70b9\u7684\u503c\u5c0f\u4e8e\u7b49\u4e8e\u7236\u7ed3\u70b9\u7684\u503c\uff0c\u5176\u53f3\u5b50\u6811\u4e2d\u6240\u6709\u8282\u70b9\u7684\u503c\u5927\u4e8e\u7b49\u4e8e\u7236\u7ed3\u70b9\u7684\u503c\u3002\u56e0\u6b64\u5bf9\u4e8e\u4e00\u4e2a\u4e8c\u53c9\u67e5\u627e\u6811\uff0c\u6211\u4eec\u53ef\u4ee5\u5728 O(log n) \u7684\u65f6\u95f4\u5185\u67e5\u627e\u4e00\u4e2a\u503c\u662f\u5426\u5b58\u5728\uff1a\u4ece\u6839\u8282\u70b9\u5f00\u59cb\uff0c\u82e5\u5f53\u524d\u8282\u70b9\u7684\u503c\u5927\u4e8e\u67e5\u627e\u503c\u5219\u5411\u5de6\u4e0b\u8d70\uff0c\u82e5\u5f53\u524d\u8282\u70b9\u7684\u503c\u5c0f\u4e8e\u67e5\u627e\u503c\u5219\u5411\u53f3\u4e0b\u8d70\u3002\u540c\u65f6\u56e0\u4e3a\u4e8c\u53c9\u67e5\u627e\u6811\u662f\u6709\u5e8f\u7684\uff0c\u5bf9\u5176\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u679c\u5373\u4e3a\u6392\u597d\u5e8f\u7684\u6570\u7ec4\u3002","source":"@site/docs/13-trees/13-5-binary-search-tree.mdx","sourceDirName":"13-trees","slug":"/trees/13-5-binary-search-tree","permalink":"/leetcode_101/trees/13-5-binary-search-tree","draft":false,"unlisted":false,"editUrl":"https://github.com/noworneverev/leetcode_101/tree/master/leetcode_101/docs/13-trees/13-5-binary-search-tree.mdx","tags":[],"version":"current","sidebarPosition":72,"frontMatter":{"sidebar_position":72},"sidebar":"tutorialSidebar","previous":{"title":"13.4 \u524d\u4e2d\u540e\u5e8f\u904d\u5386","permalink":"/leetcode_101/trees/13-4-preorder-inorder-postorder-traversal"},"next":{"title":"13.6 \u5b57\u5178\u6811","permalink":"/leetcode_101/trees/13-6-trie"}}');var i=n(4848),o=n(8453);const l={sidebar_position:72},a="13.5 \u4e8c\u53c9\u67e5\u627e\u6811",s={},d=[{value:"99. Recover Binary Search Tree",id:"99-recover-binary-search-tree",level:2},{value:"\u9898\u76ee\u63cf\u8ff0",id:"\u9898\u76ee\u63cf\u8ff0",level:3},{value:"\u8f93\u5165\u8f93\u51fa\u6837\u4f8b",id:"\u8f93\u5165\u8f93\u51fa\u6837\u4f8b",level:3},{value:"\u9898\u89e3",id:"\u9898\u89e3",level:3},{value:"669. Trim a Binary Search Tree",id:"669-trim-a-binary-search-tree",level:2},{value:"\u9898\u76ee\u63cf\u8ff0",id:"\u9898\u76ee\u63cf\u8ff0-1",level:3},{value:"\u8f93\u5165\u8f93\u51fa\u6837\u4f8b",id:"\u8f93\u5165\u8f93\u51fa\u6837\u4f8b-1",level:3},{value:"\u9898\u89e3",id:"\u9898\u89e3-1",level:3}];function h(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components},{TabItem:n,Tabs:t}=r;return n||p("TabItem",!0),t||p("Tabs",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.header,{children:(0,i.jsx)(r.h1,{id:"135-\u4e8c\u53c9\u67e5\u627e\u6811",children:"13.5 \u4e8c\u53c9\u67e5\u627e\u6811"})}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.code,{children:"\u4e8c\u53c9\u67e5\u627e\u6811"}),"\uff08Binary Search Tree, BST\uff09\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u4e8c\u53c9\u6811\uff1a\u5bf9\u4e8e\u6bcf\u4e2a\u7236\u8282\u70b9\uff0c\u5176\u5de6\u5b50\u6811\u4e2d\u6240\u6709\u8282\u70b9\u7684\u503c\u5c0f\u4e8e\u7b49\u4e8e\u7236\u7ed3\u70b9\u7684\u503c\uff0c\u5176\u53f3\u5b50\u6811\u4e2d\u6240\u6709\u8282\u70b9\u7684\u503c\u5927\u4e8e\u7b49\u4e8e\u7236\u7ed3\u70b9\u7684\u503c\u3002\u56e0\u6b64\u5bf9\u4e8e\u4e00\u4e2a\u4e8c\u53c9\u67e5\u627e\u6811\uff0c\u6211\u4eec\u53ef\u4ee5\u5728 O(log n) \u7684\u65f6\u95f4\u5185\u67e5\u627e\u4e00\u4e2a\u503c\u662f\u5426\u5b58\u5728\uff1a\u4ece\u6839\u8282\u70b9\u5f00\u59cb\uff0c\u82e5\u5f53\u524d\u8282\u70b9\u7684\u503c\u5927\u4e8e\u67e5\u627e\u503c\u5219\u5411\u5de6\u4e0b\u8d70\uff0c\u82e5\u5f53\u524d\u8282\u70b9\u7684\u503c\u5c0f\u4e8e\u67e5\u627e\u503c\u5219\u5411\u53f3\u4e0b\u8d70\u3002\u540c\u65f6\u56e0\u4e3a\u4e8c\u53c9\u67e5\u627e\u6811\u662f\u6709\u5e8f\u7684\uff0c\u5bf9\u5176\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u679c\u5373\u4e3a\u6392\u597d\u5e8f\u7684\u6570\u7ec4\u3002"]}),"\n",(0,i.jsx)(r.p,{children:"\u4f8b\u5982\u4e0b\u9762\u8fd9\u68f5\u6811\u5373\u4e3a\u4e8c\u53c9\u67e5\u627e\u6811\uff0c\u5176\u4e2d\u5e8f\u904d\u5386\u7ed3\u679c\u4e3a [1 2 3 4 5 6]\u3002"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{children:"    4\n   / \\\n  2   5\n / \\   \\\n1   3   6\n"})}),"\n",(0,i.jsx)(r.h2,{id:"99-recover-binary-search-tree",children:(0,i.jsx)(r.a,{href:"https://leetcode.com/problems/recover-binary-search-tree/",children:"99. Recover Binary Search Tree"})}),"\n",(0,i.jsx)(r.h3,{id:"\u9898\u76ee\u63cf\u8ff0",children:"\u9898\u76ee\u63cf\u8ff0"}),"\n",(0,i.jsx)(r.p,{children:"\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u67e5\u627e\u6811\uff0c\u5df2\u77e5\u6709\u4e24\u4e2a\u8282\u70b9\u88ab\u4e0d\u5c0f\u5fc3\u4ea4\u6362\u4e86\uff0c\u8bd5\u590d\u539f\u6b64\u6811\u3002"}),"\n",(0,i.jsx)(r.h3,{id:"\u8f93\u5165\u8f93\u51fa\u6837\u4f8b",children:"\u8f93\u5165\u8f93\u51fa\u6837\u4f8b"}),"\n",(0,i.jsx)(r.p,{children:"\u8f93\u5165\u662f\u4e00\u4e2a\u88ab\u8bef\u4ea4\u6362\u4e24\u4e2a\u8282\u70b9\u7684\u4e8c\u53c9\u67e5\u627e\u6811\uff0c\u8f93\u51fa\u662f\u6539\u6b63\u540e\u7684\u4e8c\u53c9\u67e5\u627e\u6811\u3002"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{children:"Input:\n  3\n / \\\n1   4\n   /\n  2\nOutput:\n  2\n / \\\n1   4\n   /\n  3\n"})}),"\n",(0,i.jsx)(r.p,{children:"\u5728\u8fd9\u4e2a\u6837\u4f8b\u4e2d\uff0c2 \u548c 3 \u88ab\u4e0d\u5c0f\u5fc3\u4ea4\u6362\u4e86\u3002"}),"\n",(0,i.jsx)(r.h3,{id:"\u9898\u89e3",children:"\u9898\u89e3"}),"\n",(0,i.jsx)(r.p,{children:"\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e2d\u5e8f\u904d\u5386\u8fd9\u4e2a\u4e8c\u53c9\u67e5\u627e\u6811\uff0c\u540c\u65f6\u8bbe\u7f6e\u4e00\u4e2a prev \u6307\u9488\uff0c\u8bb0\u5f55\u5f53\u524d\u8282\u70b9\u4e2d\u5e8f\u904d\u5386\u65f6\u7684\u524d\u8282\u70b9\u3002\u5982\u679c\u5f53\u524d\u8282\u70b9\u5927\u4e8e prev \u8282\u70b9\u7684\u503c\uff0c\u8bf4\u660e\u9700\u8981\u8c03\u6574\u6b21\u5e8f\u3002\u6709\u4e00\u4e2a\u6280\u5de7\u662f\u5982\u679c\u904d\u5386\u6574\u4e2a\u5e8f\u5217\u8fc7\u7a0b\u4e2d\u53ea\u51fa\u73b0\u4e86\u4e00\u6b21\u6b21\u5e8f\u9519\u8bef\uff0c\u8bf4\u660e\u5c31\u662f\u8fd9\u4e24\u4e2a\u76f8\u90bb\u8282\u70b9\u9700\u8981\u88ab\u4ea4\u6362\uff1b\u5982\u679c\u51fa\u73b0\u4e86\u4e24\u6b21\u6b21\u5e8f\u9519\u8bef\uff0c\u90a3\u5c31\u9700\u8981\u4ea4\u6362\u8fd9\u4e24\u4e2a\u8282\u70b9\u3002"}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)(n,{value:"cpp",label:"C++",children:(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-cpp",children:"// \u8f85\u51fd\u6570\u3002\nvoid inorder(TreeNode* root, TreeNode*& mistake1, TreeNode*& mistake2,\n             TreeNode*& prev) {\n    if (root == nullptr) {\n        return;\n    }\n    inorder(root->left, mistake1, mistake2, prev);\n    if (prev != nullptr && root->val < prev->val) {\n        if (mistake1 == nullptr) {\n            mistake1 = prev;\n        }\n        mistake2 = root;\n    }\n    prev = root;\n    inorder(root->right, mistake1, mistake2, prev);\n}\n// \u4e3b\u51fd\u6570\u3002\nvoid recoverTree(TreeNode* root) {\n    TreeNode *mistake1 = nullptr, *mistake2 = nullptr, *prev = nullptr;\n    inorder(root, mistake1, mistake2, prev);\n    if (mistake1 != nullptr && mistake2 != nullptr) {\n        swap(mistake1->val, mistake2->val);\n    }\n}\n"})})}),(0,i.jsx)(n,{value:"py",label:"Python",children:(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-py",children:"# \u8f85\u51fd\u6570\u3002\n# \u6ce8\u610f\uff0cPython\u4e2d\u5e76\u4e0d\u65b9\u4fbf\u5728\u8f85\u51fd\u6570\u4e2d\u76f4\u63a5\u4f20\u6307\u9488\uff0c\u56e0\u6b64\u6211\u4eec\u5efa\u9020\u957f\u5ea6\u4e3a1\u7684list\u8fdb\u884c\u4f20\u5f15\u7528\u3002\ndef inorder(\n    root: Optional[TreeNode],\n    mistake1=List[Optional[TreeNode]],\n    mistake2=List[Optional[TreeNode]],\n    prev=List[Optional[TreeNode]],\n):\n    if root is None:\n        return\n    inorder(root.left, mistake1, mistake2, prev)\n    if prev[0] is not None and root.val < prev[0].val:\n        if mistake1[0] is None:\n            mistake1[0] = prev[0]\n        mistake2[0] = root\n    prev[0] = root\n    inorder(root.right, mistake1, mistake2, prev)\n\n# \u4e3b\u51fd\u6570\u3002\ndef recoverTree(root: Optional[TreeNode]) -> None:\n    mistake1, mistake2, prev = [None], [None], [None]\n    inorder(root, mistake1, mistake2, prev)\n    if mistake1[0] is not None and mistake2[0] is not None:\n        mistake1[0].val, mistake2[0].val = mistake2[0].val, mistake1[0].val\n"})})})]}),"\n",(0,i.jsx)(r.h2,{id:"669-trim-a-binary-search-tree",children:(0,i.jsx)(r.a,{href:"https://leetcode.com/problems/trim-a-binary-search-tree/",children:"669. Trim a Binary Search Tree"})}),"\n",(0,i.jsx)(r.h3,{id:"\u9898\u76ee\u63cf\u8ff0-1",children:"\u9898\u76ee\u63cf\u8ff0"}),"\n",(0,i.jsx)(r.p,{children:"\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u67e5\u627e\u6811\u548c\u4e24\u4e2a\u6574\u6570 L \u548c R\uff0c\u4e14 L < R\uff0c\u8bd5\u4fee\u526a\u6b64\u4e8c\u53c9\u67e5\u627e\u6811\uff0c\u4f7f\u5f97\u4fee\u526a\u540e\u6240\u6709\u8282\u70b9\u7684\u503c\u90fd\u5728 [L, R] \u7684\u8303\u56f4\u5185\u3002"}),"\n",(0,i.jsx)(r.h3,{id:"\u8f93\u5165\u8f93\u51fa\u6837\u4f8b-1",children:"\u8f93\u5165\u8f93\u51fa\u6837\u4f8b"}),"\n",(0,i.jsx)(r.p,{children:"\u8f93\u5165\u662f\u4e00\u4e2a\u4e8c\u53c9\u67e5\u627e\u6811\u548c\u4e24\u4e2a\u6574\u6570 L \u548c R\uff0c\u8f93\u51fa\u4e00\u4e2a\u88ab\u4fee\u526a\u597d\u7684\u4e8c\u53c9\u67e5\u627e\u6811\u3002"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{children:"Input: L = 1, R = 3, tree =\n      3\n     / \\\n    0   4\n     \\\n      2\n     /\n    1\nOutput:\n    3\n   /\n  2\n /\n1\n"})}),"\n",(0,i.jsx)(r.h3,{id:"\u9898\u89e3-1",children:"\u9898\u89e3"}),"\n",(0,i.jsx)(r.p,{children:"\u5229\u7528\u4e8c\u53c9\u67e5\u627e\u6811\u7684\u5927\u5c0f\u5173\u7cfb\uff0c\u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u5229\u7528\u9012\u5f52\u8fdb\u884c\u6811\u7684\u5904\u7406\u3002"}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)(n,{value:"cpp",label:"C++",children:(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-cpp",children:"TreeNode* trimBST(TreeNode* root, int low, int high) {\n    if (root == nullptr) {\n        return root;\n    }\n    if (root->val > high) {\n        return trimBST(root->left, low, high);\n    }\n    if (root->val < low) {\n        return trimBST(root->right, low, high);\n    }\n    root->left = trimBST(root->left, low, high);\n    root->right = trimBST(root->right, low, high);\n    return root;\n}\n"})})}),(0,i.jsx)(n,{value:"py",label:"Python",children:(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-py",children:"def trimBST(\n    root: Optional[TreeNode], low: int, high: int\n) -> Optional[TreeNode]:\n    if root is None:\n        return None\n    if root.val > high:\n        return trimBST(root.left, low, high)\n    if root.val < low:\n        return trimBST(root.right, low, high)\n    root.left = trimBST(root.left, low, high)\n    root.right = trimBST(root.right, low, high)\n    return root\n"})})})]})]})}function c(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}function p(e,r){throw new Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);