"use strict";(self.webpackChunkleetcode_101=self.webpackChunkleetcode_101||[]).push([[2736],{7396:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>d,contentTitle:()=>a,default:()=>l,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"divide-and-conquer/7-2-expression-problems","title":"7.2 \u8868\u8fbe\u5f0f\u95ee\u9898","description":"241. Di\ufb00erent Ways to Add Parentheses","source":"@site/docs/7-divide-and-conquer/7-2-expression-problems.mdx","sourceDirName":"7-divide-and-conquer","slug":"/divide-and-conquer/7-2-expression-problems","permalink":"/leetcode_101/divide-and-conquer/7-2-expression-problems","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":36,"frontMatter":{"sidebar_position":36},"sidebar":"tutorialSidebar","previous":{"title":"7.1 \u7b97\u6cd5\u89e3\u91ca","permalink":"/leetcode_101/divide-and-conquer/7-1-algorithm-explanation"},"next":{"title":"7.3 \u7ec3\u4e60","permalink":"/leetcode_101/divide-and-conquer/7-3-exercises"}}');var r=i(4848),t=i(8453);const o={sidebar_position:36},a="7.2 \u8868\u8fbe\u5f0f\u95ee\u9898",d={},c=[{value:"241. Di\ufb00erent Ways to Add Parentheses",id:"241-di\ufb00erent-ways-to-add-parentheses",level:2},{value:"\u9898\u76ee\u63cf\u8ff0",id:"\u9898\u76ee\u63cf\u8ff0",level:3},{value:"\u8f93\u5165\u8f93\u51fa\u6837\u4f8b",id:"\u8f93\u5165\u8f93\u51fa\u6837\u4f8b",level:3},{value:"\u9898\u89e3",id:"\u9898\u89e3",level:3}];function p(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,t.R)(),...n.components},{TabItem:i,Tabs:s}=e;return i||u("TabItem",!0),s||u("Tabs",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"72-\u8868\u8fbe\u5f0f\u95ee\u9898",children:"7.2 \u8868\u8fbe\u5f0f\u95ee\u9898"})}),"\n",(0,r.jsx)(e.h2,{id:"241-di\ufb00erent-ways-to-add-parentheses",children:(0,r.jsx)(e.a,{href:"https://leetcode.com/problems/different-ways-to-add-parentheses/",children:"241. Di\ufb00erent Ways to Add Parentheses"})}),"\n",(0,r.jsx)(e.h3,{id:"\u9898\u76ee\u63cf\u8ff0",children:"\u9898\u76ee\u63cf\u8ff0"}),"\n",(0,r.jsx)(e.p,{children:"\u7ed9\u5b9a\u4e00\u4e2a\u53ea\u5305\u542b\u52a0\u3001\u51cf\u548c\u4e58\u6cd5\u7684\u6570\u5b66\u8868\u8fbe\u5f0f\uff0c\u6c42\u901a\u8fc7\u52a0\u62ec\u53f7\u53ef\u4ee5\u5f97\u5230\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u7ed3\u679c\u3002"}),"\n",(0,r.jsx)(e.h3,{id:"\u8f93\u5165\u8f93\u51fa\u6837\u4f8b",children:"\u8f93\u5165\u8f93\u51fa\u6837\u4f8b"}),"\n",(0,r.jsx)(e.p,{children:"\u8f93\u5165\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8868\u793a\u6570\u5b66\u8868\u8fbe\u5f0f\uff1b\u8f93\u51fa\u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u5b58\u50a8\u6240\u6709\u4e0d\u540c\u7684\u52a0\u62ec\u53f7\u7ed3\u679c\u3002"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:'Input: "2-1-1"\nOutput: [0, 2]\n'})}),"\n",(0,r.jsx)(e.p,{children:"\u5728\u8fd9\u4e2a\u6837\u4f8b\u4e2d\uff0c\u6709\u4e24\u79cd\u52a0\u62ec\u53f7\u7ed3\u679c\uff1a((2-1)-1) = 0 \u548c (2-(1-1)) = 2\u3002"}),"\n",(0,r.jsx)(e.h3,{id:"\u9898\u89e3",children:"\u9898\u89e3"}),"\n",(0,r.jsx)(e.p,{children:"\u5229\u7528\u5206\u6cbb\u601d\u60f3\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u52a0\u62ec\u53f7\u8f6c\u5316\u4e3a\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8fd0\u7b97\u7b26\u53f7\uff0c\u5148\u6267\u884c\u5904\u7406\u4e24\u4fa7\u7684\u6570\u5b66\u8868\u8fbe\u5f0f\uff0c\u518d\u5904\u7406\u6b64\u8fd0\u7b97\u7b26\u53f7\u3002\u6ce8\u610f\u8fb9\u754c\u60c5\u51b5\uff0c\u5373\u5b57\u7b26\u4e32\u5185\u65e0\u8fd0\u7b97\u7b26\u53f7\uff0c\u53ea\u6709\u6570\u5b57\u3002"}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)(i,{value:"cpp",label:"C++",children:(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-cpp",children:"vector<int> diffWaysToCompute(string expression) {\n    vector<int> ways;\n    unordered_map<char, function<int(int, int)>> op_funcs;\n    op_funcs[\u2019+\u2019] = [](int x, int y) { return x + y; };\n    op_funcs[\u2019-\u2019] = [](int x, int y) { return x - y; };\n    op_funcs[\u2019*\u2019] = [](int x, int y) { return x * y; };\n    for (int i = 0; i < expression.length(); ++i) {\n        char c = expression[i];\n        if (!op_funcs.contains(c)) {\n            continue;\n        }\n        auto left = diffWaysToCompute(expression.substr(0, i));\n        auto right = diffWaysToCompute(expression.substr(i + 1));\n        for (int l : left) {\n            for (int r : right) {\n                ways.push_back(op_funcs[c](l, r));\n            }\n        }\n    }\n    return ways.empty() ? vector<int>{stoi(expression)} : ways;\n}\n"})})}),(0,r.jsx)(i,{value:"py",label:"Python",children:(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-py",children:'def diffWaysToCompute(expression: str) -> List[int]:\n    ways = []\n    op_funcs = {\n        "+": (lambda x, y: x + y),\n        "-": (lambda x, y: x - y),\n        "*": (lambda x, y: x * y),\n    }\n    for i, c in enumerate(expression):\n        if c not in op_funcs:\n            continue\n        left = diffWaysToCompute(expression[:i])\n        right = diffWaysToCompute(expression[i + 1 :])\n        ways += [op_funcs[c](l, r) for l in left for r in right]\n    return [int(expression)] if len(ways) == 0 else ways\n'})})})]}),"\n",(0,r.jsx)(e.p,{children:"\u6211\u4eec\u53d1\u73b0\uff0c\u67d0\u4e9b\u88ab divide \u7684\u5b50\u5b57\u7b26\u4e32\u53ef\u80fd\u91cd\u590d\u51fa\u73b0\u591a\u6b21\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u7528 memoization \u6765\u53bb\u91cd\u3002\u6bd4\u5982\u5efa\u7acb\u4e00\u4e2a\u54c8\u5e0c\u8868\uff0ckey \u662f (l, r)\uff0cvalue \u662f ways\u3002\u6bcf\u6b21\u9047\u5230\u76f8\u540c\u7684 (l, r)\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u8fd4\u56de\u5df2\u7ecf\u8ba1\u7b97\u8fc7\u7684 ways\u3002\u6216\u8005\u4e0e\u5176\u6211\u4eec\u4ece\u4e0a\u5230\u4e0b\u7528\u5206\u6cbb\u5904\u7406 +memoization\uff0c\u4e0d\u5982\u76f4\u63a5\u4ece\u4e0b\u5230\u4e0a\u7528\u52a8\u6001\u89c4\u5212\u5904\u7406\u3002"}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)(i,{value:"cpp",label:"C++",children:(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-cpp",children:"vector<int> diffWaysToCompute(string expression) {\n    // \u5229\u7528istringstream, \u5c06\u6570\u5b57\u548c\u64cd\u4f5c\u7b26\u8fdb\u884c\u5206\u8bcd\u3002\n    vector<int> nums;\n    vector<char> ops;\n    int num = 0;\n    char op = \u2019 \u2019;\n    istringstream ss(expression);\n    while (ss >> num) {\n        nums.push_back(num);\n        if (ss >> op) {\n            ops.push_back(op);\n        }\n    }\n    int n = nums.size();\n    vector<vector<vector<int>>> dp(n, vector<vector<int>>(n, vector<int>()));\n    unordered_map<char, function<int(int, int)>> op_funcs;\n    op_funcs[\u2019+\u2019] = [](int a, int b) { return a + b; };\n    op_funcs[\u2019-\u2019] = [](int a, int b) { return a - b; };\n    op_funcs[\u2019*\u2019] = [](int a, int b) { return a * b; };\n    for (int i = 0; i < n; ++i) {\n        for (int j = i; j >= 0; --j) {\n            if (i == j) {\n                dp[j][i].push_back(nums[i]);\n                continue;\n            }\n            for (int k = j; k < i; ++k) {\n                for (auto l : dp[j][k]) {\n                    for (auto r : dp[k + 1][i]) {\n                        dp[j][i].push_back(op_funcs[ops[k]](l, r));\n                    }\n                }\n            }\n        }\n    }\n    return dp[0][n - 1];\n}\n"})})}),(0,r.jsx)(i,{value:"py",label:"Python",children:(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-py",children:'def diffWaysToCompute(expression: str) -> List[int]:\n    # re.split\u53ef\u4ee5\u5c06\u64cd\u4f5c\u7b26\uff08\\D\uff09\u548c\u6570\u5b57\u76f4\u63a5\u5206\u5f00\u3002\n    sections = re.split(r"(\\D)", expression)\n    nums = [int(num) for num in sections if num.isdigit()]\n    ops = [op for op in sections if not op.isdigit()]\n    n = len(nums)\n    dp = [[[] for _ in range(n)] for _ in range(n)]\n    op_funcs = {\n        "+": (lambda x, y: x + y),\n        "-": (lambda x, y: x - y),\n        "*": (lambda x, y: x * y),\n    }\n    for i in range(n):\n        for j in range(i, -1, -1):\n            if i == j:\n                dp[j][i].append(nums[i])\n                continue\n            for k in range(j, i):\n                dp[j][i] += [op_funcs[ops[k]](l, r)\n                            for l in dp[j][k] for r in dp[k + 1][i]]\n\n    return dp[0][n - 1]\n             \n'})})})]})]})}function l(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(p,{...n})}):p(n)}function u(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);