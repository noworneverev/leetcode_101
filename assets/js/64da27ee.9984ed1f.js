"use strict";(self.webpackChunkleetcode_101=self.webpackChunkleetcode_101||[]).push([[7031],{5363:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"trees/13-6-trie","title":"13.6 \u5b57\u5178\u6811","description":"\u5b57\u5178\u6811\uff08Trie\uff09\u7528\u4e8e\u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u5b58\u5728\u6216\u8005\u662f\u5426\u5177\u6709\u67d0\u79cd\u5b57\u7b26\u4e32\u524d\u7f00\u3002","source":"@site/docs/13-trees/13-6-trie.mdx","sourceDirName":"13-trees","slug":"/trees/13-6-trie","permalink":"/leetcode_101/trees/13-6-trie","draft":false,"unlisted":false,"editUrl":"https://github.com/noworneverev/leetcode_101/tree/master/leetcode_101/docs/13-trees/13-6-trie.mdx","tags":[],"version":"current","sidebarPosition":73,"frontMatter":{"sidebar_position":73},"sidebar":"tutorialSidebar","previous":{"title":"13.5 \u4e8c\u53c9\u67e5\u627e\u6811","permalink":"/leetcode_101/trees/13-5-binary-search-tree"},"next":{"title":"13.7 \u7ec3\u4e60","permalink":"/leetcode_101/trees/13-7-exercises"}}');var i=r(4848),t=r(8453);const o={sidebar_position:73},d="13.6 \u5b57\u5178\u6811",a={},l=[{value:"208. Implement Trie (Pre\ufb01x Tree)",id:"208-implement-trie-pre\ufb01x-tree",level:2},{value:"\u9898\u76ee\u63cf\u8ff0",id:"\u9898\u76ee\u63cf\u8ff0",level:3},{value:"\u8f93\u5165\u8f93\u51fa\u6837\u4f8b",id:"\u8f93\u5165\u8f93\u51fa\u6837\u4f8b",level:3},{value:"\u9898\u89e3",id:"\u9898\u89e3",level:3}];function c(e){const n={a:"a",annotation:"annotation",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",math:"math",mi:"mi",mn:"mn",mo:"mo",mrow:"mrow",p:"p",pre:"pre",semantics:"semantics",span:"span",...(0,t.R)(),...e.components},{TabItem:s,Tabs:o}=n;return s||p("TabItem",!0),o||p("Tabs",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"136-\u5b57\u5178\u6811",children:"13.6 \u5b57\u5178\u6811"})}),"\n",(0,i.jsx)(n.p,{children:"\u5b57\u5178\u6811\uff08Trie\uff09\u7528\u4e8e\u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u5b58\u5728\u6216\u8005\u662f\u5426\u5177\u6709\u67d0\u79cd\u5b57\u7b26\u4e32\u524d\u7f00\u3002"}),"\n",(0,i.jsxs)("figure",{children:[(0,i.jsx)("span",{style:{display:"block",width:"50%",margin:"0 auto"},children:(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:r(6183).A+"",width:"499",height:"469"})})}),(0,i.jsx)("figcaption",{style:{textAlign:"center"},children:"\u56fe 13.1: \u5b57\u5178\u6811\uff0c\u5b58\u50a8\u4e86\u5355\u8bcd A\u3001to\u3001tea\u3001ted\u3001ten\u3001i\u3001in \u548c inn\uff0c\u4ee5\u53ca\u5b83\u4eec\u7684\u9891\u7387"})]}),"\n",(0,i.jsxs)(n.p,{children:["\u4e3a\u4ec0\u4e48\u9700\u8981\u7528\u5b57\u5178\u6811\u89e3\u51b3\u8fd9\u7c7b\u95ee\u9898\u5462\uff1f\u5047\u5982\u6211\u4eec\u6709\u4e00\u4e2a\u50a8\u5b58\u4e86\u8fd1\u4e07\u4e2a\u5355\u8bcd\u7684\u5b57\u5178\uff0c\u5373\u4f7f\u6211\u4eec\u4f7f\u7528\u54c8\u5e0c\uff0c\u5728\u5176\u4e2d\u641c\u7d22\u4e00\u4e2a\u5355\u8bcd\u7684\u5b9e\u9645\u5f00\u9500\u4e5f\u662f\u975e\u5e38\u5927\u7684\uff0c\u4e14\u65e0\u6cd5\u8f7b\u6613\u652f\u6301\u641c\u7d22\u5355\u8bcd\u524d\u7f00\u3002\u7136\u800c\u7531\u4e8e\u4e00\u4e2a\u82f1\u6587\u5355\u8bcd\u7684\u957f\u5ea6 n \u901a\u5e38\u5728 10 \u4ee5\u5185\uff0c\u5982\u679c\u6211\u4eec\u4f7f\u7528\u5b57\u5178\u6811\uff0c\u5219\u53ef\u4ee5\u5728 ",(0,i.jsxs)(n.span,{className:"katex",children:[(0,i.jsx)(n.span,{className:"katex-mathml",children:(0,i.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(n.semantics,{children:[(0,i.jsxs)(n.mrow,{children:[(0,i.jsx)(n.mi,{children:"O"}),(0,i.jsx)(n.mo,{stretchy:"false",children:"("}),(0,i.jsx)(n.mi,{children:"n"}),(0,i.jsx)(n.mo,{stretchy:"false",children:")"})]}),(0,i.jsx)(n.annotation,{encoding:"application/x-tex",children:"O(n)"})]})})}),(0,i.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(n.span,{className:"base",children:[(0,i.jsx)(n.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,i.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,i.jsx)(n.span,{className:"mopen",children:"("}),(0,i.jsx)(n.span,{className:"mord mathnormal",children:"n"}),(0,i.jsx)(n.span,{className:"mclose",children:")"})]})})]}),"\u2014\u2014\u8fd1\u4f3c ",(0,i.jsxs)(n.span,{className:"katex",children:[(0,i.jsx)(n.span,{className:"katex-mathml",children:(0,i.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(n.semantics,{children:[(0,i.jsxs)(n.mrow,{children:[(0,i.jsx)(n.mi,{children:"O"}),(0,i.jsx)(n.mo,{stretchy:"false",children:"("}),(0,i.jsx)(n.mn,{children:"1"}),(0,i.jsx)(n.mo,{stretchy:"false",children:")"})]}),(0,i.jsx)(n.annotation,{encoding:"application/x-tex",children:"O(1)"})]})})}),(0,i.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(n.span,{className:"base",children:[(0,i.jsx)(n.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,i.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,i.jsx)(n.span,{className:"mopen",children:"("}),(0,i.jsx)(n.span,{className:"mord",children:"1"}),(0,i.jsx)(n.span,{className:"mclose",children:")"})]})})]})," \u7684\u65f6\u95f4\u5185\u5b8c\u6210\u641c\u7d22\uff0c\u4e14\u989d\u5916\u5f00\u9500\u975e\u5e38\u5c0f\u3002"]}),"\n",(0,i.jsx)(n.h2,{id:"208-implement-trie-pre\ufb01x-tree",children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/implement-trie-prefix-tree/",children:"208. Implement Trie (Pre\ufb01x Tree)"})}),"\n",(0,i.jsx)(n.h3,{id:"\u9898\u76ee\u63cf\u8ff0",children:"\u9898\u76ee\u63cf\u8ff0"}),"\n",(0,i.jsx)(n.p,{children:"\u5c1d\u8bd5\u5efa\u7acb\u4e00\u4e2a\u5b57\u5178\u6811\uff0c\u652f\u6301\u5feb\u901f\u63d2\u5165\u5355\u8bcd\u3001\u67e5\u627e\u5355\u8bcd\u3001\u67e5\u627e\u5355\u8bcd\u524d\u7f00\u7684\u529f\u80fd\u3002"}),"\n",(0,i.jsx)(n.h3,{id:"\u8f93\u5165\u8f93\u51fa\u6837\u4f8b",children:"\u8f93\u5165\u8f93\u51fa\u6837\u4f8b"}),"\n",(0,i.jsx)(n.p,{children:"\u4ee5\u4e0b\u662f\u6570\u636e\u7ed3\u6784\u7684\u8c03\u7528\u6837\u4f8b\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'Trie trie = new Trie();\ntrie.insert("apple");\ntrie.search("apple"); // true\ntrie.search("app"); // false\ntrie.startsWith("app"); // true\ntrie.insert("app");\ntrie.search("app"); // true\n'})}),"\n",(0,i.jsx)(n.h3,{id:"\u9898\u89e3",children:"\u9898\u89e3"}),"\n",(0,i.jsx)(n.p,{children:"\u4ee5\u4e0b\u662f\u5b57\u5178\u6811\u7684\u5178\u578b\u5b9e\u73b0\u65b9\u6cd5\u3002"}),"\n",(0,i.jsxs)(o,{children:[(0,i.jsx)(s,{value:"cpp",label:"C++",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"struct TrieNode {\n    bool word_ends;\n    vector<TrieNode*> children;\n    TrieNode() : word_ends(false), children(26, nullptr) {}\n};\n\nclass Trie {\n   public:\n    Trie() : root_(new TrieNode()) {}\n\n    void insert(string word) {\n        TrieNode* node = root_;\n        for (char c : word) {\n            int pos = c - \u2019a\u2019;\n            if (node->children[pos] == nullptr) {\n                node->children[pos] = new TrieNode();\n            }\n            node = node->children[pos];\n        }\n        node->word_ends = true;\n    }\n\n    bool search(string word) {\n        TrieNode* node = root_;\n        for (char c : word) {\n            if (node == nullptr) {\n                break;\n            }\n            node = node->children[c - \u2019a\u2019];\n        }\n        return node != nullptr && node->word_ends;\n    }\n\n    bool startsWith(string prefix) {\n        TrieNode* node = root_;\n        for (char c : prefix) {\n            if (node == nullptr) {\n                break;\n            }\n            node = node->children[c - \u2019a\u2019];\n        }\n        return node != nullptr;\n    }\n\n   private:\n    TrieNode* root_;\n};\n"})})}),(0,i.jsx)(s,{value:"py",label:"Python",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:'class TrieNode:\n    def __init__(self):\n        self.word_ends = False\n        self.children = [None] * 26\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n\n    def insert(self, word: str) -> None:\n        node = self.root\n        for c in word:\n            pos = ord(c) - ord("a")\n            if node.children[pos] is None:\n                node.children[pos] = TrieNode()\n            node = node.children[pos]\n        node.word_ends = True\n\n    def search(self, word: str) -> bool:\n        node = self.root\n        for c in word:\n            if node is None:\n                break\n            node = node.children[ord(c) - ord("a")]\n        return node is not None and node.word_ends\n\n    def startsWith(self, prefix: str) -> bool:\n        node = self.root\n        for c in prefix:\n            if node is None:\n                break\n            node = node.children[ord(c) - ord("a")]\n        return node is not None\n\n'})})})]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}function p(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},6183:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/13.1-8f62e3e9e89a8b86a7e3ded16599bba3.png"}}]);