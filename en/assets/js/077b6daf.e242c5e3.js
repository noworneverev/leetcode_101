"use strict";(self.webpackChunkleetcode_101=self.webpackChunkleetcode_101||[]).push([[7308],{7314:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>p,frontMatter:()=>l,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"bitwise-operations/9-2-basic-bitwise-problems","title":"9.2 Basic Problems in Bit Manipulation","description":"461. Hamming Distance","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/9-bitwise-operations/9-2-basic-bitwise-problems.mdx","sourceDirName":"9-bitwise-operations","slug":"/bitwise-operations/9-2-basic-bitwise-problems","permalink":"/leetcode_101/en/bitwise-operations/9-2-basic-bitwise-problems","draft":false,"unlisted":false,"editUrl":"https://github.com/noworneverev/leetcode_101/tree/master/leetcode_101/docs/9-bitwise-operations/9-2-basic-bitwise-problems.mdx","tags":[],"version":"current","sidebarPosition":45,"frontMatter":{"sidebar_position":45},"sidebar":"tutorialSidebar","previous":{"title":"9.1 Common Techniques","permalink":"/leetcode_101/en/bitwise-operations/9-1-common-techniques"},"next":{"title":"9.3 Binary Features","permalink":"/leetcode_101/en/bitwise-operations/9-3-binary-properties"}}');var s=i(4848),r=i(8453);const l={sidebar_position:45},a="9.2 Basic Problems in Bit Manipulation",o={},d=[{value:"461. Hamming Distance",id:"461-hamming-distance",level:2},{value:"Problem Description",id:"problem-description",level:3},{value:"Input and Output Example",id:"input-and-output-example",level:3},{value:"Solution Explanation",id:"solution-explanation",level:3},{value:"190. Reverse Bits",id:"190-reverse-bits",level:2},{value:"Problem Description",id:"problem-description-1",level:3},{value:"Input and Output Example",id:"input-and-output-example-1",level:3},{value:"Solution Explanation",id:"solution-explanation-1",level:3},{value:"136. Single Number",id:"136-single-number",level:2},{value:"Problem Description",id:"problem-description-2",level:3},{value:"Input and Output Example",id:"input-and-output-example-2",level:3},{value:"Solution Explanation",id:"solution-explanation-2",level:3}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components},{TabItem:i,Tabs:t}=n;return i||u("TabItem",!0),t||u("Tabs",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"92-basic-problems-in-bit-manipulation",children:"9.2 Basic Problems in Bit Manipulation"})}),"\n",(0,s.jsx)(n.h2,{id:"461-hamming-distance",children:(0,s.jsx)(n.a,{href:"https://leetcode.com/problems/hamming-distance/",children:"461. Hamming Distance"})}),"\n",(0,s.jsx)(n.h3,{id:"problem-description",children:"Problem Description"}),"\n",(0,s.jsx)(n.p,{children:"Given two decimal numbers, calculate the Hamming distance between their binary representations (i.e., the number of differing bits)."}),"\n",(0,s.jsx)(n.h3,{id:"input-and-output-example",children:"Input and Output Example"}),"\n",(0,s.jsx)(n.p,{children:"The input consists of two decimal integers, and the output is a decimal integer representing their Hamming distance."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Input: x = 1, y = 4\nOutput: 2\n"})}),"\n",(0,s.jsxs)(n.p,{children:["In this example, the binary representation of 1 is ",(0,s.jsx)(n.code,{children:"0001"}),", and that of 4 is ",(0,s.jsx)(n.code,{children:"0100"}),", with two differing bits."]}),"\n",(0,s.jsx)(n.h3,{id:"solution-explanation",children:"Solution Explanation"}),"\n",(0,s.jsxs)(n.p,{children:["Perform a bitwise XOR operation on the two numbers and count the number of ",(0,s.jsx)(n.code,{children:"1"}),"s in the result."]}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)(i,{value:"cpp",label:"C++",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"int hammingDistance(int x, int y) {\n    int diff = x ^ y, dist = 0;\n    while (diff != 0) {\n        dist += diff & 1;\n        diff >>= 1;\n    }\n    return dist;\n}\n"})})}),(0,s.jsx)(i,{value:"py",label:"Python",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"def hammingDistance(x: int, y: int) -> int:\n    diff = x ^ y\n    dist = 0\n    while diff != 0:\n        dist += diff & 1\n        diff = diff >> 1\n    return dist\n"})})})]}),"\n",(0,s.jsx)(n.h2,{id:"190-reverse-bits",children:(0,s.jsx)(n.a,{href:"https://leetcode.com/problems/reverse-bits/",children:"190. Reverse Bits"})}),"\n",(0,s.jsx)(n.h3,{id:"problem-description-1",children:"Problem Description"}),"\n",(0,s.jsx)(n.p,{children:"Given a decimal positive integer, output its reversed binary representation."}),"\n",(0,s.jsx)(n.h3,{id:"input-and-output-example-1",children:"Input and Output Example"}),"\n",(0,s.jsx)(n.p,{children:"Both input and output are decimal positive integers."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Input: 43261596 (00000010100101000001111010011100)\nOutput: 964176192 (00111001011110000010100101000000)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Using arithmetic left shift and right shift, binary reversal can be easily implemented."}),"\n",(0,s.jsx)(n.h3,{id:"solution-explanation-1",children:"Solution Explanation"}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)(i,{value:"cpp",label:"C++",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"uint32_t reverseBits(uint32_t n) {\n    uint32_t m = 0;\n    for (int i = 0; i < 32; ++i) {\n        m <<= 1;\n        m += n & 1;\n        n >>= 1;\n    }\n    return m;\n}\n"})})}),(0,s.jsx)(i,{value:"py",label:"Python",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"def reverseBits(n: int) -> int:\n    m = 0\n    for _ in range(32):\n        m = m << 1\n        m += n & 1\n        n = n >> 1\n    return m\n"})})})]}),"\n",(0,s.jsx)(n.h2,{id:"136-single-number",children:(0,s.jsx)(n.a,{href:"https://leetcode.com/problems/single-number/",children:"136. Single Number"})}),"\n",(0,s.jsx)(n.h3,{id:"problem-description-2",children:"Problem Description"}),"\n",(0,s.jsx)(n.p,{children:"Given an integer array, only one number in this array appears exactly once, while all other numbers appear twice. Find the number that appears only once."}),"\n",(0,s.jsx)(n.h3,{id:"input-and-output-example-2",children:"Input and Output Example"}),"\n",(0,s.jsx)(n.p,{children:"The input is a one-dimensional integer array, and the output is an integer from the array."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Input: [4,1,2,1,2]\nOutput: 4\n"})}),"\n",(0,s.jsx)(n.h3,{id:"solution-explanation-2",children:"Solution Explanation"}),"\n",(0,s.jsx)(n.p,{children:"We can use the properties of x \u2227 x = 0 and x \u2227 0 = x to solve this. By performing a bitwise XOR on all numbers in the array, the result of XORing all numbers that appear twice is 0. XORing 0 with the number that appears once gives the number itself."}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)(i,{value:"cpp",label:"C++",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"int singleNumber(vector<int>& nums) {\n    int single = 0;\n    for (int num : nums) {\n        single ^= num;\n    }\n    return single;\n}\n"})})}),(0,s.jsx)(i,{value:"py",label:"Python",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"def singleNumber(nums: List[int]) -> int:\n    single = 0\n    for num in nums:\n        single = single ^ num\n    return single\n"})})})]}),"\n",(0,s.jsxs)(n.p,{children:["Here, we can also directly use the ",(0,s.jsx)(n.code,{children:"reduce"})," function:"]}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)(i,{value:"cpp",label:"C++",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"int singleNumber(vector<int>& nums) {\n    return reduce(nums.begin(), nums.end(), 0,\n                  [](int x, int y) { return x ^ y; });\n}\n"})})}),(0,s.jsx)(i,{value:"py",label:"Python",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"def singleNumber(nums: List[int]) -> int:\n    return functools.reduce(lambda x, y: x ^ y, nums)\n"})})})]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}function u(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);