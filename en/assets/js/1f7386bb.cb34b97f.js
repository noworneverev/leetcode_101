"use strict";(self.webpackChunkleetcode_101=self.webpackChunkleetcode_101||[]).push([[1202],{1570:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"graphs/14-2-bipartite-graph","title":"14.2 Bipartite Graph","description":"The bipartite graph algorithm, also known as the coloring method, uses a breadth-first search (BFS). A graph is bipartite if its nodes can be colored using two colors such that no two adjacent nodes have the same color.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/14-graphs/14-2-bipartite-graph.mdx","sourceDirName":"14-graphs","slug":"/graphs/14-2-bipartite-graph","permalink":"/leetcode_101/en/graphs/14-2-bipartite-graph","draft":false,"unlisted":false,"editUrl":"https://github.com/noworneverev/leetcode_101/tree/master/leetcode_101/docs/14-graphs/14-2-bipartite-graph.mdx","tags":[],"version":"current","sidebarPosition":76,"frontMatter":{"sidebar_position":76},"sidebar":"tutorialSidebar","previous":{"title":"14.1 Data Structure Introduction","permalink":"/leetcode_101/en/graphs/14-1-data-structure-introduction"},"next":{"title":"14.3 Topological Sort","permalink":"/leetcode_101/en/graphs/14-3-topological-sorting"}}');var i=t(4848),o=t(8453);const a={sidebar_position:76},s="14.2 Bipartite Graph",c={},l=[{value:"785. Is Graph Bipartite?",id:"785-is-graph-bipartite",level:2},{value:"Problem Description",id:"problem-description",level:3},{value:"Input and Output Example",id:"input-and-output-example",level:3},{value:"Solution Explanation",id:"solution-explanation",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components},{TabItem:t,Tabs:r}=n;return t||h("TabItem",!0),r||h("Tabs",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"142-bipartite-graph",children:"14.2 Bipartite Graph"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"bipartite graph"})," algorithm, also known as the ",(0,i.jsx)(n.code,{children:"coloring method"}),", uses a breadth-first search (BFS). A graph is bipartite if its nodes can be colored using two colors such that no two adjacent nodes have the same color."]}),"\n",(0,i.jsx)(n.h2,{id:"785-is-graph-bipartite",children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/is-graph-bipartite/",children:"785. Is Graph Bipartite?"})}),"\n",(0,i.jsx)(n.h3,{id:"problem-description",children:"Problem Description"}),"\n",(0,i.jsx)(n.p,{children:"Given a graph, determine if it is bipartite."}),"\n",(0,i.jsx)(n.h3,{id:"input-and-output-example",children:"Input and Output Example"}),"\n",(0,i.jsxs)(n.p,{children:["The input is a graph represented as an adjacency list (e.g., position ",(0,i.jsx)(n.code,{children:"0"})," in the adjacency list is ",(0,i.jsx)(n.code,{children:"[1,3]"}),", indicating node ",(0,i.jsx)(n.code,{children:"0"})," is connected to nodes ",(0,i.jsx)(n.code,{children:"1"})," and ",(0,i.jsx)(n.code,{children:"3"}),"). The output is a boolean value indicating whether the graph is bipartite."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Input: [[1,3], [0,2], [1,3], [0,2]]\n0----1\n|    |\n|    |\n3----2\nOutput: true\n"})}),"\n",(0,i.jsxs)(n.p,{children:["In this example, we can partition the nodes into two groups: ",(0,i.jsx)(n.code,{children:"{0,2}"})," and ",(0,i.jsx)(n.code,{children:"{1,3}"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"solution-explanation",children:"Solution Explanation"}),"\n",(0,i.jsxs)(n.p,{children:["Using a queue and breadth-first search (BFS), we can color unvisited nodes and check whether adjacent nodes share the same color. In the code, ",(0,i.jsx)(n.code,{children:"0"})," represents unvisited nodes, and ",(0,i.jsx)(n.code,{children:"1"})," and ",(0,i.jsx)(n.code,{children:"2"})," represent the two different colors."]}),"\n",(0,i.jsxs)(r,{children:[(0,i.jsx)(t,{value:"cpp",label:"C++",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"bool isBipartite(vector<vector<int>>& graph) {\n    int n = graph.size();\n    vector<int> color(n, 0);\n    queue<int> q;\n    for (int i = 0; i < n; ++i) {\n        if (color[i] == 0) {\n            q.push(i);\n            color[i] = 1;\n        }\n        while (!q.empty()) {\n            int node = q.front();\n            q.pop();\n            for (int j : graph[node]) {\n                if (color[j] == 0) {\n                    q.push(j);\n                    color[j] = color[node] == 2 ? 1 : 2;\n                } else if (color[j] == color[node]) {\n                    return false;\n                }\n            }\n        }\n    }\n    return true;\n}\n"})})}),(0,i.jsx)(t,{value:"py",label:"Python",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:"def isBipartite(graph: List[List[int]]) -> bool:\n    n = len(graph)\n    color = [0] * n\n    q = collections.deque()\n\n    for i in range(n):\n        if color[i] == 0:\n            q.append(i)\n            color[i] = 1\n        while len(q) > 0:\n            node = q.popleft()\n            for j in graph[node]:\n                if color[j] == 0:\n                    q.append(j)\n                    color[j] = 1 if color[node] == 2 else 2\n                elif color[j] == color[node]:\n                    return False\n    return True\n"})})})]})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}function h(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);