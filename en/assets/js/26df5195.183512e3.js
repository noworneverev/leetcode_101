"use strict";(self.webpackChunkleetcode_101=self.webpackChunkleetcode_101||[]).push([[285],{637:(e,i,r)=>{r.r(i),r.d(i,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"searching-algorithms/5-5-exercises","title":"5.5 Exercises","description":"Basic Difficulty","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/5-searching-algorithms/5-5-exercises.md","sourceDirName":"5-searching-algorithms","slug":"/searching-algorithms/5-5-exercises","permalink":"/leetcode_101/en/searching-algorithms/5-5-exercises","draft":false,"unlisted":false,"editUrl":"https://github.com/noworneverev/leetcode_101/tree/master/leetcode_101/docs/5-searching-algorithms/5-5-exercises.md","tags":[],"version":"current","sidebarPosition":25,"frontMatter":{"sidebar_position":25},"sidebar":"tutorialSidebar","previous":{"title":"5.4 Breadth-First Search","permalink":"/leetcode_101/en/searching-algorithms/5-4-breadth-first-search"},"next":{"title":"6. \u6df1\u5165\u6d45\u51fa\u52a8\u6001\u89c4\u5212","permalink":"/leetcode_101/en/category/6-\u6df1\u5165\u6d45\u51fa\u52a8\u6001\u89c4\u5212"}}');var t=r(4848),n=r(8453);const o={sidebar_position:25},a="5.5 Exercises",l={},c=[{value:"Basic Difficulty",id:"basic-difficulty",level:2},{value:"130. Surrounded Regions",id:"130-surrounded-regions",level:3},{value:"257. Binary Tree Paths",id:"257-binary-tree-paths",level:3},{value:"Advanced Difficulty",id:"advanced-difficulty",level:2},{value:"47. Permutations II",id:"47-permutations-ii",level:3},{value:"40. Combination Sum II",id:"40-combination-sum-ii",level:3},{value:"37. Sudoku Solver",id:"37-sudoku-solver",level:3},{value:"310. Minimum Height Trees",id:"310-minimum-height-trees",level:3}];function d(e){const i={a:"a",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",...(0,n.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.header,{children:(0,t.jsx)(i.h1,{id:"55-exercises",children:"5.5 Exercises"})}),"\n",(0,t.jsx)(i.h2,{id:"basic-difficulty",children:"Basic Difficulty"}),"\n",(0,t.jsx)(i.h3,{id:"130-surrounded-regions",children:(0,t.jsx)(i.a,{href:"https://leetcode.com/problems/surrounded-regions/",children:"130. Surrounded Regions"})}),"\n",(0,t.jsx)(i.p,{children:"Start by filling from the outer edges, then consider the inner regions."}),"\n",(0,t.jsx)(i.h3,{id:"257-binary-tree-paths",children:(0,t.jsx)(i.a,{href:"https://leetcode.com/problems/binary-tree-paths/",children:"257. Binary Tree Paths"})}),"\n",(0,t.jsx)(i.p,{children:"Output all paths from the root to the leaves in a binary tree. What is the difference if backtracking is used?"}),"\n",(0,t.jsx)(i.h2,{id:"advanced-difficulty",children:"Advanced Difficulty"}),"\n",(0,t.jsx)(i.h3,{id:"47-permutations-ii",children:(0,t.jsx)(i.a,{href:"https://leetcode.com/problems/permutations-ii/",children:"47. Permutations II"})}),"\n",(0,t.jsx)(i.p,{children:"A follow-up to the permutations problem. How to handle duplicate elements?"}),"\n",(0,t.jsx)(i.h3,{id:"40-combination-sum-ii",children:(0,t.jsx)(i.a,{href:"https://leetcode.com/problems/combination-sum-ii/",children:"40. Combination Sum II"})}),"\n",(0,t.jsx)(i.p,{children:"A follow-up to the combination problem. How to handle duplicate elements?"}),"\n",(0,t.jsx)(i.h3,{id:"37-sudoku-solver",children:(0,t.jsx)(i.a,{href:"https://leetcode.com/problems/sudoku-solver/",children:"37. Sudoku Solver"})}),"\n",(0,t.jsx)(i.p,{children:"A very classic Sudoku problem that can be solved using backtracking. In fact, there are many advanced search methods and pruning strategies, such as heuristic search, to improve speed for Sudoku-related problems."}),"\n",(0,t.jsx)(i.h3,{id:"310-minimum-height-trees",children:(0,t.jsx)(i.a,{href:"https://leetcode.com/problems/minimum-height-trees/",children:"310. Minimum Height Trees"})}),"\n",(0,t.jsx)(i.p,{children:"How can this problem be transformed into a search problem? Should depth-first search or breadth-first search be used?"})]})}function h(e={}){const{wrapper:i}={...(0,n.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);