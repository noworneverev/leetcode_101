"use strict";(self.webpackChunkleetcode_101=self.webpackChunkleetcode_101||[]).push([[1176],{8750:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"binary-search-techniques/3-3-interval-search","title":"3.3 Find Range","description":"34. Find First and Last Position of Element in Sorted Array","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/3-binary-search-techniques/3-3-interval-search.mdx","sourceDirName":"3-binary-search-techniques","slug":"/binary-search-techniques/3-3-interval-search","permalink":"/leetcode_101/en/binary-search-techniques/3-3-interval-search","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":13,"frontMatter":{"sidebar_position":13},"sidebar":"tutorialSidebar","previous":{"title":"3.2 Calculating Square Root","permalink":"/leetcode_101/en/binary-search-techniques/3-2-square-root"},"next":{"title":"3.4 Find Maximum","permalink":"/leetcode_101/en/binary-search-techniques/3-4-peak-finding"}}');var i=t(4848),s=t(8453);const a={sidebar_position:13},o="3.3 Find Range",l={},d=[{value:"34. Find First and Last Position of Element in Sorted Array",id:"34-find-first-and-last-position-of-element-in-sorted-array",level:2},{value:"Problem Description",id:"problem-description",level:3},{value:"Input and Output Example",id:"input-and-output-example",level:3},{value:"Solution Explanation",id:"solution-explanation",level:3}];function u(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components},{TabItem:t,Tabs:r}=n;return t||p("TabItem",!0),r||p("Tabs",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"33-find-range",children:"3.3 Find Range"})}),"\n",(0,i.jsx)(n.h2,{id:"34-find-first-and-last-position-of-element-in-sorted-array",children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/",children:"34. Find First and Last Position of Element in Sorted Array"})}),"\n",(0,i.jsx)(n.h3,{id:"problem-description",children:"Problem Description"}),"\n",(0,i.jsx)(n.p,{children:"Given a sorted integer array and a target value, find the first and last positions where the target value appears."}),"\n",(0,i.jsx)(n.h3,{id:"input-and-output-example",children:"Input and Output Example"}),"\n",(0,i.jsx)(n.p,{children:"The input is an array and a value, and the output is the positions of the first and last appearances of the target value (starting from 0). If the value does not exist in the array, both return values should be -1."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Input: nums = [5,7,7,8,8,10], target = 8\nOutput: [3,4]\n"})}),"\n",(0,i.jsx)(n.p,{children:"The number 8 first appears at position 3 and last appears at position 4."}),"\n",(0,i.jsx)(n.h3,{id:"solution-explanation",children:"Solution Explanation"}),"\n",(0,i.jsxs)(n.p,{children:["This problem can be seen as implementing C++'s ",(0,i.jsx)(n.code,{children:"lower_bound"})," and ",(0,i.jsx)(n.code,{children:"upper_bound"})," functions or Python's ",(0,i.jsx)(n.code,{children:"bisect_left"})," and ",(0,i.jsx)(n.code,{children:"bisect_right"})," functions. Here, we use a left-closed, right-open interval approach, but a left-closed, right-closed interval would also work."]}),"\n",(0,i.jsxs)(r,{children:[(0,i.jsx)(t,{value:"cpp",label:"C++",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"int lowerBound(vector<int> &nums, int target) {\n    int l = 0, r = nums.size(), mid;\n    while (l < r) {\n        mid = l + (r - l) / 2;\n        if (nums[mid] < target) {\n            l = mid + 1;\n        } else {\n            r = mid;\n        }\n    }\n    return l;\n}\n\nint upperBound(vector<int> &nums, int target) {\n    int l = 0, r = nums.size(), mid;\n    while (l < r) {\n        mid = l + (r - l) / 2;\n        if (nums[mid] <= target) {\n            l = mid + 1;\n        } else {\n            r = mid;\n        }\n    }\n    return l;\n}\n\nvector<int> searchRange(vector<int> &nums, int target) {\n    if (nums.empty()) {\n        return vector<int>{-1, -1};\n    }\n    int lower = lowerBound(nums, target);\n    int upper = upperBound(nums, target) - 1;\n    if (lower == nums.size() || nums[lower] != target) {\n        return vector<int>{-1, -1};\n    }\n    return vector<int>{lower, upper};\n}\n"})})}),(0,i.jsx)(t,{value:"py",label:"Python",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:"def lowerBound(nums: List[int], target: int) -> int:\n    l, r = 0, len(nums)\n    while l < r:\n        mid = (l + r) // 2\n        if nums[mid] < target:\n            l = mid + 1\n        else:\n            r = mid\n    return l\n\ndef upperBound(nums: List[int], target: int) -> int:\n    l, r = 0, len(nums)\n    while l < r:\n        mid = (l + r) // 2\n        if nums[mid] <= target:\n            l = mid + 1\n        else:\n            r = mid\n    return l\n\ndef searchRange(nums: List[int], target: int) -> List[int]:\n    if not nums:\n        return [-1, -1]\n    lower = lowerBound(nums, target)\n    upper = upperBound(nums, target) - 1\n    if lower == len(nums) or nums[lower] != target:\n        return [-1, -1]\n    return [lower, upper]\n"})})})]})]})}function c(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}function p(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);