"use strict";(self.webpackChunkleetcode_101=self.webpackChunkleetcode_101||[]).push([[5206],{4063:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>m,frontMatter:()=>s,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"mathematical-solutions/8-2-lcm-gcd","title":"8.2 Least Common Multiple and Greatest Common Divisor","description":"Using the Euclidean algorithm, we can efficiently calculate the greatest common divisor (GCD) of two numbers. Multiplying the two numbers and dividing the product by their GCD gives the least common multiple (LCM).","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/8-mathematical-solutions/8-2-lcm-gcd.mdx","sourceDirName":"8-mathematical-solutions","slug":"/mathematical-solutions/8-2-lcm-gcd","permalink":"/leetcode_101/en/mathematical-solutions/8-2-lcm-gcd","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":39,"frontMatter":{"sidebar_position":39},"sidebar":"tutorialSidebar","previous":{"title":"8.1 Introduction","permalink":"/leetcode_101/en/mathematical-solutions/8-1-introduction"},"next":{"title":"8.3 Prime Numbers","permalink":"/leetcode_101/en/mathematical-solutions/8-3-prime-numbers"}}');var a=t(4848),r=t(8453);const s={sidebar_position:39},c="8.2 Least Common Multiple and Greatest Common Divisor",o={},l=[];function d(e){const n={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components},{TabItem:t,Tabs:i}=n;return t||u("TabItem",!0),i||u("Tabs",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"82-least-common-multiple-and-greatest-common-divisor",children:"8.2 Least Common Multiple and Greatest Common Divisor"})}),"\n",(0,a.jsxs)(n.p,{children:["Using the ",(0,a.jsx)(n.code,{children:"Euclidean algorithm"}),", we can efficiently calculate the greatest common divisor (GCD) of two numbers. Multiplying the two numbers and dividing the product by their GCD gives the least common multiple (LCM)."]}),"\n",(0,a.jsxs)(i,{children:[(0,a.jsx)(t,{value:"cpp",label:"C++",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cpp",children:"int gcd(int a, int b) { \n    return b == 0 ? a : gcd(b, a % b); \n}\n\nint lcm(int a, int b) { \n    return a * b / gcd(a, b); \n}\n"})})}),(0,a.jsx)(t,{value:"py",label:"Python",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-py",children:"def gcd(a: int, b: int) -> int:\n    return a if b == 0 else gcd(b, a % b)\n\ndef lcm(a: int, b: int) -> int:\n    return (a * b) // gcd(a, b)\n"})})})]}),"\n",(0,a.jsx)(n.p,{children:"Furthermore, using the extended Euclidean algorithm (extended GCD), we can calculate not only the GCD of a and b but also their coefficients x and y such that ax + by = gcd(a, b). In Python, since int is passed by value, we can use a fixed-length list() to achieve reference passing."}),"\n",(0,a.jsxs)(i,{children:[(0,a.jsx)(t,{value:"cpp",label:"C++",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cpp",children:"int xGCD(int a, int b, int &x, int &y) {\n    if (b == 0) {\n        x = 1, y = 0;\n        return a;\n    }\n    int x_inner, y_inner;\n    int gcd = xGCD(b, a % b, x_inner, y_inner);\n    x = y_inner, y = x_inner - (a / b) * y_inner;\n    return gcd;\n}\n"})})}),(0,a.jsx)(t,{value:"py",label:"Python",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-py",children:"def xGCD(a: int, b: int, x: List[int], y: List[int]) -> int:\n    if b == 0:\n        x[0], y[0] = 1, 0\n        return a\n    x_inner, y_inner = [0], [0]\n    gcd = xGCD(b, a % b, x_inner, y_inner)\n    x[0], y[0] = y_inner, x_inner - (a / b) * y_inner\n    return gcd\n"})})})]})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}function u(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);