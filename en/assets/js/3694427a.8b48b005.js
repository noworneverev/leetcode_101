"use strict";(self.webpackChunkleetcode_101=self.webpackChunkleetcode_101||[]).push([[2025],{6074:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"dynamic-programming/6-7-string-editing","title":"6.7 String Editing","description":"72. Edit Distance","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/6-dynamic-programming/6-7-string-editing.mdx","sourceDirName":"6-dynamic-programming","slug":"/dynamic-programming/6-7-string-editing","permalink":"/leetcode_101/en/dynamic-programming/6-7-string-editing","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":32,"frontMatter":{"sidebar_position":32},"sidebar":"tutorialSidebar","previous":{"title":"6.6 Knapsack Problem","permalink":"/leetcode_101/en/dynamic-programming/6-6-knapsack-problem"},"next":{"title":"6.8 Stock Trading","permalink":"/leetcode_101/en/dynamic-programming/6-8-stock-trading"}}');var r=i(4848),d=i(8453);const o={sidebar_position:32},s="6.7 String Editing",l={},a=[{value:"72. Edit Distance",id:"72-edit-distance",level:2},{value:"Problem Description",id:"problem-description",level:3},{value:"Input and Output Example",id:"input-and-output-example",level:3},{value:"Solution Explanation",id:"solution-explanation",level:3},{value:"650. 2 Keys Keyboard",id:"650-2-keys-keyboard",level:2},{value:"Problem Description",id:"problem-description-1",level:3},{value:"Input and Output Example",id:"input-and-output-example-1",level:3},{value:"Solution Explanation",id:"solution-explanation-1",level:3}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,d.R)(),...e.components},{TabItem:i,Tabs:t}=n;return i||h("TabItem",!0),t||h("Tabs",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"67-string-editing",children:"6.7 String Editing"})}),"\n",(0,r.jsx)(n.h2,{id:"72-edit-distance",children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/edit-distance/",children:"72. Edit Distance"})}),"\n",(0,r.jsx)(n.h3,{id:"problem-description",children:"Problem Description"}),"\n",(0,r.jsx)(n.p,{children:"Given two strings, you can delete, replace, or insert any character from either string. Find the minimum number of steps required to make the two strings identical."}),"\n",(0,r.jsx)(n.h3,{id:"input-and-output-example",children:"Input and Output Example"}),"\n",(0,r.jsx)(n.p,{children:"Input consists of two strings, and the output is an integer representing the minimum number of steps."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'Input: word1 = "horse", word2 = "ros"\nOutput: 3\n'})}),"\n",(0,r.jsx)(n.p,{children:"In this example, one optimal sequence of edits is horse -> rorse -> rose -> ros."}),"\n",(0,r.jsx)(n.h3,{id:"solution-explanation",children:"Solution Explanation"}),"\n",(0,r.jsxs)(n.p,{children:["Similar to problem 1143, we use a two-dimensional array ",(0,r.jsx)(n.code,{children:"dp[i][j]"}),", where ",(0,r.jsx)(n.code,{children:"dp[i][j]"})," represents the minimum number of edits required to transform the first string up to position ",(0,r.jsx)(n.code,{children:"i"})," and the second string up to position ",(0,r.jsx)(n.code,{children:"j"}),"."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["If the characters at position ",(0,r.jsx)(n.code,{children:"i"})," and ",(0,r.jsx)(n.code,{children:"j"})," are the same, then ",(0,r.jsx)(n.code,{children:"dp[i][j] = dp[i-1][j-1]"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["If the characters differ:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The cost of modification is ",(0,r.jsx)(n.code,{children:"dp[i-1][j-1] + 1"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["The cost of inserting at position ",(0,r.jsx)(n.code,{children:"i"}),"/deleting at position ",(0,r.jsx)(n.code,{children:"j"})," is ",(0,r.jsx)(n.code,{children:"dp[i][j-1] + 1"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["The cost of inserting at position ",(0,r.jsx)(n.code,{children:"j"}),"/deleting at position ",(0,r.jsx)(n.code,{children:"i"})," is ",(0,r.jsx)(n.code,{children:"dp[i-1][j] + 1"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(t,{children:[(0,r.jsx)(i,{value:"cpp",label:"C++",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"int minDistance(string word1, string word2) {\n    int m = word1.length(), n = word2.length();\n    vector<vector<int>> dp(m + 1, vector<int>(n + 1, 0));\n    for (int i = 0; i <= m; ++i) {\n        for (int j = 0; j <= n; ++j) {\n            if (i == 0 || j == 0) {\n                dp[i][j] = i + j;\n            } else {\n                dp[i][j] = dp[i - 1][j - 1] + (word1[i - 1] != word2[j - 1]);\n                dp[i][j] = min(dp[i][j], dp[i - 1][j] + 1);\n                dp[i][j] = min(dp[i][j], dp[i][j - 1] + 1);\n            }\n        }\n    }\n    return dp[m][n];\n}\n"})})}),(0,r.jsx)(i,{value:"py",label:"Python",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:"def minDistance(word1: str, word2: str) -> int:\n    m, n = len(word1), len(word2)\n    dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                dp[i][j] = i + j\n            else:\n                dp[i][j] = min(\n                    dp[i - 1][j - 1] + int(word1[i - 1] != word2[j - 1]),\n                    dp[i][j - 1] + 1,\n                    dp[i - 1][j] + 1,\n                )\n    return dp[m][n]\n"})})})]}),"\n",(0,r.jsx)(n.h2,{id:"650-2-keys-keyboard",children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/2-keys-keyboard/",children:"650. 2 Keys Keyboard"})}),"\n",(0,r.jsx)(n.h3,{id:"problem-description-1",children:"Problem Description"}),"\n",(0,r.jsxs)(n.p,{children:["Given the letter ",(0,r.jsx)(n.code,{children:"A"}),", you can either copy all characters or paste the previously copied characters. Find the minimum number of operations needed to extend the string to the specified length."]}),"\n",(0,r.jsx)(n.h3,{id:"input-and-output-example-1",children:"Input and Output Example"}),"\n",(0,r.jsx)(n.p,{children:"The input is a positive integer representing the target length, and the output is an integer representing the minimum number of operations required."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Input: 3\nOutput: 3\n"})}),"\n",(0,r.jsx)(n.p,{children:"In this example, one optimal sequence of operations is to copy once and paste twice."}),"\n",(0,r.jsx)(n.h3,{id:"solution-explanation-1",children:"Solution Explanation"}),"\n",(0,r.jsxs)(n.p,{children:["Unlike typical dynamic programming problems that use addition or subtraction, this problem requires multiplication and division for state transitions because the paste operation doubles the length. We use a one-dimensional array ",(0,r.jsx)(n.code,{children:"dp"}),", where ",(0,r.jsx)(n.code,{children:"dp[i]"})," represents the minimum number of operations needed to extend the string to length ",(0,r.jsx)(n.code,{children:"i"}),". For each position ",(0,r.jsx)(n.code,{children:"j"}),", if ",(0,r.jsx)(n.code,{children:"j"})," divides ",(0,r.jsx)(n.code,{children:"i"}),", then length ",(0,r.jsx)(n.code,{children:"i"})," can be achieved by operating on length ",(0,r.jsx)(n.code,{children:"j"}),". The number of operations needed is equivalent to extending length ",(0,r.jsx)(n.code,{children:"j"})," to length ",(0,r.jsx)(n.code,{children:"i / j"}),". Thus, the recursive formula is ",(0,r.jsx)(n.code,{children:"dp[i] = dp[j] + dp[i / j]"}),"."]}),"\n",(0,r.jsxs)(t,{children:[(0,r.jsx)(i,{value:"cpp",label:"C++",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"int minSteps(int n) {\n    vector<int> dp(n + 1, 0);\n    for (int i = 2; i <= n; ++i) {\n        dp[i] = i;\n        for (int j = 2; j * j <= i; ++j) {\n            if (i % j == 0) {\n                dp[i] = dp[j] + dp[i / j];\n                // Early pruning since smaller j guarantees the minimal operations.\n                break;\n            }\n        }\n    }\n    return dp[n];\n}\n"})})}),(0,r.jsx)(i,{value:"py",label:"Python",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:"def minSteps(n: int) -> int:\n    dp = [0] * 2 + list(range(2, n + 1))\n    for i in range(2, n + 1):\n        for j in range(2, floor(sqrt(i)) + 1):\n            if i % j == 0:\n                dp[i] = dp[j] + dp[i // j]\n                # Early pruning since smaller j guarantees the minimal operations.\n                break\n    return dp[n]\n"})})})]})]})}function p(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}function h(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);