"use strict";(self.webpackChunkleetcode_101=self.webpackChunkleetcode_101||[]).push([[4275],{9299:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>c,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"advanced-data-structures/15-4-exercises","title":"15.4 Exercises","description":"Basic Difficulty","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/15-advanced-data-structures/15-4-exercises.md","sourceDirName":"15-advanced-data-structures","slug":"/advanced-data-structures/15-4-exercises","permalink":"/leetcode_101/en/advanced-data-structures/15-4-exercises","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":78,"frontMatter":{"sidebar_position":78},"sidebar":"tutorialSidebar","previous":{"title":"15.3 Composite Data Structures","permalink":"/leetcode_101/en/advanced-data-structures/15-3-composite-data-structures"},"next":{"title":"Acknowledgments","permalink":"/leetcode_101/en/acknowledgments"}}');var i=s(4848),n=s(8453);const c={sidebar_position:78},r="15.4 Exercises",l={},d=[{value:"Basic Difficulty",id:"basic-difficulty",level:2},{value:"1135. Connecting Cities With Minimum Cost",id:"1135-connecting-cities-with-minimum-cost",level:3},{value:"Advanced Difficulty",id:"advanced-difficulty",level:2},{value:"432. All O`one Data Structure",id:"432-all-oone-data-structure",level:3},{value:"716. Max Stack",id:"716-max-stack",level:3}];function o(e){const t={a:"a",annotation:"annotation",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",math:"math",mi:"mi",mn:"mn",mo:"mo",mrow:"mrow",p:"p",semantics:"semantics",span:"span",...(0,n.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"154-exercises",children:"15.4 Exercises"})}),"\n",(0,i.jsx)(t.h2,{id:"basic-difficulty",children:"Basic Difficulty"}),"\n",(0,i.jsx)(t.h3,{id:"1135-connecting-cities-with-minimum-cost",children:(0,i.jsx)(t.a,{href:"https://leetcode.com/problems/connecting-cities-with-minimum-cost/",children:"1135. Connecting Cities With Minimum Cost"})}),"\n",(0,i.jsx)(t.p,{children:"Solve this problem again using union-find and Kruskal\u2019s Algorithm."}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h2,{id:"advanced-difficulty",children:"Advanced Difficulty"}),"\n",(0,i.jsx)(t.h3,{id:"432-all-oone-data-structure",children:(0,i.jsx)(t.a,{href:"https://leetcode.com/problems/all-oone-data-structure/",children:"432. All O`one Data Structure"})}),"\n",(0,i.jsxs)(t.p,{children:["Design a data structure that supports increaseKey, decreaseKey, getMaxKey, and getMinKey, all in ",(0,i.jsxs)(t.span,{className:"katex",children:[(0,i.jsx)(t.span,{className:"katex-mathml",children:(0,i.jsx)(t.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(t.semantics,{children:[(0,i.jsxs)(t.mrow,{children:[(0,i.jsx)(t.mi,{children:"O"}),(0,i.jsx)(t.mo,{stretchy:"false",children:"("}),(0,i.jsx)(t.mn,{children:"1"}),(0,i.jsx)(t.mo,{stretchy:"false",children:")"})]}),(0,i.jsx)(t.annotation,{encoding:"application/x-tex",children:"O(1)"})]})})}),(0,i.jsx)(t.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(t.span,{className:"base",children:[(0,i.jsx)(t.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,i.jsx)(t.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,i.jsx)(t.span,{className:"mopen",children:"("}),(0,i.jsx)(t.span,{className:"mord",children:"1"}),(0,i.jsx)(t.span,{className:"mclose",children:")"})]})})]})," time complexity."]}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h3,{id:"716-max-stack",children:(0,i.jsx)(t.a,{href:"https://leetcode.com/problems/max-stack/",children:"716. Max Stack"})}),"\n",(0,i.jsx)(t.p,{children:"Design a stack that supports push, pop, top, getMax, and popMax. You can use a method similar to LRU to reduce time complexity, but since we need to get the maximum value, which data structure should replace the unordered_map?"})]})}function h(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}}}]);