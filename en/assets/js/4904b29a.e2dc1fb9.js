"use strict";(self.webpackChunkleetcode_101=self.webpackChunkleetcode_101||[]).push([[4052],{1006:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"bitwise-operations/9-1-common-techniques","title":"9.1 Common Techniques","description":"Bit manipulation is a unique category in algorithm problems. By leveraging the characteristics of binary bit operations, we can achieve fascinating optimizations and calculations. Here are some common bitwise operators and their functions:","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/9-bitwise-operations/9-1-common-techniques.md","sourceDirName":"9-bitwise-operations","slug":"/bitwise-operations/9-1-common-techniques","permalink":"/leetcode_101/en/bitwise-operations/9-1-common-techniques","draft":false,"unlisted":false,"editUrl":"https://github.com/noworneverev/leetcode_101/tree/master/leetcode_101/docs/9-bitwise-operations/9-1-common-techniques.md","tags":[],"version":"current","sidebarPosition":44,"frontMatter":{"sidebar_position":44},"sidebar":"tutorialSidebar","previous":{"title":"9. \u795e\u5947\u7684\u4f4d\u8fd0\u7b97","permalink":"/leetcode_101/en/category/9-\u795e\u5947\u7684\u4f4d\u8fd0\u7b97"},"next":{"title":"9.2 Basic Problems in Bit Manipulation","permalink":"/leetcode_101/en/bitwise-operations/9-2-basic-bitwise-problems"}}');var r=i(4848),t=i(8453);const o={sidebar_position:44},c="9.1 Common Techniques",l={},d=[];function a(e){const n={code:"code",h1:"h1",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"91-common-techniques",children:"9.1 Common Techniques"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Bit manipulation"})," is a unique category in algorithm problems. By leveraging the characteristics of binary bit operations, we can achieve fascinating optimizations and calculations. Here are some common bitwise operators and their functions:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"\u2227"}),": Bitwise XOR"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"&"}),": Bitwise AND"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"|"}),": Bitwise OR"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"~"}),": Bitwise NOT"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"<<"}),": Arithmetic left shift"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:">>"}),": Arithmetic right shift"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Below are some commonly used bitwise properties, where ",(0,r.jsx)(n.code,{children:"0s"})," and ",(0,r.jsx)(n.code,{children:"1s"})," represent binary numbers composed entirely of ",(0,r.jsx)(n.code,{children:"0"})," or ",(0,r.jsx)(n.code,{children:"1"}),", respectively:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"x ^ 0s = x      x & 0s = 0     x | 0s = x\nx ^ 1s = ~x     x & 1s = x     x | 1s = 1s\nx ^ x = 0       x & x = x      x | x = x\n"})}),"\n",(0,r.jsx)(n.p,{children:"Additionally, here are some frequently used techniques:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Remove the lowest set bit"}),": ",(0,r.jsx)(n.code,{children:"n & (n - 1)"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["This operation removes the lowest ",(0,r.jsx)(n.code,{children:"1"})," in the binary representation of ",(0,r.jsx)(n.code,{children:"n"}),". For example:","\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"n = 11110100\nn - 1 = 11110011\nn & (n - 1) = 11110000\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Retrieve the lowest set bit"}),": ",(0,r.jsx)(n.code,{children:"n & (-n)"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["This operation isolates the lowest ",(0,r.jsx)(n.code,{children:"1"})," in the binary representation of ",(0,r.jsx)(n.code,{children:"n"}),". For example:","\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"n = 11110100\n-n = 00001100\nn & (-n) = 00000100\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"These are the commonly used bit manipulation tricks. For those interested, there are more advanced techniques worth exploring, but they will not be covered here."})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}}}]);