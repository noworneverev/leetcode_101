"use strict";(self.webpackChunkleetcode_101=self.webpackChunkleetcode_101||[]).push([[7291],{5571:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>d,default:()=>l,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"advanced-data-structures/15-1-introduction","title":"15.1 Introduction","description":"So far, we have explored a wide range of data structures, including the \\"pointer trio\\" (linked list, tree, and graph) and C++\'s built-in STL library. For certain problems, it is necessary not only to utilize multiple data structures but also to nest and integrate them, enabling more complex and efficient operations.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/15-advanced-data-structures/15-1-introduction.md","sourceDirName":"15-advanced-data-structures","slug":"/advanced-data-structures/15-1-introduction","permalink":"/leetcode_101/en/advanced-data-structures/15-1-introduction","draft":false,"unlisted":false,"editUrl":"https://github.com/noworneverev/leetcode_101/tree/master/leetcode_101/docs/15-advanced-data-structures/15-1-introduction.md","tags":[],"version":"current","sidebarPosition":75,"frontMatter":{"sidebar_position":75},"sidebar":"tutorialSidebar","previous":{"title":"15. \u66f4\u52a0\u590d\u6742\u7684\u6570\u636e\u7ed3\u6784","permalink":"/leetcode_101/en/category/15-\u66f4\u52a0\u590d\u6742\u7684\u6570\u636e\u7ed3\u6784"},"next":{"title":"15.2 Union-Find","permalink":"/leetcode_101/en/advanced-data-structures/15-2-union-find"}}');var a=n(4848),i=n(8453);const o={sidebar_position:75},d="15.1 Introduction",s={},c=[];function u(e){const t={h1:"h1",header:"header",p:"p",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"151-introduction",children:"15.1 Introduction"})}),"\n",(0,a.jsx)(t.p,{children:'So far, we have explored a wide range of data structures, including the "pointer trio" (linked list, tree, and graph) and C++\'s built-in STL library. For certain problems, it is necessary not only to utilize multiple data structures but also to nest and integrate them, enabling more complex and efficient operations.'})]})}function l(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}}}]);