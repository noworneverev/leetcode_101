"use strict";(self.webpackChunkleetcode_101=self.webpackChunkleetcode_101||[]).push([[4641],{6769:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>h,frontMatter:()=>i,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"two-pointer-techniques/2-3-merge-sorted-arrays","title":"2.3 Merging Two Sorted Arrays","description":"88. Merge Sorted Array","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/2-two-pointer-techniques/2-3-merge-sorted-arrays.mdx","sourceDirName":"2-two-pointer-techniques","slug":"/two-pointer-techniques/2-3-merge-sorted-arrays","permalink":"/leetcode_101/en/two-pointer-techniques/2-3-merge-sorted-arrays","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"sidebar_position":7},"sidebar":"tutorialSidebar","previous":{"title":"2.2 Two Sum","permalink":"/leetcode_101/en/two-pointer-techniques/2-2-two-sum"},"next":{"title":"2.4 Sliding Window","permalink":"/leetcode_101/en/two-pointer-techniques/2-4-sliding-window"}}');var o=r(4848),s=r(8453);const i={sidebar_position:7},d="2.3 Merging Two Sorted Arrays",a={},c=[{value:"88. Merge Sorted Array",id:"88-merge-sorted-array",level:2},{value:"Problem Description",id:"problem-description",level:3},{value:"Input and Output Example",id:"input-and-output-example",level:3},{value:"Solution Explanation",id:"solution-explanation",level:3}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components},{TabItem:r,Tabs:t}=n;return r||u("TabItem",!0),t||u("Tabs",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"23-merging-two-sorted-arrays",children:"2.3 Merging Two Sorted Arrays"})}),"\n",(0,o.jsx)(n.h2,{id:"88-merge-sorted-array",children:(0,o.jsx)(n.a,{href:"https://leetcode.com/problems/merge-sorted-array/",children:"88. Merge Sorted Array"})}),"\n",(0,o.jsx)(n.h3,{id:"problem-description",children:"Problem Description"}),"\n",(0,o.jsx)(n.p,{children:"Given two sorted arrays, merge them into one array."}),"\n",(0,o.jsx)(n.h3,{id:"input-and-output-example",children:"Input and Output Example"}),"\n",(0,o.jsxs)(n.p,{children:["The input consists of two arrays and their respective lengths ",(0,o.jsx)(n.code,{children:"m"})," and ",(0,o.jsx)(n.code,{children:"n"}),". The length of the first array is extended to ",(0,o.jsx)(n.code,{children:"m + n"}),", with the extra ",(0,o.jsx)(n.code,{children:"n"})," positions filled with ",(0,o.jsx)(n.code,{children:"0"}),"s. The task is to merge the second array into the first array without allocating additional space."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3\nOutput: nums1 = [1,2,2,3,5,6]\n"})}),"\n",(0,o.jsx)(n.h3,{id:"solution-explanation",children:"Solution Explanation"}),"\n",(0,o.jsxs)(n.p,{children:["Since both arrays are already sorted, we can place two pointers at the end of each array: at the ",(0,o.jsx)(n.code,{children:"(m - 1)"})," position of ",(0,o.jsx)(n.code,{children:"nums1"})," and the ",(0,o.jsx)(n.code,{children:"(n - 1)"})," position of ",(0,o.jsx)(n.code,{children:"nums2"}),". Each time, copy the larger number to the end of ",(0,o.jsx)(n.code,{children:"nums1"})," and move the pointer one position to the left."]}),"\n",(0,o.jsxs)(n.p,{children:["To keep track of ",(0,o.jsx)(n.code,{children:"nums1"}),"'s end position, we also need a third pointer for copying. In the following code, we use ",(0,o.jsx)(n.code,{children:"m"})," and ",(0,o.jsx)(n.code,{children:"n"})," as pointers for the two arrays and create an additional pointer, ",(0,o.jsx)(n.code,{children:"pos"}),", initially set to ",(0,o.jsx)(n.code,{children:"m + n - 1"}),". Each time we move ",(0,o.jsx)(n.code,{children:"m"})," or ",(0,o.jsx)(n.code,{children:"n"})," to the left, we also move ",(0,o.jsx)(n.code,{children:"pos"})," to the left. Note that if all numbers from ",(0,o.jsx)(n.code,{children:"nums1"})," have been copied, don't forget to continue copying numbers from ",(0,o.jsx)(n.code,{children:"nums2"}),"; if all numbers from ",(0,o.jsx)(n.code,{children:"nums2"})," have been copied, the remaining numbers in ",(0,o.jsx)(n.code,{children:"nums1"})," do not need to change as they are already sorted."]}),"\n",(0,o.jsxs)(n.p,{children:["In the C++ solution, we use the ",(0,o.jsx)(n.code,{children:"++"})," and ",(0,o.jsx)(n.code,{children:"--"})," shorthand: both ",(0,o.jsx)(n.code,{children:"a++"})," and ",(0,o.jsx)(n.code,{children:"++a"})," increment ",(0,o.jsx)(n.code,{children:"a"})," by 1, but ",(0,o.jsx)(n.code,{children:"a++"})," returns the original value of ",(0,o.jsx)(n.code,{children:"a"}),", while ",(0,o.jsx)(n.code,{children:"++a"})," returns ",(0,o.jsx)(n.code,{children:"a + 1"}),". If you only want to increase ",(0,o.jsx)(n.code,{children:"a"})," without needing a return value, either syntax is fine (",(0,o.jsx)(n.code,{children:"++a"})," is slightly faster in unoptimized code)."]}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)(r,{value:"cpp",label:"C++",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-cpp",children:"void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {\n    int pos = m-- + n-- - 1;\n    while (m >= 0 && n >= 0) {\n        nums1[pos--] = nums1[m] > nums2[n] ? nums1[m--] : nums2[n--];\n    }\n    while (n >= 0) {\n        nums1[pos--] = nums2[n--];\n    }\n}\n"})})}),(0,o.jsx)(r,{value:"py",label:"Python",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-py",children:"def merge(nums1: List[int], m: int, nums2: List[int], n: int) -> None:\n    pos = m + n - 1\n    m -= 1\n    n -= 1\n    while m >= 0 and n >= 0:\n        if nums1[m] > nums2[n]:\n            nums1[pos] = nums1[m]\n            m -= 1\n        else:\n            nums1[pos] = nums2[n]\n            n -= 1\n        pos -= 1\n    nums1[: n + 1] = nums2[: n + 1]\n"})})})]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}function u(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);