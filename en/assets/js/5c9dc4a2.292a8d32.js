"use strict";(self.webpackChunkleetcode_101=self.webpackChunkleetcode_101||[]).push([[2972],{7386:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>a,toc:()=>h});const a=JSON.parse('{"id":"graphs/14-3-topological-sorting","title":"14.3 Topological Sort","description":"Topological Sort is a common algorithm used to order nodes in a directed acyclic graph (DAG). Given $N$ nodes in a DAG, the goal is to arrange them in a linear sequence such that if node $i$ points to node $j$, then $i$ appears before $j$ in the sequence. The result of a topological sort is not unique as long as the above condition is satisfied.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/14-graphs/14-3-topological-sorting.mdx","sourceDirName":"14-graphs","slug":"/graphs/14-3-topological-sorting","permalink":"/leetcode_101/en/graphs/14-3-topological-sorting","draft":false,"unlisted":false,"editUrl":"https://github.com/noworneverev/leetcode_101/tree/master/leetcode_101/docs/14-graphs/14-3-topological-sorting.mdx","tags":[],"version":"current","sidebarPosition":77,"frontMatter":{"sidebar_position":77},"sidebar":"tutorialSidebar","previous":{"title":"14.2 Bipartite Graph","permalink":"/leetcode_101/en/graphs/14-2-bipartite-graph"},"next":{"title":"14.4 Exercises","permalink":"/leetcode_101/en/graphs/14-4-exercises"}}');var i=n(4848),t=n(8453);const r={sidebar_position:77},l="14.3 Topological Sort",c={},h=[{value:"210. Course Schedule II",id:"210-course-schedule-ii",level:2},{value:"Problem Description",id:"problem-description",level:3},{value:"Input and Output Example",id:"input-and-output-example",level:3},{value:"Solution Explanation",id:"solution-explanation",level:3}];function o(e){const s={a:"a",annotation:"annotation",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",math:"math",mi:"mi",mn:"mn",mrow:"mrow",ol:"ol",p:"p",pre:"pre",semantics:"semantics",span:"span",ul:"ul",...(0,t.R)(),...e.components},{TabItem:n,Tabs:a}=s;return n||m("TabItem",!0),a||m("Tabs",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"143-topological-sort",children:"14.3 Topological Sort"})}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"Topological Sort"})," is a common algorithm used to order nodes in a directed acyclic graph (DAG). Given ",(0,i.jsxs)(s.span,{className:"katex",children:[(0,i.jsx)(s.span,{className:"katex-mathml",children:(0,i.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(s.semantics,{children:[(0,i.jsx)(s.mrow,{children:(0,i.jsx)(s.mi,{children:"N"})}),(0,i.jsx)(s.annotation,{encoding:"application/x-tex",children:"N"})]})})}),(0,i.jsx)(s.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(s.span,{className:"base",children:[(0,i.jsx)(s.span,{className:"strut",style:{height:"0.6833em"}}),(0,i.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.10903em"},children:"N"})]})})]})," nodes in a DAG, the goal is to arrange them in a linear sequence such that if node ",(0,i.jsxs)(s.span,{className:"katex",children:[(0,i.jsx)(s.span,{className:"katex-mathml",children:(0,i.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(s.semantics,{children:[(0,i.jsx)(s.mrow,{children:(0,i.jsx)(s.mi,{children:"i"})}),(0,i.jsx)(s.annotation,{encoding:"application/x-tex",children:"i"})]})})}),(0,i.jsx)(s.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(s.span,{className:"base",children:[(0,i.jsx)(s.span,{className:"strut",style:{height:"0.6595em"}}),(0,i.jsx)(s.span,{className:"mord mathnormal",children:"i"})]})})]})," points to node ",(0,i.jsxs)(s.span,{className:"katex",children:[(0,i.jsx)(s.span,{className:"katex-mathml",children:(0,i.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(s.semantics,{children:[(0,i.jsx)(s.mrow,{children:(0,i.jsx)(s.mi,{children:"j"})}),(0,i.jsx)(s.annotation,{encoding:"application/x-tex",children:"j"})]})})}),(0,i.jsx)(s.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(s.span,{className:"base",children:[(0,i.jsx)(s.span,{className:"strut",style:{height:"0.854em",verticalAlign:"-0.1944em"}}),(0,i.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.05724em"},children:"j"})]})})]}),", then ",(0,i.jsxs)(s.span,{className:"katex",children:[(0,i.jsx)(s.span,{className:"katex-mathml",children:(0,i.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(s.semantics,{children:[(0,i.jsx)(s.mrow,{children:(0,i.jsx)(s.mi,{children:"i"})}),(0,i.jsx)(s.annotation,{encoding:"application/x-tex",children:"i"})]})})}),(0,i.jsx)(s.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(s.span,{className:"base",children:[(0,i.jsx)(s.span,{className:"strut",style:{height:"0.6595em"}}),(0,i.jsx)(s.span,{className:"mord mathnormal",children:"i"})]})})]})," appears before ",(0,i.jsxs)(s.span,{className:"katex",children:[(0,i.jsx)(s.span,{className:"katex-mathml",children:(0,i.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(s.semantics,{children:[(0,i.jsx)(s.mrow,{children:(0,i.jsx)(s.mi,{children:"j"})}),(0,i.jsx)(s.annotation,{encoding:"application/x-tex",children:"j"})]})})}),(0,i.jsx)(s.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(s.span,{className:"base",children:[(0,i.jsx)(s.span,{className:"strut",style:{height:"0.854em",verticalAlign:"-0.1944em"}}),(0,i.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.05724em"},children:"j"})]})})]})," in the sequence. The result of a topological sort is not unique as long as the above condition is satisfied."]}),"\n",(0,i.jsx)(s.h2,{id:"210-course-schedule-ii",children:(0,i.jsx)(s.a,{href:"https://leetcode.com/problems/course-schedule-ii/",children:"210. Course Schedule II"})}),"\n",(0,i.jsx)(s.h3,{id:"problem-description",children:"Problem Description"}),"\n",(0,i.jsxs)(s.p,{children:["Given ",(0,i.jsxs)(s.span,{className:"katex",children:[(0,i.jsx)(s.span,{className:"katex-mathml",children:(0,i.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(s.semantics,{children:[(0,i.jsx)(s.mrow,{children:(0,i.jsx)(s.mi,{children:"N"})}),(0,i.jsx)(s.annotation,{encoding:"application/x-tex",children:"N"})]})})}),(0,i.jsx)(s.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(s.span,{className:"base",children:[(0,i.jsx)(s.span,{className:"strut",style:{height:"0.6833em"}}),(0,i.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.10903em"},children:"N"})]})})]})," courses and their prerequisites, determine an order in which all the courses can be completed."]}),"\n",(0,i.jsx)(s.h3,{id:"input-and-output-example",children:"Input and Output Example"}),"\n",(0,i.jsxs)(s.p,{children:["The input consists of a positive integer representing the number of courses and a 2D array representing directed edges (e.g., ",(0,i.jsx)(s.code,{children:"[1,0]"})," indicates course 1 must be taken after course 0). The output is a 1D array representing a topological order."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:"Input: numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]]\nOutput: [0,1,2,3]\n"})}),"\n",(0,i.jsxs)(s.p,{children:["In this example, another valid order could be ",(0,i.jsx)(s.code,{children:"[0,2,1,3]"}),"."]}),"\n",(0,i.jsx)(s.h3,{id:"solution-explanation",children:"Solution Explanation"}),"\n",(0,i.jsxs)(s.p,{children:["e can first build an adjacency matrix to represent the graph, facilitating direct lookups. Note that we reverse all edges, so if course ",(0,i.jsxs)(s.span,{className:"katex",children:[(0,i.jsx)(s.span,{className:"katex-mathml",children:(0,i.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(s.semantics,{children:[(0,i.jsx)(s.mrow,{children:(0,i.jsx)(s.mi,{children:"i"})}),(0,i.jsx)(s.annotation,{encoding:"application/x-tex",children:"i"})]})})}),(0,i.jsx)(s.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(s.span,{className:"base",children:[(0,i.jsx)(s.span,{className:"strut",style:{height:"0.6595em"}}),(0,i.jsx)(s.span,{className:"mord mathnormal",children:"i"})]})})]})," points to course ",(0,i.jsxs)(s.span,{className:"katex",children:[(0,i.jsx)(s.span,{className:"katex-mathml",children:(0,i.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(s.semantics,{children:[(0,i.jsx)(s.mrow,{children:(0,i.jsx)(s.mi,{children:"j"})}),(0,i.jsx)(s.annotation,{encoding:"application/x-tex",children:"j"})]})})}),(0,i.jsx)(s.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(s.span,{className:"base",children:[(0,i.jsx)(s.span,{className:"strut",style:{height:"0.854em",verticalAlign:"-0.1944em"}}),(0,i.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.05724em"},children:"j"})]})})]}),", it means course ",(0,i.jsxs)(s.span,{className:"katex",children:[(0,i.jsx)(s.span,{className:"katex-mathml",children:(0,i.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(s.semantics,{children:[(0,i.jsx)(s.mrow,{children:(0,i.jsx)(s.mi,{children:"i"})}),(0,i.jsx)(s.annotation,{encoding:"application/x-tex",children:"i"})]})})}),(0,i.jsx)(s.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(s.span,{className:"base",children:[(0,i.jsx)(s.span,{className:"strut",style:{height:"0.6595em"}}),(0,i.jsx)(s.span,{className:"mord mathnormal",children:"i"})]})})]})," must be completed before course ",(0,i.jsxs)(s.span,{className:"katex",children:[(0,i.jsx)(s.span,{className:"katex-mathml",children:(0,i.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(s.semantics,{children:[(0,i.jsx)(s.mrow,{children:(0,i.jsx)(s.mi,{children:"j"})}),(0,i.jsx)(s.annotation,{encoding:"application/x-tex",children:"j"})]})})}),(0,i.jsx)(s.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(s.span,{className:"base",children:[(0,i.jsx)(s.span,{className:"strut",style:{height:"0.854em",verticalAlign:"-0.1944em"}}),(0,i.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.05724em"},children:"j"})]})})]}),". This aligns with our intuitive understanding of prerequisites."]}),"\n",(0,i.jsx)(s.p,{children:"Topological sorting can be viewed as a special case of breadth-first search (BFS):"}),"\n",(0,i.jsxs)(s.ol,{children:["\n",(0,i.jsxs)(s.li,{children:["Traverse all nodes and enqueue nodes with an in-degree of ",(0,i.jsxs)(s.span,{className:"katex",children:[(0,i.jsx)(s.span,{className:"katex-mathml",children:(0,i.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(s.semantics,{children:[(0,i.jsx)(s.mrow,{children:(0,i.jsx)(s.mn,{children:"0"})}),(0,i.jsx)(s.annotation,{encoding:"application/x-tex",children:"0"})]})})}),(0,i.jsx)(s.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(s.span,{className:"base",children:[(0,i.jsx)(s.span,{className:"strut",style:{height:"0.6444em"}}),(0,i.jsx)(s.span,{className:"mord",children:"0"})]})})]})," (i.e., nodes without prerequisites)."]}),"\n",(0,i.jsxs)(s.li,{children:["While processing the queue:","\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Add the current node to the sorted order."}),"\n",(0,i.jsxs)(s.li,{children:["Decrease the in-degree of all nodes it points to by ",(0,i.jsxs)(s.span,{className:"katex",children:[(0,i.jsx)(s.span,{className:"katex-mathml",children:(0,i.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(s.semantics,{children:[(0,i.jsx)(s.mrow,{children:(0,i.jsx)(s.mn,{children:"1"})}),(0,i.jsx)(s.annotation,{encoding:"application/x-tex",children:"1"})]})})}),(0,i.jsx)(s.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(s.span,{className:"base",children:[(0,i.jsx)(s.span,{className:"strut",style:{height:"0.6444em"}}),(0,i.jsx)(s.span,{className:"mord",children:"1"})]})})]}),"."]}),"\n",(0,i.jsxs)(s.li,{children:["If a node\u2019s in-degree becomes ",(0,i.jsxs)(s.span,{className:"katex",children:[(0,i.jsx)(s.span,{className:"katex-mathml",children:(0,i.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(s.semantics,{children:[(0,i.jsx)(s.mrow,{children:(0,i.jsx)(s.mn,{children:"0"})}),(0,i.jsx)(s.annotation,{encoding:"application/x-tex",children:"0"})]})})}),(0,i.jsx)(s.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(s.span,{className:"base",children:[(0,i.jsx)(s.span,{className:"strut",style:{height:"0.6444em"}}),(0,i.jsx)(s.span,{className:"mord",children:"0"})]})})]}),", enqueue it."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(s.li,{children:"When the queue is empty, the nodes are either fully sorted, or a cycle exists in the graph, preventing all courses from being completed."}),"\n"]}),"\n",(0,i.jsxs)(a,{children:[(0,i.jsx)(n,{value:"cpp",label:"C++",children:(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-cpp",children:"vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites) {\n    vector<vector<int>> graph(numCourses, vector<int>());\n    vector<int> indegree(numCourses, 0), schedule;\n    for (const auto& pr : prerequisites) {\n        graph[pr[1]].push_back(pr[0]);\n        ++indegree[pr[0]];\n    }\n    queue<int> q;\n    for (int i = 0; i < indegree.size(); ++i) {\n        if (indegree[i] == 0) {\n            q.push(i);\n        }\n    }\n    while (!q.empty()) {\n        int u = q.front();\n        q.pop();\n        schedule.push_back(u);\n        for (int v : graph[u]) {\n            --indegree[v];\n            if (indegree[v] == 0) {\n                q.push(v);\n            }\n        }\n    }\n    for (int i = 0; i < indegree.size(); ++i) {\n        if (indegree[i] != 0) {\n            return vector<int>();\n        }\n    }\n    return schedule;\n}\n"})})}),(0,i.jsx)(n,{value:"py",label:"Python",children:(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-py",children:"def findOrder(numCourses: int, prerequisites: List[List[int]]) -> List[int]:\n    graph = [[] for _ in range(numCourses)]\n    indegree = [0] * numCourses\n    schedule = []\n\n    for pr_from, pr_to in prerequisites:\n        graph[pr_to].append(pr_from)\n        indegree[pr_from] += 1\n\n    q = collections.deque([i for i, deg in enumerate(indegree) if deg == 0])\n\n    while len(q) > 0:\n        u = q.popleft()\n        schedule.append(u)\n        for v in graph[u]:\n            indegree[v] -= 1\n            if indegree[v] == 0:\n                q.append(v)\n\n    return schedule if all(deg == 0 for deg in indegree) else []\n"})})})]})]})}function d(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}function m(e,s){throw new Error("Expected "+(s?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);