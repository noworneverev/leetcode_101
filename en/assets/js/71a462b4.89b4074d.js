"use strict";(self.webpackChunkleetcode_101=self.webpackChunkleetcode_101||[]).push([[9610],{3975:(n,i,e)=>{e.r(i),e.d(i,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>t,toc:()=>u});const t=JSON.parse('{"id":"string-manipulation/11-3-string-interpretation","title":"11.3 String Parsing","description":"227. Basic Calculator II","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/11-string-manipulation/11-3-string-interpretation.mdx","sourceDirName":"11-string-manipulation","slug":"/string-manipulation/11-3-string-interpretation","permalink":"/leetcode_101/en/string-manipulation/11-3-string-interpretation","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":61,"frontMatter":{"sidebar_position":61},"sidebar":"tutorialSidebar","previous":{"title":"11.2 String Comparison","permalink":"/leetcode_101/en/string-manipulation/11-2-string-comparison"},"next":{"title":"11.4 String Matching","permalink":"/leetcode_101/en/string-manipulation/11-4-string-matching"}}');var a=e(4848),r=e(8453);const s={sidebar_position:61},o="11.3 String Parsing",l={},u=[{value:"227. Basic Calculator II",id:"227-basic-calculator-ii",level:2},{value:"Problem Description",id:"problem-description",level:3},{value:"Input and Output Example",id:"input-and-output-example",level:3},{value:"Solution Explanation",id:"solution-explanation",level:3}];function c(n){const i={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,r.R)(),...n.components},{TabItem:e,Tabs:t}=i;return e||d("TabItem",!0),t||d("Tabs",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(i.header,{children:(0,a.jsx)(i.h1,{id:"113-string-parsing",children:"11.3 String Parsing"})}),"\n",(0,a.jsx)(i.h2,{id:"227-basic-calculator-ii",children:(0,a.jsx)(i.a,{href:"https://leetcode.com/problems/basic-calculator-ii/",children:"227. Basic Calculator II"})}),"\n",(0,a.jsx)(i.h3,{id:"problem-description",children:"Problem Description"}),"\n",(0,a.jsx)(i.p,{children:"Given a string containing addition, subtraction, multiplication, and division of integers, calculate the result. Division truncates towards zero."}),"\n",(0,a.jsx)(i.h3,{id:"input-and-output-example",children:"Input and Output Example"}),"\n",(0,a.jsx)(i.p,{children:"Input is a valid arithmetic string, and output is an integer representing the result."}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{children:'Input: " 3+5 / 2 "\nOutput: 5\n'})}),"\n",(0,a.jsx)(i.p,{children:"In this example, since division has a higher priority than addition, the result is 5 rather than 4."}),"\n",(0,a.jsx)(i.h3,{id:"solution-explanation",children:"Solution Explanation"}),"\n",(0,a.jsxs)(i.p,{children:["If we prepend a ",(0,a.jsx)(i.code,{children:"+"})," sign to the left of the string, it doesn't change the result, and the string can be divided into multiple pairs of ",(0,a.jsx)(i.code,{children:"<operator, number>"}),". This allows us to process the string from left to right. Since multiplication and division have higher precedence than addition and subtraction, we need an intermediate variable to store results of high-priority operations."]}),"\n",(0,a.jsx)(i.p,{children:"This type of problem also tests edge cases, such as strings without operators or with multiple spaces."}),"\n",(0,a.jsxs)(t,{children:[(0,a.jsx)(e,{value:"cpp",label:"C++",children:(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-cpp",children:"// Helper function to parse a number starting from position i.\nint parseNum(const string& s, int& i) {\n    int num = 0, n = s.length();\n    while (i < n && isdigit(s[i])) {\n        num = 10 * num + (s[i++] - '0');\n    }\n    return num;\n}\n\n// Main function\nint calculate(string s) {\n    char op = '+';\n    long global_num = 0, local_num = 0;\n    int i = -1, n = s.length();\n    while (++i < n) {\n        if (s[i] == ' ') {\n            continue;\n        }\n        long num = parseNum(s, i);\n        switch (op) {\n            case '+':\n                global_num += local_num;\n                local_num = num;\n                break;\n            case '-':\n                global_num += local_num;\n                local_num = -num;\n                break;\n            case '*':\n                local_num *= num;\n                break;\n            case '/':\n                local_num /= num;\n                break;\n        }\n        if (i < n) {\n            op = s[i];\n        }\n    }\n    return global_num + local_num;\n}\n\n"})})}),(0,a.jsx)(e,{value:"py",label:"Python",children:(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-py",children:'from typing import Tuple\n\n# Helper function to parse a number starting from position i.\n# Returns (number, next position i)\ndef parseNum(s: str, i: int) -> Tuple[int, int]:\n    num, n = 0, len(s)\n    while i < n and s[i].isdigit():\n        num = 10 * num + int(s[i])\n        i += 1\n    return (num, i)\n\n# Main function\ndef calculate(s: str) -> int:\n    op = "+"\n    global_num, local_num = 0, 0\n    i, n = 0, len(s)\n    \n    while i < n:\n        if s[i] == " ":\n            i += 1\n            continue\n        \n        num, i = parseNum(s, i)\n        \n        match op:\n            case "+":\n                global_num += local_num\n                local_num = num\n            case "-":\n                global_num += local_num\n                local_num = -num\n            case "*":\n                local_num *= num\n            case "/":\n                # int() performs truncation towards zero, unlike // for negatives.\n                local_num = int(local_num / num)\n        \n        if i < n:\n            op = s[i]\n            i += 1\n\n    return global_num + local_num\n\n'})})})]})]})}function p(n={}){const{wrapper:i}={...(0,r.R)(),...n.components};return i?(0,a.jsx)(i,{...n,children:(0,a.jsx)(c,{...n})}):c(n)}function d(n,i){throw new Error("Expected "+(i?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);