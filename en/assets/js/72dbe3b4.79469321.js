"use strict";(self.webpackChunkleetcode_101=self.webpackChunkleetcode_101||[]).push([[6952],{2881:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>c,default:()=>d,frontMatter:()=>a,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"data-structures/10-9-multisets-and-maps","title":"10.9 Multisets and Mappings","description":"332. Reconstruct Itinerary","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/10-data-structures/10-9-multisets-and-maps.mdx","sourceDirName":"10-data-structures","slug":"/data-structures/10-9-multisets-and-maps","permalink":"/leetcode_101/en/data-structures/10-9-multisets-and-maps","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":56,"frontMatter":{"sidebar_position":56},"sidebar":"tutorialSidebar","previous":{"title":"10.8 Hash Table","permalink":"/leetcode_101/en/data-structures/10-8-hash-table"},"next":{"title":"10.10 Prefix Sum and Integral Image","permalink":"/leetcode_101/en/data-structures/10-10-prefix-sum-integral-image"}}');var i=n(4848),s=n(8453);const a={sidebar_position:56},c="10.9 Multisets and Mappings",o={},l=[{value:"332. Reconstruct Itinerary",id:"332-reconstruct-itinerary",level:2},{value:"Problem Description",id:"problem-description",level:3},{value:"Input and Output Example",id:"input-and-output-example",level:3},{value:"Solution Explanation",id:"solution-explanation",level:3}];function p(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components},{TabItem:n,Tabs:r}=t;return n||u("TabItem",!0),r||u("Tabs",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"109-multisets-and-mappings",children:"10.9 Multisets and Mappings"})}),"\n",(0,i.jsx)(t.h2,{id:"332-reconstruct-itinerary",children:(0,i.jsx)(t.a,{href:"https://leetcode.com/problems/reconstruct-itinerary/",children:"332. Reconstruct Itinerary"})}),"\n",(0,i.jsx)(t.h3,{id:"problem-description",children:"Problem Description"}),"\n",(0,i.jsx)(t.p,{children:"Given a person's flight records with departure and arrival airports, starting from JFK, determine the flight order. If there are multiple possibilities, return the lexicographically smallest sequence."}),"\n",(0,i.jsx)(t.h3,{id:"input-and-output-example",children:"Input and Output Example"}),"\n",(0,i.jsx)(t.p,{children:"Input is a 2D string array representing pairs of departure and arrival airports; output is a 1D string array representing the flight order."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:'Input: [["MUC", "LHR"], ["JFK", "MUC"], ["SFO", "SJC"], ["LHR", "SFO"]]\nOutput: ["JFK", "MUC", "LHR", "SFO", "SJC"]\n'})}),"\n",(0,i.jsx)(t.h3,{id:"solution-explanation",children:"Solution Explanation"}),"\n",(0,i.jsx)(t.p,{children:"We can first use a hash table to store the departure and arrival airports, where the key is the departure airport, and the value is a multiset (ordered set) representing the corresponding arrival airports. Since a person may take the same route multiple times, we need to use a multiset to store duplicate values. After storing, we can use a stack/DFS to reconstruct the flight order from the endpoint to the starting point, and then reverse the result to get the order from the start to the endpoint."}),"\n",(0,i.jsxs)(t.p,{children:["Since Python doesn't have a built-in multiset implementation, we can store an array and sort it. Alternatively, we can use the ",(0,i.jsx)(t.code,{children:"Counter"})," structure, selecting the smallest key each time we search for the next airport."]}),"\n",(0,i.jsxs)(r,{children:[(0,i.jsx)(n,{value:"cpp",label:"C++",children:(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:'vector<string> findItinerary(vector<vector<string>>& tickets) {\n    vector<string> itinerary;\n    unordered_map<string, multiset<string>> cache;\n    for (const auto& ticket : tickets) {\n        cache[ticket[0]].insert(ticket[1]);\n    }\n    stack<string> s;\n    s.push("JFK");\n    while (!s.empty()) {\n        string t = s.top();\n        if (cache[t].empty()) {\n            itinerary.push_back(t);\n            s.pop();\n        } else {\n            s.push(*cache[t].begin());\n            cache[t].erase(cache[t].begin());\n        }\n    }\n    reverse(itinerary.begin(), itinerary.end());\n    return itinerary;\n}\n'})})}),(0,i.jsx)(n,{value:"py",label:"Python",children:(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-py",children:'def findItinerary(tickets: List[List[str]]) -> List[str]:\n    itinerary = []\n    cache = dict()\n    \n    for ticket in tickets:\n        if ticket[0] not in cache:\n            cache[ticket[0]] = []\n        cache[ticket[0]].append(ticket[1])\n    \n    for ticket in cache.keys():\n        cache[ticket].sort(reverse=True)\n    \n    s = ["JFK"]\n    while len(s) > 0:\n        t = s[-1]\n        if t not in cache or len(cache[t]) == 0:\n            itinerary.append(t)\n            s.pop()\n        else:\n            t_next = cache[t].pop()\n            s.append(t_next)\n    \n    return list(reversed(itinerary))\n\n'})})})]})]})}function d(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}function u(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);