"use strict";(self.webpackChunkleetcode_101=self.webpackChunkleetcode_101||[]).push([[6910],{8765:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"mathematical-solutions/8-4-number-processing","title":"8.4 Numerical Processing","description":"504. Base 7","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/8-mathematical-solutions/8-4-number-processing.mdx","sourceDirName":"8-mathematical-solutions","slug":"/mathematical-solutions/8-4-number-processing","permalink":"/leetcode_101/en/mathematical-solutions/8-4-number-processing","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":41,"frontMatter":{"sidebar_position":41},"sidebar":"tutorialSidebar","previous":{"title":"8.3 Prime Numbers","permalink":"/leetcode_101/en/mathematical-solutions/8-3-prime-numbers"},"next":{"title":"8.5 Random and Sampling","permalink":"/leetcode_101/en/mathematical-solutions/8-5-random-sampling"}}');var s=i(4848),r=i(8453);const a={sidebar_position:41},l="8.4 Numerical Processing",o={},d=[{value:"504. Base 7",id:"504-base-7",level:2},{value:"Problem Description",id:"problem-description",level:3},{value:"Input and Output Example",id:"input-and-output-example",level:3},{value:"Solution Explanation",id:"solution-explanation",level:3},{value:"172. Factorial Trailing Zeroes",id:"172-factorial-trailing-zeroes",level:2},{value:"Problem Description",id:"problem-description-1",level:3},{value:"Input and Output Example",id:"input-and-output-example-1",level:3},{value:"Solution Explanation",id:"solution-explanation-1",level:3},{value:"415. Add Strings",id:"415-add-strings",level:2},{value:"Problem Description",id:"problem-description-2",level:3},{value:"Input and Output Example",id:"input-and-output-example-2",level:3},{value:"Solution Explanation",id:"solution-explanation-2",level:3},{value:"326. Power of Three",id:"326-power-of-three",level:2},{value:"Problem Description",id:"problem-description-3",level:3},{value:"Input and Output Example",id:"input-and-output-example-3",level:3},{value:"Solution Explanation",id:"solution-explanation-3",level:3},{value:"50. Pow(x, n)",id:"50-powx-n",level:2},{value:"Problem Description",id:"problem-description-4",level:3},{value:"Input and Output Example",id:"input-and-output-example-4",level:3},{value:"Solution Explanation",id:"solution-explanation-4",level:3}];function c(e){const n={a:"a",annotation:"annotation",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",math:"math",mn:"mn",mo:"mo",mrow:"mrow",msup:"msup",p:"p",pre:"pre",semantics:"semantics",span:"span",...(0,r.R)(),...e.components},{TabItem:i,Tabs:t}=n;return i||p("TabItem",!0),t||p("Tabs",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"84-numerical-processing",children:"8.4 Numerical Processing"})}),"\n",(0,s.jsx)(n.h2,{id:"504-base-7",children:(0,s.jsx)(n.a,{href:"https://leetcode.com/problems/base-7/",children:"504. Base 7"})}),"\n",(0,s.jsx)(n.h3,{id:"problem-description",children:"Problem Description"}),"\n",(0,s.jsx)(n.p,{children:"Given a decimal integer, convert it to its base-7 representation."}),"\n",(0,s.jsx)(n.h3,{id:"input-and-output-example",children:"Input and Output Example"}),"\n",(0,s.jsx)(n.p,{children:"Input a decimal integer and output a string representing its base-7 format."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'Input: 100\nOutput: "202"\n'})}),"\n",(0,s.jsx)(n.p,{children:"In this example, 100 in base-7 comes from 100 = 2 * 49 + 0 * 7 + 2 * 1."}),"\n",(0,s.jsx)(n.h3,{id:"solution-explanation",children:"Solution Explanation"}),"\n",(0,s.jsxs)(n.p,{children:["For ",(0,s.jsx)(n.code,{children:"base conversion"})," problems, division and modulus (mod) are typically used for calculations. Special attention is needed for edge cases such as negative numbers and zero. If the output is expected as a numeric type rather than a string, consider whether it might exceed integer bounds."]}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)(i,{value:"cpp",label:"C++",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'string convertToBase7(int num) {\n    if (num == 0) {\n        return "0";\n    }\n    string base7;\n    bool is_negative = num < 0;\n    num = abs(num);\n    while (num) {\n        int quotient = num / 7, remainder = num % 7;\n        base7 = to_string(remainder) + base7;\n        num = quotient;\n    }\n    return is_negative ? "-" + base7 : base7;\n}\n'})})}),(0,s.jsx)(i,{value:"py",label:"Python",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:'def convertToBase7(num: int) -> str:\n    if num == 0:\n        return "0"\n    base7 = ""\n    is_negative = num < 0\n    num = abs(num)\n    while num:\n        quotient, remainder = num // 7, num % 7\n        base7 = str(remainder) + base7\n        num = quotient\n    return "-" + base7 if is_negative else base7\n'})})})]}),"\n",(0,s.jsx)(n.h2,{id:"172-factorial-trailing-zeroes",children:(0,s.jsx)(n.a,{href:"https://leetcode.com/problems/factorial-trailing-zeroes/",children:"172. Factorial Trailing Zeroes"})}),"\n",(0,s.jsx)(n.h3,{id:"problem-description-1",children:"Problem Description"}),"\n",(0,s.jsx)(n.p,{children:"Given a non-negative integer, determine how many trailing zeroes are in its factorial result."}),"\n",(0,s.jsx)(n.h3,{id:"input-and-output-example-1",children:"Input and Output Example"}),"\n",(0,s.jsx)(n.p,{children:"Input a non-negative integer and output a non-negative integer representing the number of trailing zeroes in the factorial result."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Input: 12\nOutput: 2\n"})}),"\n",(0,s.jsx)(n.p,{children:"In this example, 12! = 479001600 has two trailing zeroes."}),"\n",(0,s.jsx)(n.h3,{id:"solution-explanation-1",children:"Solution Explanation"}),"\n",(0,s.jsx)(n.p,{children:"Each trailing 0 is produced by a factor of 2 \xd7 5 = 10. Therefore, we can decompose each element in the factorial into its prime factors and count how many 2s and 5s there are. It is evident that the number of factor 2s is far greater than the number of factor 5s, so we only need to count the number of factor 5s in the factorial result."}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)(i,{value:"cpp",label:"C++",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"int trailingZeroes(int n) { \n    return n == 0 ? 0 : n / 5 + trailingZeroes(n / 5); \n}\n"})})}),(0,s.jsx)(i,{value:"py",label:"Python",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"def trailingZeroes(n: int) -> int:\n    return 0 if n == 0 else n // 5 + trailingZeroes(n // 5)\n"})})})]}),"\n",(0,s.jsx)(n.h2,{id:"415-add-strings",children:(0,s.jsx)(n.a,{href:"https://leetcode.com/problems/add-strings/",children:"415. Add Strings"})}),"\n",(0,s.jsx)(n.h3,{id:"problem-description-2",children:"Problem Description"}),"\n",(0,s.jsx)(n.p,{children:"Given two strings composed of digits, find their sum as a result."}),"\n",(0,s.jsx)(n.h3,{id:"input-and-output-example-2",children:"Input and Output Example"}),"\n",(0,s.jsx)(n.p,{children:"Input consists of two strings, and output is an integer representing the sum of the input numbers."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'Input: num1 = "99", num2 = "1"\nOutput: 100\n'})}),"\n",(0,s.jsx)(n.p,{children:"Since addition proceeds from right to left, the strings can be reversed first, then calculated digit by digit. This type of problem tests attention to details, such as carrying and handling different string lengths."}),"\n",(0,s.jsx)(n.h3,{id:"solution-explanation-2",children:"Solution Explanation"}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)(i,{value:"cpp",label:"C++",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'string addStrings(string num1, string num2) {\n    string added_str;\n    reverse(num1.begin(), num1.end());\n    reverse(num2.begin(), num2.end());\n    int len1 = num1.length(), len2 = num2.length();\n    if (len1 <= len2) {\n        swap(num1, num2);\n        swap(len1, len2);\n    }\n    int add_bit = 0;\n    for (int i = 0; i < len1; ++i) {\n        int cur_sum =\n            (num1[i] - \u20190\u2019) + (i < len2 ? num2[i] - \u20190\u2019 : 0) + add_bit;\n        added_str += to_string(cur_sum % 10);\n        add_bit = cur_sum >= 10;\n    }\n    if (add_bit) {\n        added_str += "1";\n    }\n    reverse(added_str.begin(), added_str.end());\n    return added_str;\n}\n'})})}),(0,s.jsx)(i,{value:"py",label:"Python",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:'def addStrings(num1: str, num2: str) -> str:\n    added_str = ""\n    num1 = num1[::-1]\n    num2 = num2[::-1]\n    len1, len2 = len(num1), len(num2)\n    if len1 <= len2:\n        num1, num2 = num2, num1\n        len1, len2 = len2, len1\n    add_bit = 0\n    for i in range(len1):\n        cur_sum = int(num1[i]) + (int(num2[i]) if i < len2 else 0) + add_bit\n        added_str += str(cur_sum % 10)\n        add_bit = int(cur_sum >= 10)\n    if add_bit:\n        added_str += "1"\n    return added_str[::-1]\n'})})})]}),"\n",(0,s.jsx)(n.h2,{id:"326-power-of-three",children:(0,s.jsx)(n.a,{href:"https://leetcode.com/problems/power-of-three/",children:"326. Power of Three"})}),"\n",(0,s.jsx)(n.h3,{id:"problem-description-3",children:"Problem Description"}),"\n",(0,s.jsx)(n.p,{children:"Determine whether a number is a power of 3."}),"\n",(0,s.jsx)(n.h3,{id:"input-and-output-example-3",children:"Input and Output Example"}),"\n",(0,s.jsx)(n.p,{children:"Input an integer, output a boolean value."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Input: n = 27\nOutput: true\n"})}),"\n",(0,s.jsx)(n.h3,{id:"solution-explanation-3",children:"Solution Explanation"}),"\n",(0,s.jsx)(n.p,{children:"There are two methods. One is using logarithms. Let log3 n = m, if n is an integer power of 3, then m must be an integer."}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)(i,{value:"cpp",label:"C++",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"bool isPowerOfThree(int n) {\n    return fmod(log10(n) / log10(3), 1) == 0;\n}\n"})})}),(0,s.jsx)(i,{value:"py",label:"Python",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"def isPowerOfThree(n: int) -> bool:\n    return n > 0 and math.fmod(math.log10(n) / math.log10(3), 1) == 0\n"})})})]}),"\n",(0,s.jsxs)(n.p,{children:["Another method is that, within the range of a C++ ",(0,s.jsx)(n.code,{children:"int"}),", the maximum power of 3 is ",(0,s.jsxs)(n.span,{className:"katex",children:[(0,s.jsx)(n.span,{className:"katex-mathml",children:(0,s.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,s.jsxs)(n.semantics,{children:[(0,s.jsxs)(n.mrow,{children:[(0,s.jsxs)(n.msup,{children:[(0,s.jsx)(n.mn,{children:"3"}),(0,s.jsx)(n.mn,{children:"19"})]}),(0,s.jsx)(n.mo,{children:"="}),(0,s.jsx)(n.mn,{children:"1162261467"})]}),(0,s.jsx)(n.annotation,{encoding:"application/x-tex",children:"3^{19} = 1162261467"})]})})}),(0,s.jsxs)(n.span,{className:"katex-html","aria-hidden":"true",children:[(0,s.jsxs)(n.span,{className:"base",children:[(0,s.jsx)(n.span,{className:"strut",style:{height:"0.8141em"}}),(0,s.jsxs)(n.span,{className:"mord",children:[(0,s.jsx)(n.span,{className:"mord",children:"3"}),(0,s.jsx)(n.span,{className:"msupsub",children:(0,s.jsx)(n.span,{className:"vlist-t",children:(0,s.jsx)(n.span,{className:"vlist-r",children:(0,s.jsx)(n.span,{className:"vlist",style:{height:"0.8141em"},children:(0,s.jsxs)(n.span,{style:{top:"-3.063em",marginRight:"0.05em"},children:[(0,s.jsx)(n.span,{className:"pstrut",style:{height:"2.7em"}}),(0,s.jsx)(n.span,{className:"sizing reset-size6 size3 mtight",children:(0,s.jsx)(n.span,{className:"mord mtight",children:(0,s.jsx)(n.span,{className:"mord mtight",children:"19"})})})]})})})})})]}),(0,s.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,s.jsx)(n.span,{className:"mrel",children:"="}),(0,s.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,s.jsxs)(n.span,{className:"base",children:[(0,s.jsx)(n.span,{className:"strut",style:{height:"0.6444em"}}),(0,s.jsx)(n.span,{className:"mord",children:"1162261467"})]})]})]}),". If ",(0,s.jsx)(n.code,{children:"n"})," is an integer power of 3, then ",(0,s.jsx)(n.code,{children:"1162261467 % n"})," must equal zero; otherwise, it is not. However, in Python, since ",(0,s.jsx)(n.code,{children:"int"})," can theoretically represent arbitrarily large numbers, we can only use a loop to verify."]}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)(i,{value:"cpp",label:"C++",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"bool isPowerOfThree(int n) {\n    return n > 0 && 1162261467 % n == 0;\n}\n"})})}),(0,s.jsx)(i,{value:"py",label:"Python",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"def isPowerOfThree(n: int) -> bool:\n    if n <= 0:\n        return False\n    while n % 3 == 0:\n        n //= 3\n    return n == 1\n"})})})]}),"\n",(0,s.jsx)(n.h2,{id:"50-powx-n",children:(0,s.jsx)(n.a,{href:"https://leetcode.com/problems/powx-n/",children:"50. Pow(x, n)"})}),"\n",(0,s.jsx)(n.h3,{id:"problem-description-4",children:"Problem Description"}),"\n",(0,s.jsxs)(n.p,{children:["Compute ",(0,s.jsx)(n.code,{children:"x"})," raised to the power ",(0,s.jsx)(n.code,{children:"n"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"input-and-output-example-4",children:"Input and Output Example"}),"\n",(0,s.jsxs)(n.p,{children:["Input a floating-point number ",(0,s.jsx)(n.code,{children:"x"})," and an integer ",(0,s.jsx)(n.code,{children:"n"}),", output a floating-point number representing the result of the power computation."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Input: x = 2.00000, n = 10\nOutput: 1024.00000\n"})}),"\n",(0,s.jsx)(n.h3,{id:"solution-explanation-4",children:"Solution Explanation"}),"\n",(0,s.jsx)(n.p,{children:"Using recursion, we can solve this problem relatively easily. Pay attention to handling edge cases."}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)(i,{value:"cpp",label:"C++",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"double myPow(double x, int n) {\n    if (n == 0) {\n        return 1;\n    }\n    if (x == 0) {\n        return 0;\n    }\n    if (n == numeric_limits<int>::min()) {\n        return 1 / (x * myPow(x, numeric_limits<int>::max()));\n    }\n    if (n < 0) {\n        return 1 / myPow(x, -n);\n    }\n    if (n % 2 != 0) {\n        return x * myPow(x, n - 1);\n    }\n    double myPowSqrt = myPow(x, n >> 1);\n    return myPowSqrt * myPowSqrt;\n}\n"})})}),(0,s.jsx)(i,{value:"py",label:"Python",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"def myPow(x: float, n: int) -> float:\n    if n == 0:\n        return 1\n    if x == 0:\n        return 0\n    if n < 0:\n        return 1 / myPow(x, -n)\n    if n % 2 != 0:\n        return x * myPow(x, n - 1)\n    myPowSqrt = myPow(x, n >> 1)\n    return myPowSqrt * myPowSqrt\n"})})})]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}function p(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);