"use strict";(self.webpackChunkleetcode_101=self.webpackChunkleetcode_101||[]).push([[6735],{9292:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"bitwise-operations/9-3-binary-properties","title":"9.3 Binary Features","description":"By leveraging some binary features, we can apply bitwise operations to solve a wider range of problems.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/9-bitwise-operations/9-3-binary-properties.mdx","sourceDirName":"9-bitwise-operations","slug":"/bitwise-operations/9-3-binary-properties","permalink":"/leetcode_101/en/bitwise-operations/9-3-binary-properties","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":46,"frontMatter":{"sidebar_position":46},"sidebar":"tutorialSidebar","previous":{"title":"9.2 Basic Problems in Bit Manipulation","permalink":"/leetcode_101/en/bitwise-operations/9-2-basic-bitwise-problems"},"next":{"title":"9.4 Exercises","permalink":"/leetcode_101/en/bitwise-operations/9-4-exercises"}}');var t=s(4848),a=s(8453);const r={sidebar_position:46},o="9.3 Binary Features",l={},c=[{value:"318. Maximum Product of Word Lengths",id:"318-maximum-product-of-word-lengths",level:2},{value:"Problem Description",id:"problem-description",level:3},{value:"Input and Output Example",id:"input-and-output-example",level:3},{value:"Solution Explanation",id:"solution-explanation",level:3},{value:"338. Counting Bits",id:"338-counting-bits",level:2},{value:"Problem Description",id:"problem-description-1",level:3},{value:"Input and Output Example",id:"input-and-output-example-1",level:3},{value:"Solution Explanation",id:"solution-explanation-1",level:3}];function d(e){const n={a:"a",annotation:"annotation",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",math:"math",mi:"mi",mn:"mn",mrow:"mrow",msup:"msup",p:"p",pre:"pre",semantics:"semantics",span:"span",ul:"ul",...(0,a.R)(),...e.components},{TabItem:s,Tabs:i}=n;return s||p("TabItem",!0),i||p("Tabs",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"93-binary-features",children:"9.3 Binary Features"})}),"\n",(0,t.jsx)(n.p,{children:"By leveraging some binary features, we can apply bitwise operations to solve a wider range of problems."}),"\n",(0,t.jsxs)(n.p,{children:["For example, we can use binary and bitwise operations to generate all subsets of an array. Suppose we have an array of length ",(0,t.jsxs)(n.span,{className:"katex",children:[(0,t.jsx)(n.span,{className:"katex-mathml",children:(0,t.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,t.jsxs)(n.semantics,{children:[(0,t.jsx)(n.mrow,{children:(0,t.jsx)(n.mi,{children:"n"})}),(0,t.jsx)(n.annotation,{encoding:"application/x-tex",children:"n"})]})})}),(0,t.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,t.jsxs)(n.span,{className:"base",children:[(0,t.jsx)(n.span,{className:"strut",style:{height:"0.4306em"}}),(0,t.jsx)(n.span,{className:"mord mathnormal",children:"n"})]})})]}),", we can generate all binary numbers of length ",(0,t.jsxs)(n.span,{className:"katex",children:[(0,t.jsx)(n.span,{className:"katex-mathml",children:(0,t.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,t.jsxs)(n.semantics,{children:[(0,t.jsx)(n.mrow,{children:(0,t.jsx)(n.mi,{children:"n"})}),(0,t.jsx)(n.annotation,{encoding:"application/x-tex",children:"n"})]})})}),(0,t.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,t.jsxs)(n.span,{className:"base",children:[(0,t.jsx)(n.span,{className:"strut",style:{height:"0.4306em"}}),(0,t.jsx)(n.span,{className:"mord mathnormal",children:"n"})]})})]}),", where 1 indicates selecting the number, and 0 indicates not selecting it. This way, we obtain ",(0,t.jsxs)(n.span,{className:"katex",children:[(0,t.jsx)(n.span,{className:"katex-mathml",children:(0,t.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,t.jsxs)(n.semantics,{children:[(0,t.jsx)(n.mrow,{children:(0,t.jsxs)(n.msup,{children:[(0,t.jsx)(n.mn,{children:"2"}),(0,t.jsx)(n.mi,{children:"n"})]})}),(0,t.jsx)(n.annotation,{encoding:"application/x-tex",children:"2^n"})]})})}),(0,t.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,t.jsxs)(n.span,{className:"base",children:[(0,t.jsx)(n.span,{className:"strut",style:{height:"0.6644em"}}),(0,t.jsxs)(n.span,{className:"mord",children:[(0,t.jsx)(n.span,{className:"mord",children:"2"}),(0,t.jsx)(n.span,{className:"msupsub",children:(0,t.jsx)(n.span,{className:"vlist-t",children:(0,t.jsx)(n.span,{className:"vlist-r",children:(0,t.jsx)(n.span,{className:"vlist",style:{height:"0.6644em"},children:(0,t.jsxs)(n.span,{style:{top:"-3.063em",marginRight:"0.05em"},children:[(0,t.jsx)(n.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(n.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsx)(n.span,{className:"mord mathnormal mtight",children:"n"})})]})})})})})]})]})})]})," subsets."]}),"\n",(0,t.jsx)(n.h2,{id:"318-maximum-product-of-word-lengths",children:(0,t.jsx)(n.a,{href:"https://leetcode.com/problems/maximum-product-of-word-lengths/",children:"318. Maximum Product of Word Lengths"})}),"\n",(0,t.jsx)(n.h3,{id:"problem-description",children:"Problem Description"}),"\n",(0,t.jsx)(n.p,{children:"Given multiple strings, find the maximum product of lengths of any two strings such that the two strings do not share any common letters."}),"\n",(0,t.jsx)(n.h3,{id:"input-and-output-example",children:"Input and Output Example"}),"\n",(0,t.jsx)(n.p,{children:"Input is a one-dimensional array containing multiple strings, and output is an integer representing the maximum product of lengths."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'Input: ["a","ab","abc","d","cd","bcd","abcd"]\nOutput: 4\n'})}),"\n",(0,t.jsx)(n.p,{children:'In this example, one optimal pair is "ab" and "cd."'}),"\n",(0,t.jsx)(n.h3,{id:"solution-explanation",children:"Solution Explanation"}),"\n",(0,t.jsx)(n.p,{children:'How can we quickly determine if two strings share common letters? We can represent each string with a binary number of length 26, where each position indicates the presence of a specific letter. If two strings share common letters, their binary representations\' bitwise AND will not be 0. Additionally, we can use a hash map to store the mapping from binary numbers to the longest string lengths. For example, "ab" and "aab" may have the same binary representation, but "aab" is longer.'}),"\n",(0,t.jsxs)(i,{children:[(0,t.jsx)(s,{value:"cpp",label:"C++",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"int maxProduct(vector<string>& words) {\n    unordered_map<int, int> cache;\n    int max_prod = 0;\n    for (const string& word : words) {\n        int mask = 0, w_len = word.length();\n        for (char c : word) {\n            mask |= 1 << (c - \u2019a\u2019);\n        }\n        cache[mask] = max(cache[mask], w_len);\n        for (auto [h_mask, h_len] : cache) {\n            if ((mask & h_mask) == 0) {\n                max_prod = max(max_prod, w_len * h_len);\n            }\n        }\n    }\n    return max_prod;\n}\n"})})}),(0,t.jsx)(s,{value:"py",label:"Python",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-py",children:'def maxProduct(words: List[str]) -> int:\n    cache = dict()\n    max_prod = 0\n    for word in words:\n        mask, w_len = 0, len(word)\n        for c in word:\n            mask = mask | (1 << (ord(c) - ord("a")))\n        cache[mask] = max(cache.get(mask, 0), w_len)\n        for h_mask, h_len in cache.items():\n            if (mask & h_mask) == 0:\n                max_prod = max(max_prod, w_len * h_len)\n    return max_prod\n'})})})]}),"\n",(0,t.jsx)(n.h2,{id:"338-counting-bits",children:(0,t.jsx)(n.a,{href:"https://leetcode.com/problems/counting-bits/",children:"338. Counting Bits"})}),"\n",(0,t.jsx)(n.h3,{id:"problem-description-1",children:"Problem Description"}),"\n",(0,t.jsxs)(n.p,{children:["Given a non-negative integer ",(0,t.jsx)(n.code,{children:"n"}),", find the number of ",(0,t.jsx)(n.code,{children:"1"}),"s in the binary representation of every number from ",(0,t.jsx)(n.code,{children:"0"})," to ",(0,t.jsx)(n.code,{children:"n"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"input-and-output-example-1",children:"Input and Output Example"}),"\n",(0,t.jsxs)(n.p,{children:["The input is a non-negative integer ",(0,t.jsx)(n.code,{children:"n"}),", and the output is a list of non-negative integers of length ",(0,t.jsx)(n.code,{children:"n + 1"}),", where each position ",(0,t.jsx)(n.code,{children:"m"})," represents the number of ",(0,t.jsx)(n.code,{children:"1"}),"s in the binary representation of ",(0,t.jsx)(n.code,{children:"m"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Input: 5\nOutput: [0,1,1,2,1,2]\n"})}),"\n",(0,t.jsx)(n.h3,{id:"solution-explanation-1",children:"Solution Explanation"}),"\n",(0,t.jsxs)(n.p,{children:["This problem can be solved efficiently using dynamic programming and bitwise operations. Define an array ",(0,t.jsx)(n.code,{children:"dp"}),", where ",(0,t.jsx)(n.code,{children:"dp[i]"})," represents the number of ",(0,t.jsx)(n.code,{children:"1"}),"s in the binary representation of the number ",(0,t.jsx)(n.code,{children:"i"}),". For the number ",(0,t.jsx)(n.code,{children:"i"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["If the last bit of its binary representation is ",(0,t.jsx)(n.code,{children:"1"}),", the count of ",(0,t.jsx)(n.code,{children:"1"}),"s is ",(0,t.jsx)(n.code,{children:"dp[i-1] + 1"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["If the last bit of its binary representation is ",(0,t.jsx)(n.code,{children:"0"}),", the count of ",(0,t.jsx)(n.code,{children:"1"}),"s is the same as that of its arithmetic right-shift result, i.e., ",(0,t.jsx)(n.code,{children:"dp[i>>1]"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(i,{children:[(0,t.jsx)(s,{value:"cpp",label:"C++",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"vector<int> countBits(int n) {\n    vector<int> dp(n + 1, 0);\n    for (int i = 1; i <= n; ++i)\n        // Equivalent to: dp[i] = dp[i & (i - 1)] + 1;\n        dp[i] = i & 1 ? dp[i - 1] + 1 : dp[i >> 1];\n    return dp;\n}\n"})})}),(0,t.jsx)(s,{value:"py",label:"Python",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-py",children:"def countBits(n: int) -> List[int]:\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        # Equivalent to: dp[i] = dp[i & (i - 1)] + 1\n        dp[i] = dp[i - 1] + 1 if i & 1 else dp[i >> 1]\n    return dp\n"})})})]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}function p(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);