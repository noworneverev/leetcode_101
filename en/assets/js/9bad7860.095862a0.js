"use strict";(self.webpackChunkleetcode_101=self.webpackChunkleetcode_101||[]).push([[7210],{4012:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"trees/13-6-trie","title":"13.6 Trie","description":"A Trie is a tree-like data structure used to determine whether a string exists or whether it has a specific prefix.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/13-trees/13-6-trie.mdx","sourceDirName":"13-trees","slug":"/trees/13-6-trie","permalink":"/leetcode_101/en/trees/13-6-trie","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":73,"frontMatter":{"sidebar_position":73},"sidebar":"tutorialSidebar","previous":{"title":"13.5 Binary Search Tree","permalink":"/leetcode_101/en/trees/13-5-binary-search-tree"},"next":{"title":"13.7 Exercises","permalink":"/leetcode_101/en/trees/13-7-exercises"}}');var i=r(4848),t=r(8453);const a={sidebar_position:73},o="13.6 Trie",l={},d=[{value:"208. Implement Trie (Pre\ufb01x Tree)",id:"208-implement-trie-pre\ufb01x-tree",level:2},{value:"Problem Description",id:"problem-description",level:3},{value:"Input and Output Example",id:"input-and-output-example",level:3},{value:"Solution Explanation",id:"solution-explanation",level:3}];function c(e){const n={a:"a",annotation:"annotation",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",math:"math",mi:"mi",mn:"mn",mo:"mo",mrow:"mrow",p:"p",pre:"pre",semantics:"semantics",span:"span",...(0,t.R)(),...e.components},{TabItem:s,Tabs:a}=n;return s||p("TabItem",!0),a||p("Tabs",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"136-trie",children:"13.6 Trie"})}),"\n",(0,i.jsx)(n.p,{children:"A Trie is a tree-like data structure used to determine whether a string exists or whether it has a specific prefix."}),"\n",(0,i.jsxs)("figure",{children:[(0,i.jsx)("span",{style:{display:"block",width:"50%",margin:"0 auto"},children:(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:r(5083).A+"",width:"499",height:"469"})})}),(0,i.jsx)("figcaption",{style:{textAlign:"center"},children:"Fig. 13.1: Trie storing words A, to, tea, ted, ten, i, in, and inn, along with their frequencies"})]}),"\n",(0,i.jsxs)(n.p,{children:["Why use a Trie for such problems? Suppose we have a dictionary storing nearly 10,000 words. Even with a hash table, searching for a word can be computationally expensive, and supporting prefix-based searches becomes difficult. However, since the length of an English word, ",(0,i.jsx)(n.code,{children:"n"}),", is usually less than 10, using a Trie allows searches to be completed in ",(0,i.jsxs)(n.span,{className:"katex",children:[(0,i.jsx)(n.span,{className:"katex-mathml",children:(0,i.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(n.semantics,{children:[(0,i.jsxs)(n.mrow,{children:[(0,i.jsx)(n.mi,{children:"O"}),(0,i.jsx)(n.mo,{stretchy:"false",children:"("}),(0,i.jsx)(n.mi,{children:"n"}),(0,i.jsx)(n.mo,{stretchy:"false",children:")"})]}),(0,i.jsx)(n.annotation,{encoding:"application/x-tex",children:"O(n)"})]})})}),(0,i.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(n.span,{className:"base",children:[(0,i.jsx)(n.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,i.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,i.jsx)(n.span,{className:"mopen",children:"("}),(0,i.jsx)(n.span,{className:"mord mathnormal",children:"n"}),(0,i.jsx)(n.span,{className:"mclose",children:")"})]})})]}),"\u2014approximately ",(0,i.jsxs)(n.span,{className:"katex",children:[(0,i.jsx)(n.span,{className:"katex-mathml",children:(0,i.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(n.semantics,{children:[(0,i.jsxs)(n.mrow,{children:[(0,i.jsx)(n.mi,{children:"O"}),(0,i.jsx)(n.mo,{stretchy:"false",children:"("}),(0,i.jsx)(n.mn,{children:"1"}),(0,i.jsx)(n.mo,{stretchy:"false",children:")"})]}),(0,i.jsx)(n.annotation,{encoding:"application/x-tex",children:"O(1)"})]})})}),(0,i.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(n.span,{className:"base",children:[(0,i.jsx)(n.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,i.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,i.jsx)(n.span,{className:"mopen",children:"("}),(0,i.jsx)(n.span,{className:"mord",children:"1"}),(0,i.jsx)(n.span,{className:"mclose",children:")"})]})})]})," time\u2014with minimal additional overhead."]}),"\n",(0,i.jsx)(n.h2,{id:"208-implement-trie-pre\ufb01x-tree",children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/implement-trie-prefix-tree/",children:"208. Implement Trie (Pre\ufb01x Tree)"})}),"\n",(0,i.jsx)(n.h3,{id:"problem-description",children:"Problem Description"}),"\n",(0,i.jsx)(n.p,{children:"Create a Trie that supports fast insertion of words, word lookup, and prefix lookup."}),"\n",(0,i.jsx)(n.h3,{id:"input-and-output-example",children:"Input and Output Example"}),"\n",(0,i.jsx)(n.p,{children:"Below is an example of how to use the data structure."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'Trie trie = new Trie();\ntrie.insert("apple");\ntrie.search("apple"); // true\ntrie.search("app"); // false\ntrie.startsWith("app"); // true\ntrie.insert("app");\ntrie.search("app"); // true\n'})}),"\n",(0,i.jsx)(n.h3,{id:"solution-explanation",children:"Solution Explanation"}),"\n",(0,i.jsx)(n.p,{children:"Here is the typical implementation of a Trie."}),"\n",(0,i.jsxs)(a,{children:[(0,i.jsx)(s,{value:"cpp",label:"C++",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"struct TrieNode {\n    bool word_ends;\n    vector<TrieNode*> children;\n    TrieNode() : word_ends(false), children(26, nullptr) {}\n};\n\nclass Trie {\n   public:\n    Trie() : root_(new TrieNode()) {}\n\n    void insert(string word) {\n        TrieNode* node = root_;\n        for (char c : word) {\n            int pos = c - \u2019a\u2019;\n            if (node->children[pos] == nullptr) {\n                node->children[pos] = new TrieNode();\n            }\n            node = node->children[pos];\n        }\n        node->word_ends = true;\n    }\n\n    bool search(string word) {\n        TrieNode* node = root_;\n        for (char c : word) {\n            if (node == nullptr) {\n                break;\n            }\n            node = node->children[c - \u2019a\u2019];\n        }\n        return node != nullptr && node->word_ends;\n    }\n\n    bool startsWith(string prefix) {\n        TrieNode* node = root_;\n        for (char c : prefix) {\n            if (node == nullptr) {\n                break;\n            }\n            node = node->children[c - \u2019a\u2019];\n        }\n        return node != nullptr;\n    }\n\n   private:\n    TrieNode* root_;\n};\n"})})}),(0,i.jsx)(s,{value:"py",label:"Python",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:'class TrieNode:\n    def __init__(self):\n        self.word_ends = False\n        self.children = [None] * 26\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n\n    def insert(self, word: str) -> None:\n        node = self.root\n        for c in word:\n            pos = ord(c) - ord("a")\n            if node.children[pos] is None:\n                node.children[pos] = TrieNode()\n            node = node.children[pos]\n        node.word_ends = True\n\n    def search(self, word: str) -> bool:\n        node = self.root\n        for c in word:\n            if node is None:\n                break\n            node = node.children[ord(c) - ord("a")]\n        return node is not None and node.word_ends\n\n    def startsWith(self, prefix: str) -> bool:\n        node = self.root\n        for c in prefix:\n            if node is None:\n                break\n            node = node.children[ord(c) - ord("a")]\n        return node is not None\n\n'})})})]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}function p(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},5083:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/13.1-8f62e3e9e89a8b86a7e3ded16599bba3.png"}}]);