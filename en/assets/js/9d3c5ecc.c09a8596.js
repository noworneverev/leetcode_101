"use strict";(self.webpackChunkleetcode_101=self.webpackChunkleetcode_101||[]).push([[6526],{7342:(e,a,s)=>{s.r(a),s.d(a,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"data-structures/10-5-monotonic-stack","title":"10.5 Monotonic Stack","description":"Monotonic Stack is a technique that maintains the monotonic increasing (or decreasing) property of a stack to solve comparison problems in $O(n)$ time complexity.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/10-data-structures/10-5-monotonic-stack.mdx","sourceDirName":"10-data-structures","slug":"/data-structures/10-5-monotonic-stack","permalink":"/leetcode_101/en/data-structures/10-5-monotonic-stack","draft":false,"unlisted":false,"editUrl":"https://github.com/noworneverev/leetcode_101/tree/master/leetcode_101/docs/10-data-structures/10-5-monotonic-stack.mdx","tags":[],"version":"current","sidebarPosition":52,"frontMatter":{"sidebar_position":52},"sidebar":"tutorialSidebar","previous":{"title":"10.4 Stacks and Queues","permalink":"/leetcode_101/en/data-structures/10-4-stack-and-queue"},"next":{"title":"10.6 Priority Queue","permalink":"/leetcode_101/en/data-structures/10-6-priority-queue"}}');var n=s(4848),i=s(8453);const r={sidebar_position:52},l="10.5 Monotonic Stack",c={},o=[{value:"739. Daily Temperatures",id:"739-daily-temperatures",level:2},{value:"Problem Description",id:"problem-description",level:3},{value:"Input and Output Example",id:"input-and-output-example",level:3},{value:"Solution Explanation",id:"solution-explanation",level:3}];function m(e){const a={a:"a",annotation:"annotation",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",math:"math",mi:"mi",mo:"mo",mrow:"mrow",p:"p",pre:"pre",semantics:"semantics",span:"span",...(0,i.R)(),...e.components},{TabItem:s,Tabs:t}=a;return s||d("TabItem",!0),t||d("Tabs",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(a.header,{children:(0,n.jsx)(a.h1,{id:"105-monotonic-stack",children:"10.5 Monotonic Stack"})}),"\n",(0,n.jsxs)(a.p,{children:[(0,n.jsx)(a.code,{children:"Monotonic Stack"})," is a technique that maintains the monotonic increasing (or decreasing) property of a stack to solve comparison problems in ",(0,n.jsxs)(a.span,{className:"katex",children:[(0,n.jsx)(a.span,{className:"katex-mathml",children:(0,n.jsx)(a.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,n.jsxs)(a.semantics,{children:[(0,n.jsxs)(a.mrow,{children:[(0,n.jsx)(a.mi,{children:"O"}),(0,n.jsx)(a.mo,{stretchy:"false",children:"("}),(0,n.jsx)(a.mi,{children:"n"}),(0,n.jsx)(a.mo,{stretchy:"false",children:")"})]}),(0,n.jsx)(a.annotation,{encoding:"application/x-tex",children:"O(n)"})]})})}),(0,n.jsx)(a.span,{className:"katex-html","aria-hidden":"true",children:(0,n.jsxs)(a.span,{className:"base",children:[(0,n.jsx)(a.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,n.jsx)(a.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,n.jsx)(a.span,{className:"mopen",children:"("}),(0,n.jsx)(a.span,{className:"mord mathnormal",children:"n"}),(0,n.jsx)(a.span,{className:"mclose",children:")"})]})})]})," time complexity."]}),"\n",(0,n.jsx)(a.h2,{id:"739-daily-temperatures",children:(0,n.jsx)(a.a,{href:"https://leetcode.com/problems/daily-temperatures/",children:"739. Daily Temperatures"})}),"\n",(0,n.jsx)(a.h3,{id:"problem-description",children:"Problem Description"}),"\n",(0,n.jsx)(a.p,{children:"Given the daily temperatures, determine how many days you need to wait for a warmer day. If there is no such day, return 0 for that day."}),"\n",(0,n.jsx)(a.h3,{id:"input-and-output-example",children:"Input and Output Example"}),"\n",(0,n.jsx)(a.p,{children:"The input is a one-dimensional integer array, and the output is an array of the same length, indicating how many days you need to wait for each day."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{children:"Input: [73, 74, 75, 71, 69, 72, 76, 73]\nOutput: [1, 1, 4, 2, 1, 1, 0, 0]\n"})}),"\n",(0,n.jsx)(a.h3,{id:"solution-explanation",children:"Solution Explanation"}),"\n",(0,n.jsxs)(a.p,{children:["We can maintain a monotonic decreasing stack that stores the temperatures. To facilitate calculating the day differences, we store indices (dates) instead of the temperatures themselves. As we iterate through the temperature array from left to right, for each day ",(0,n.jsxs)(a.span,{className:"katex",children:[(0,n.jsx)(a.span,{className:"katex-mathml",children:(0,n.jsx)(a.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,n.jsxs)(a.semantics,{children:[(0,n.jsx)(a.mrow,{children:(0,n.jsx)(a.mi,{children:"p"})}),(0,n.jsx)(a.annotation,{encoding:"application/x-tex",children:"p"})]})})}),(0,n.jsx)(a.span,{className:"katex-html","aria-hidden":"true",children:(0,n.jsxs)(a.span,{className:"base",children:[(0,n.jsx)(a.span,{className:"strut",style:{height:"0.625em",verticalAlign:"-0.1944em"}}),(0,n.jsx)(a.span,{className:"mord mathnormal",children:"p"})]})})]}),", if the temperature on day ",(0,n.jsxs)(a.span,{className:"katex",children:[(0,n.jsx)(a.span,{className:"katex-mathml",children:(0,n.jsx)(a.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,n.jsxs)(a.semantics,{children:[(0,n.jsx)(a.mrow,{children:(0,n.jsx)(a.mi,{children:"p"})}),(0,n.jsx)(a.annotation,{encoding:"application/x-tex",children:"p"})]})})}),(0,n.jsx)(a.span,{className:"katex-html","aria-hidden":"true",children:(0,n.jsxs)(a.span,{className:"base",children:[(0,n.jsx)(a.span,{className:"strut",style:{height:"0.625em",verticalAlign:"-0.1944em"}}),(0,n.jsx)(a.span,{className:"mord mathnormal",children:"p"})]})})]})," is higher than the temperature of the day stored at the stack top ",(0,n.jsxs)(a.span,{className:"katex",children:[(0,n.jsx)(a.span,{className:"katex-mathml",children:(0,n.jsx)(a.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,n.jsxs)(a.semantics,{children:[(0,n.jsx)(a.mrow,{children:(0,n.jsx)(a.mi,{children:"q"})}),(0,n.jsx)(a.annotation,{encoding:"application/x-tex",children:"q"})]})})}),(0,n.jsx)(a.span,{className:"katex-html","aria-hidden":"true",children:(0,n.jsxs)(a.span,{className:"base",children:[(0,n.jsx)(a.span,{className:"strut",style:{height:"0.625em",verticalAlign:"-0.1944em"}}),(0,n.jsx)(a.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"q"})]})})]}),", we pop ",(0,n.jsxs)(a.span,{className:"katex",children:[(0,n.jsx)(a.span,{className:"katex-mathml",children:(0,n.jsx)(a.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,n.jsxs)(a.semantics,{children:[(0,n.jsx)(a.mrow,{children:(0,n.jsx)(a.mi,{children:"q"})}),(0,n.jsx)(a.annotation,{encoding:"application/x-tex",children:"q"})]})})}),(0,n.jsx)(a.span,{className:"katex-html","aria-hidden":"true",children:(0,n.jsxs)(a.span,{className:"base",children:[(0,n.jsx)(a.span,{className:"strut",style:{height:"0.625em",verticalAlign:"-0.1944em"}}),(0,n.jsx)(a.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"q"})]})})]})," and record the waiting days for ",(0,n.jsxs)(a.span,{className:"katex",children:[(0,n.jsx)(a.span,{className:"katex-mathml",children:(0,n.jsx)(a.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,n.jsxs)(a.semantics,{children:[(0,n.jsx)(a.mrow,{children:(0,n.jsx)(a.mi,{children:"q"})}),(0,n.jsx)(a.annotation,{encoding:"application/x-tex",children:"q"})]})})}),(0,n.jsx)(a.span,{className:"katex-html","aria-hidden":"true",children:(0,n.jsxs)(a.span,{className:"base",children:[(0,n.jsx)(a.span,{className:"strut",style:{height:"0.625em",verticalAlign:"-0.1944em"}}),(0,n.jsx)(a.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"q"})]})})]})," as ",(0,n.jsxs)(a.span,{className:"katex",children:[(0,n.jsx)(a.span,{className:"katex-mathml",children:(0,n.jsx)(a.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,n.jsxs)(a.semantics,{children:[(0,n.jsxs)(a.mrow,{children:[(0,n.jsx)(a.mi,{children:"p"}),(0,n.jsx)(a.mo,{children:"\u2212"}),(0,n.jsx)(a.mi,{children:"q"})]}),(0,n.jsx)(a.annotation,{encoding:"application/x-tex",children:"p - q"})]})})}),(0,n.jsxs)(a.span,{className:"katex-html","aria-hidden":"true",children:[(0,n.jsxs)(a.span,{className:"base",children:[(0,n.jsx)(a.span,{className:"strut",style:{height:"0.7778em",verticalAlign:"-0.1944em"}}),(0,n.jsx)(a.span,{className:"mord mathnormal",children:"p"}),(0,n.jsx)(a.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,n.jsx)(a.span,{className:"mbin",children:"\u2212"}),(0,n.jsx)(a.span,{className:"mspace",style:{marginRight:"0.2222em"}})]}),(0,n.jsxs)(a.span,{className:"base",children:[(0,n.jsx)(a.span,{className:"strut",style:{height:"0.625em",verticalAlign:"-0.1944em"}}),(0,n.jsx)(a.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"q"})]})]})]}),". We repeat this process until the temperature of day ",(0,n.jsxs)(a.span,{className:"katex",children:[(0,n.jsx)(a.span,{className:"katex-mathml",children:(0,n.jsx)(a.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,n.jsxs)(a.semantics,{children:[(0,n.jsx)(a.mrow,{children:(0,n.jsx)(a.mi,{children:"p"})}),(0,n.jsx)(a.annotation,{encoding:"application/x-tex",children:"p"})]})})}),(0,n.jsx)(a.span,{className:"katex-html","aria-hidden":"true",children:(0,n.jsxs)(a.span,{className:"base",children:[(0,n.jsx)(a.span,{className:"strut",style:{height:"0.625em",verticalAlign:"-0.1944em"}}),(0,n.jsx)(a.span,{className:"mord mathnormal",children:"p"})]})})]})," is less than or equal to the temperature at the stack top (or the stack becomes empty), then push ",(0,n.jsxs)(a.span,{className:"katex",children:[(0,n.jsx)(a.span,{className:"katex-mathml",children:(0,n.jsx)(a.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,n.jsxs)(a.semantics,{children:[(0,n.jsx)(a.mrow,{children:(0,n.jsx)(a.mi,{children:"p"})}),(0,n.jsx)(a.annotation,{encoding:"application/x-tex",children:"p"})]})})}),(0,n.jsx)(a.span,{className:"katex-html","aria-hidden":"true",children:(0,n.jsxs)(a.span,{className:"base",children:[(0,n.jsx)(a.span,{className:"strut",style:{height:"0.625em",verticalAlign:"-0.1944em"}}),(0,n.jsx)(a.span,{className:"mord mathnormal",children:"p"})]})})]})," into the stack and move to the next day. During this process, the stack always maintains a monotonic decreasing order, avoiding the need for sorting. Finally, if there are remaining indices in the stack, it means those days do not have warmer days in the future."]}),"\n",(0,n.jsxs)(t,{children:[(0,n.jsx)(s,{value:"cpp",label:"C++",children:(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-cpp",children:"vector<int> dailyTemperatures(vector<int>& temperatures) {\n    int n = temperatures.size();\n    vector<int> days_to_wait(n, 0);\n    stack<int> mono_stack;\n    for (int i = 0; i < n; ++i) {\n        while (!mono_stack.empty()) {\n            int j = mono_stack.top();\n            if (temperatures[i] <= temperatures[j]) {\n                break;\n            }\n            mono_stack.pop();\n            days_to_wait[j] = i - j;\n        }\n        mono_stack.push(i);\n    }\n    return days_to_wait;\n}\n"})})}),(0,n.jsx)(s,{value:"py",label:"Python",children:(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-py",children:"def dailyTemperatures(temperatures: List[int]) -> List[int]:\n    n = len(temperatures)\n    days_to_wait = [0] * n\n    mono_stack = []\n    for i in range(n):\n        while len(mono_stack) > 0:\n            j = mono_stack[-1]\n            if temperatures[i] <= temperatures[j]:\n                break\n            mono_stack.pop()\n            days_to_wait[j] = i - j\n        mono_stack.append(i)\n    return days_to_wait\n"})})})]})]})}function h(e={}){const{wrapper:a}={...(0,i.R)(),...e.components};return a?(0,n.jsx)(a,{...e,children:(0,n.jsx)(m,{...e})}):m(e)}function d(e,a){throw new Error("Expected "+(a?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);