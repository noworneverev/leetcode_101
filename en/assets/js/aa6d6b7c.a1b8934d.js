"use strict";(self.webpackChunkleetcode_101=self.webpackChunkleetcode_101||[]).push([[8825],{2783:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>r});const s=JSON.parse('{"id":"linked-lists/12-3-other-linked-list-techniques","title":"12.3 Other Linked List Techniques","description":"160. Intersection of Two Linked Lists","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/12-linked-lists/12-3-other-linked-list-techniques.mdx","sourceDirName":"12-linked-lists","slug":"/linked-lists/12-3-other-linked-list-techniques","permalink":"/leetcode_101/en/linked-lists/12-3-other-linked-list-techniques","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":66,"frontMatter":{"sidebar_position":66},"sidebar":"tutorialSidebar","previous":{"title":"12.2 Basic Operations on Linked Lists","permalink":"/leetcode_101/en/linked-lists/12-2-basic-linked-list-operations"},"next":{"title":"12.4 Exercises","permalink":"/leetcode_101/en/linked-lists/12-4-exercises"}}');var i=t(4848),l=t(8453);const o={sidebar_position:66},a="12.3 Other Linked List Techniques",d={},r=[{value:"160. Intersection of Two Linked Lists",id:"160-intersection-of-two-linked-lists",level:2},{value:"Problem Description",id:"problem-description",level:3},{value:"Input and Output Example",id:"input-and-output-example",level:3},{value:"Solution Explanation",id:"solution-explanation",level:3},{value:"234. Palindrome Linked List",id:"234-palindrome-linked-list",level:2},{value:"Problem Description",id:"problem-description-1",level:3},{value:"Input and Output Example",id:"input-and-output-example-1",level:3},{value:"Solution Explanation",id:"solution-explanation-1",level:3}];function h(e){const n={a:"a",annotation:"annotation",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",math:"math",mi:"mi",mn:"mn",mo:"mo",mrow:"mrow",p:"p",pre:"pre",semantics:"semantics",span:"span",...(0,l.R)(),...e.components},{TabItem:t,Tabs:s}=n;return t||p("TabItem",!0),s||p("Tabs",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"123-other-linked-list-techniques",children:"12.3 Other Linked List Techniques"})}),"\n",(0,i.jsx)(n.h2,{id:"160-intersection-of-two-linked-lists",children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/intersection-of-two-linked-lists/",children:"160. Intersection of Two Linked Lists"})}),"\n",(0,i.jsx)(n.h3,{id:"problem-description",children:"Problem Description"}),"\n",(0,i.jsx)(n.p,{children:"Given two linked lists, determine if they intersect at a point and find the intersecting node."}),"\n",(0,i.jsx)(n.h3,{id:"input-and-output-example",children:"Input and Output Example"}),"\n",(0,i.jsxs)(n.p,{children:["Input consists of two linked lists, output is a node. If there is no intersection, return ",(0,i.jsx)(n.code,{children:"nullptr"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Input:\nA: a1 -> a2\n         |\n         v\n         c1 -> c2 -> c3\n         ^\n         |\nB: b1 -> b2 -> b3\nOutput: c1\n"})}),"\n",(0,i.jsx)(n.h3,{id:"solution-explanation",children:"Solution Explanation"}),"\n",(0,i.jsxs)(n.p,{children:["Assume the distance from the head of linked list A to the intersection is ",(0,i.jsx)(n.code,{children:"a"}),", the distance from the head of linked list B to the intersection is ",(0,i.jsx)(n.code,{children:"b"}),", and the distance from the intersection to the end of the lists is ",(0,i.jsx)(n.code,{children:"c"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["We use two pointers starting at the heads of the two linked lists and move them forward at the same speed. When a pointer reaches the end of a list, it continues from the head of the other list. With this approach, both pointers will meet at the intersection node after ",(0,i.jsx)(n.code,{children:"a + b + c"})," steps."]}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)(t,{value:"cpp",label:"C++",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {\n    ListNode *l1 = headA, *l2 = headB;\n    while (l1 != l2) {\n        l1 = l1 != nullptr ? l1->next : headB;\n        l2 = l2 != nullptr ? l2->next : headA;\n    }\n    return l1;\n}\n"})})}),(0,i.jsx)(t,{value:"py",label:"Python",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:"def getIntersectionNode(\n    headA: ListNode, headB: ListNode\n) -> Optional[ListNode]:\n    l1 = headA\n    l2 = headB    \n    while l1 != l2:\n        l1 = l1.next if l1 is not None else headB\n        l2 = l2.next if l2 is not None else headA    \n    return l1\n"})})})]}),"\n",(0,i.jsx)(n.h2,{id:"234-palindrome-linked-list",children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/palindrome-linked-list/",children:"234. Palindrome Linked List"})}),"\n",(0,i.jsx)(n.h3,{id:"problem-description-1",children:"Problem Description"}),"\n",(0,i.jsxs)(n.p,{children:["Determine if a linked list is a palindrome using ",(0,i.jsxs)(n.span,{className:"katex",children:[(0,i.jsx)(n.span,{className:"katex-mathml",children:(0,i.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(n.semantics,{children:[(0,i.jsxs)(n.mrow,{children:[(0,i.jsx)(n.mi,{children:"O"}),(0,i.jsx)(n.mo,{stretchy:"false",children:"("}),(0,i.jsx)(n.mn,{children:"1"}),(0,i.jsx)(n.mo,{stretchy:"false",children:")"})]}),(0,i.jsx)(n.annotation,{encoding:"application/x-tex",children:"O(1)"})]})})}),(0,i.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(n.span,{className:"base",children:[(0,i.jsx)(n.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,i.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,i.jsx)(n.span,{className:"mopen",children:"("}),(0,i.jsx)(n.span,{className:"mord",children:"1"}),(0,i.jsx)(n.span,{className:"mclose",children:")"})]})})]})," space complexity."]}),"\n",(0,i.jsx)(n.h3,{id:"input-and-output-example-1",children:"Input and Output Example"}),"\n",(0,i.jsxs)(n.p,{children:["Input: A linked list.",(0,i.jsx)(n.br,{}),"\n","Output: A boolean indicating whether the linked list is a palindrome."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Input: 1->2->3->2->1\nOutput: true\n"})}),"\n",(0,i.jsx)(n.h3,{id:"solution-explanation-1",children:"Solution Explanation"}),"\n",(0,i.jsx)(n.p,{children:"First, use a slow and fast pointer to find the middle of the linked list. Then split the list into two halves. Reverse the second half and compare the two halves for equality."}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)(t,{value:"cpp",label:"C++",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"bool isPalindrome(ListNode* head) {\n    if (head == nullptr || head->next == nullptr) {\n        return true;\n    }\n    ListNode *slow = head, *fast = head;\n    while (fast->next && fast->next->next) {\n        slow = slow->next;\n        fast = fast->next->next;\n    }\n    slow->next = reverseList(slow->next);  // Refer to problem 206.\n    slow = slow->next;\n    while (slow != nullptr) {\n        if (head->val != slow->val) {\n            return false;\n        }\n        head = head->next;\n        slow = slow->next;\n    }\n    return true;\n}\n"})})}),(0,i.jsx)(t,{value:"py",label:"Python",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:"def isPalindrome(head: Optional[ListNode]) -> bool:\n    if head is None or head.next is None:\n        return True\n\n    slow, fast = head, head\n\n    while fast.next is not None and fast.next.next is not None:\n        slow = slow.next\n        fast = fast.next.next\n\n    slow.next = reverseList(slow.next)  # Refer to problem 206.\n    slow = slow.next\n\n    while slow is not None:\n        if head.val != slow.val:\n            return False\n        head = head.next\n        slow = slow.next\n\n    return True\n\n"})})})]})]})}function c(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}function p(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);