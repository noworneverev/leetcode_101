"use strict";(self.webpackChunkleetcode_101=self.webpackChunkleetcode_101||[]).push([[1090],{9854:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>c,contentTitle:()=>l,default:()=>f,frontMatter:()=>r,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"advanced-data-structures/15-2-union-find","title":"15.2 \u5e76\u67e5\u96c6","description":"\u5e76\u67e5\u96c6\uff08union-\ufb01nd, disjoint set\uff09\u53ef\u4ee5\u52a8\u6001\u5730\u8fde\u901a\u4e24\u4e2a\u70b9\uff0c\u5e76\u4e14\u53ef\u4ee5\u975e\u5e38\u5feb\u901f\u5730\u5224\u65ad\u4e24\u4e2a\u70b9\u662f\u5426\u8fde\u901a\u3002\u5047\u8bbe\u5b58\u5728 n \u4e2a\u8282\u70b9\uff0c\u6211\u4eec\u5148\u5c06\u6240\u6709\u8282\u70b9\u7684\u7236\u8282\u70b9\u6807\u4e3a\u81ea\u5df1\uff1b\u6bcf\u6b21\u8981\u8fde\u63a5\u8282\u70b9 i \u548c j \u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u79e9\u8f83\u5c0f\u4e00\u65b9\u7684\u7236\u8282\u70b9\u6807\u4e3a\u53e6\u4e00\u65b9\uff08\u6309\u79e9\u5408\u5e76\uff09\uff1b\u6bcf\u6b21\u8981\u67e5\u8be2\u4e24\u4e2a\u8282\u70b9\u662f\u5426\u76f8\u8fde\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u67e5\u627e i \u548c j \u7684\u7956\u5148\u662f\u5426\u6700\u7ec8\u4e3a\u540c\u4e00\u4e2a\u4eba\uff0c\u5e76\u51cf\u5c11\u7956\u5148\u5c42\u7ea7\uff08\u8def\u5f84\u538b\u7f29\uff09\u3002","source":"@site/docs/15-advanced-data-structures/15-2-union-find.mdx","sourceDirName":"15-advanced-data-structures","slug":"/advanced-data-structures/15-2-union-find","permalink":"/leetcode_101/en/advanced-data-structures/15-2-union-find","draft":false,"unlisted":false,"editUrl":"https://github.com/noworneverev/leetcode_101/tree/master/leetcode_101/docs/15-advanced-data-structures/15-2-union-find.mdx","tags":[],"version":"current","sidebarPosition":76,"frontMatter":{"sidebar_position":76},"sidebar":"tutorialSidebar","previous":{"title":"15.1 \u5f15\u8a00","permalink":"/leetcode_101/en/advanced-data-structures/15-1-introduction"},"next":{"title":"15.3 \u590d\u5408\u6570\u636e\u7ed3\u6784","permalink":"/leetcode_101/en/advanced-data-structures/15-3-composite-data-structures"}}');var d=i(4848),s=i(8453);const r={sidebar_position:76},l="15.2 \u5e76\u67e5\u96c6",c={},o=[{value:"684. Redundant Connection",id:"684-redundant-connection",level:2},{value:"\u9898\u76ee\u63cf\u8ff0",id:"\u9898\u76ee\u63cf\u8ff0",level:3},{value:"\u8f93\u5165\u8f93\u51fa\u6837\u4f8b",id:"\u8f93\u5165\u8f93\u51fa\u6837\u4f8b",level:3},{value:"\u9898\u89e3",id:"\u9898\u89e3",level:3}];function a(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",p:"p",pre:"pre",...(0,s.R)(),...n.components},{TabItem:t,Tabs:r}=e;return t||u("TabItem",!0),r||u("Tabs",!0),(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(e.header,{children:(0,d.jsx)(e.h1,{id:"152-\u5e76\u67e5\u96c6",children:"15.2 \u5e76\u67e5\u96c6"})}),"\n",(0,d.jsxs)(e.p,{children:[(0,d.jsx)(e.code,{children:"\u5e76\u67e5\u96c6"}),"\uff08union-\ufb01nd, disjoint set\uff09\u53ef\u4ee5\u52a8\u6001\u5730\u8fde\u901a\u4e24\u4e2a\u70b9\uff0c\u5e76\u4e14\u53ef\u4ee5\u975e\u5e38\u5feb\u901f\u5730\u5224\u65ad\u4e24\u4e2a\u70b9\u662f\u5426\u8fde\u901a\u3002\u5047\u8bbe\u5b58\u5728 n \u4e2a\u8282\u70b9\uff0c\u6211\u4eec\u5148\u5c06\u6240\u6709\u8282\u70b9\u7684\u7236\u8282\u70b9\u6807\u4e3a\u81ea\u5df1\uff1b\u6bcf\u6b21\u8981\u8fde\u63a5\u8282\u70b9 i \u548c j \u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u79e9\u8f83\u5c0f\u4e00\u65b9\u7684\u7236\u8282\u70b9\u6807\u4e3a\u53e6\u4e00\u65b9\uff08\u6309\u79e9\u5408\u5e76\uff09\uff1b\u6bcf\u6b21\u8981\u67e5\u8be2\u4e24\u4e2a\u8282\u70b9\u662f\u5426\u76f8\u8fde\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u67e5\u627e i \u548c j \u7684\u7956\u5148\u662f\u5426\u6700\u7ec8\u4e3a\u540c\u4e00\u4e2a\u4eba\uff0c\u5e76\u51cf\u5c11\u7956\u5148\u5c42\u7ea7\uff08\u8def\u5f84\u538b\u7f29\uff09\u3002"]}),"\n",(0,d.jsxs)("figure",{children:[(0,d.jsx)("span",{style:{display:"block",width:"30%",margin:"0 auto"},children:(0,d.jsx)(e.p,{children:(0,d.jsx)(e.img,{src:i(8946).A+"",width:"206",height:"619"})})}),(0,d.jsx)("figcaption",{style:{textAlign:"center"},children:"\u56fe 15.1: \u5e76\u67e5\u96c6\u6837\u4f8b\uff0c\u5176\u4e2d union \u64cd\u4f5c\u53ef\u4ee5\u5c06\u4e24\u4e2a\u96c6\u5408\u6309\u79e9\u5408\u5e76\uff0c\ufb01nd \u64cd\u4f5c\u53ef\u4ee5\u67e5\u627e\u8282\u70b9\u7684\u7956\u5148\u5e76\u538b\u7f29\u8def\u5f84\u3002"})]}),"\n",(0,d.jsx)(e.h2,{id:"684-redundant-connection",children:(0,d.jsx)(e.a,{href:"https://leetcode.com/problems/redundant-connection/",children:"684. Redundant Connection"})}),"\n",(0,d.jsx)(e.h3,{id:"\u9898\u76ee\u63cf\u8ff0",children:"\u9898\u76ee\u63cf\u8ff0"}),"\n",(0,d.jsx)(e.p,{children:"\u5728\u65e0\u5411\u56fe\u627e\u51fa\u4e00\u6761\u8fb9\uff0c\u79fb\u9664\u5b83\u4e4b\u540e\u8be5\u56fe\u80fd\u591f\u6210\u4e3a\u4e00\u68f5\u6811\uff08\u5373\u65e0\u5411\u65e0\u73af\u56fe\uff09\u3002\u5982\u679c\u6709\u591a\u4e2a\u89e3\uff0c\u8fd4\u56de\u5728\u539f\u6570\u7ec4\u4e2d\u4f4d\u7f6e\u6700\u9760\u540e\u7684\u90a3\u6761\u8fb9\u3002"}),"\n",(0,d.jsx)(e.h3,{id:"\u8f93\u5165\u8f93\u51fa\u6837\u4f8b",children:"\u8f93\u5165\u8f93\u51fa\u6837\u4f8b"}),"\n",(0,d.jsx)(e.p,{children:"\u8f93\u5165\u662f\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\uff0c\u8868\u793a\u6240\u6709\u7684\u8fb9\uff08\u5bf9\u5e94\u7684\u4e24\u4e2a\u8282\u70b9\uff09\uff1b\u8f93\u51fa\u662f\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4\uff0c\u8868\u793a\u9700\u8981\u79fb\u9664\u7684\u8fb9\uff08\u5bf9\u5e94\u7684\u4e24\u4e2a\u8282\u70b9\uff09\u3002"}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{children:"Input: [[1,2], [1,3], [2,3]]\n  1\n / \\\n2 - 3\nOutput: [2,3]\n"})}),"\n",(0,d.jsx)(e.h3,{id:"\u9898\u89e3",children:"\u9898\u89e3"}),"\n",(0,d.jsx)(e.p,{children:"\u56e0\u4e3a\u9700\u8981\u5224\u65ad\u662f\u5426\u4e24\u4e2a\u8282\u70b9\u88ab\u91cd\u590d\u8fde\u901a\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5e76\u67e5\u96c6\u6765\u89e3\u51b3\u6b64\u7c7b\u95ee\u9898\u3002\u5177\u4f53\u5b9e\u73b0\u7b97\u6cd5\u5982\u4e0b\u6240\u793a\u3002"}),"\n",(0,d.jsxs)(r,{children:[(0,d.jsx)(t,{value:"cpp",label:"C++",children:(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-cpp",children:"class Solution {\n   public:\n    vector<int> findRedundantConnection(vector<vector<int>>& edges) {\n        n_ = edges.size();\n        id_ = vector<int>(n_);\n        depth_ = vector<int>(n_, 1);\n        for (int i = 0; i < n_; ++i) {\n            id_[i] = i;\n        }\n        for (auto& edge : edges) {\n            int i = edge[0], j = edge[1];\n            if (linked(i - 1, j - 1)) {\n                return vector<int>{i, j};\n            }\n            connect(i - 1, j - 1);\n        }\n        return vector<int>();\n    }\n\n   private:\n    int find(int i) {\n        // \u8def\u5f84\u538b\u7f29\u3002\n        while (i != id_[i]) {\n            id_[i] = id_[id_[i]];\n            i = id_[i];\n        }\n        return i;\n    }\n\n    void connect(int i, int j) {\n        i = find(i), j = find(j);\n        if (i == j) {\n            return;\n        }\n        // \u6309\u79e9\u5408\u5e76\u3002\n        if (depth_[i] <= depth_[j]) {\n            id_[i] = j;\n            depth_[j] = max(depth_[j], depth_[i] + 1);\n        } else {\n            id_[j] = i;\n            depth_[i] = max(depth_[i], depth_[j] + 1);\n        }\n    }\n\n    bool linked(int i, int j) { return find(i) == find(j); }\n\n    int n_;\n    vector<int> id_;\n    vector<int> depth_;\n};\n"})})}),(0,d.jsx)(t,{value:"py",label:"Python",children:(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-py",children:"class Solution:\n    def __init__(self):\n        self.n = 0\n        self.id = None\n        self.depth = None\n\n    def find(self, i: int) -> int:\n        # \u8def\u5f84\u538b\u7f29\u3002\n        while i != self.id[i]:\n            self.id[i] = self.id[self.id[i]]\n            i = self.id[i]\n        return i\n\n    def connect(self, i: int, j: int):\n        i = self.find(i)\n        j = self.find(j)\n        if i == j:\n            return\n        # \u6309\u79e9\u5408\u5e76\u3002\n        if self.depth[i] <= self.depth[j]:\n            self.id[i] = j\n            self.depth[j] = max(self.depth[j], self.depth[i] + 1)\n        else:\n            self.id[j] = i\n            self.depth[i] = max(self.depth[i], self.depth[j] + 1)\n\n    def linked(self, i: int, j: int) -> bool:\n        return self.find(i) == self.find(j)\n\n    def findRedundantConnection(self, edges: List[List[int]]) -> List[int]:\n        self.n = len(edges)\n        self.id = list(range(self.n))\n        self.depth = [1] * self.n\n        for i, j in edges:\n            if self.linked(i - 1, j - 1):\n                return [i, j]\n            self.connect(i - 1, j - 1)\n        return []\n"})})})]})]})}function f(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,d.jsx)(e,{...n,children:(0,d.jsx)(a,{...n})}):a(n)}function u(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}},8946:(n,e,i)=>{i.d(e,{A:()=>t});const t=i.p+"assets/images/15.1-998289baad97da9d58281ad30dc8523a.png"}}]);