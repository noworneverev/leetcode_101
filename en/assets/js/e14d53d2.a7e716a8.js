"use strict";(self.webpackChunkleetcode_101=self.webpackChunkleetcode_101||[]).push([[7407],{8958:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>c,frontMatter:()=>a,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"data-structures/10-7-deque","title":"10.7 Double-Ended Queue","description":"239. Sliding Window Maximum","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/10-data-structures/10-7-deque.mdx","sourceDirName":"10-data-structures","slug":"/data-structures/10-7-deque","permalink":"/leetcode_101/en/data-structures/10-7-deque","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":54,"frontMatter":{"sidebar_position":54},"sidebar":"tutorialSidebar","previous":{"title":"10.6 Priority Queue","permalink":"/leetcode_101/en/data-structures/10-6-priority-queue"},"next":{"title":"10.8 Hash Table","permalink":"/leetcode_101/en/data-structures/10-8-hash-table"}}');var s=i(4848),d=i(8453);const a={sidebar_position:54},r="10.7 Double-Ended Queue",o={},l=[{value:"239. Sliding Window Maximum",id:"239-sliding-window-maximum",level:2},{value:"Problem Description",id:"problem-description",level:3},{value:"Input and Output Example",id:"input-and-output-example",level:3},{value:"Solution Explanation",id:"solution-explanation",level:3}];function u(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,d.R)(),...e.components},{TabItem:i,Tabs:t}=n;return i||p("TabItem",!0),t||p("Tabs",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"107-double-ended-queue",children:"10.7 Double-Ended Queue"})}),"\n",(0,s.jsx)(n.h2,{id:"239-sliding-window-maximum",children:(0,s.jsx)(n.a,{href:"https://leetcode.com/problems/sliding-window-maximum/",children:"239. Sliding Window Maximum"})}),"\n",(0,s.jsx)(n.h3,{id:"problem-description",children:"Problem Description"}),"\n",(0,s.jsx)(n.p,{children:"Given an integer array and a sliding window size, find the maximum value in the sliding window at each step."}),"\n",(0,s.jsx)(n.h3,{id:"input-and-output-example",children:"Input and Output Example"}),"\n",(0,s.jsx)(n.p,{children:"The input consists of a one-dimensional integer array and an integer representing the sliding window size; the output is a one-dimensional integer array representing the maximum value within the window at each step."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Input: nums = [1,3,-1,-3,5,3,6,7], k = 3\nOutput: [3,3,5,5,6,7]\n"})}),"\n",(0,s.jsx)(n.p,{children:"For this example, the sliding window's maximum value at each position is as follows:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"    Window position        Max\n------------------------- -----\n[1  3  -1] -3  5  3  6  7   3\n 1 [3  -1  -3] 5  3  6  7   3\n 1  3 [-1  -3  5] 3  6  7   5\n 1  3  -1 [-3  5  3] 6  7   5\n 1  3  -1  -3 [5  3  6] 7   6\n 1  3  -1  -3  5 [3  6  7]  7\n"})}),"\n",(0,s.jsx)(n.h3,{id:"solution-explanation",children:"Solution Explanation"}),"\n",(0,s.jsx)(n.p,{children:"We can use a deque to manage the sliding window efficiently:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"As the window slides to the right, remove values from the deque's left end if they exit the window."}),"\n",(0,s.jsx)(n.li,{children:"Also, remove all elements from the deque's right end that are smaller than the new rightmost value in the window."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"This ensures that the deque's leftmost element is always the maximum value of the current window."}),"\n",(0,s.jsx)(n.p,{children:"Additionally, this approach can be considered an extension of a monotonic stack: the deque maintains a decreasing order from left to right to preserve the size relationship."}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)(i,{value:"cpp",label:"C++",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"vector<int> maxSlidingWindow(vector<int>& nums, int k) {\n    deque<int> dq;\n    vector<int> swm;\n    for (int i = 0; i < nums.size(); ++i) {\n        if (!dq.empty() && dq.front() == i - k) {\n            dq.pop_front();\n        }\n        while (!dq.empty() && nums[dq.back()] < nums[i]) {\n            dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >= k - 1) {\n            swm.push_back(nums[dq.front()]);\n        }\n    }\n    return swm;\n}\n"})})}),(0,s.jsx)(i,{value:"py",label:"Python",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"def maxSlidingWindow(nums: List[int], k: int) -> List[int]:\n    dq = collections.deque()\n    swm = []\n    for i, num in enumerate(nums):\n        if len(dq) > 0 and dq[0] == i - k:\n            dq.popleft()\n        while len(dq) > 0 and nums[dq[-1]] < num:\n            dq.pop()\n        dq.append(i)\n        if i >= k - 1:\n            swm.append(nums[dq[0]])\n    return swm\n"})})})]})]})}function c(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}function p(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);