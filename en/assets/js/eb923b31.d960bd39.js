"use strict";(self.webpackChunkleetcode_101=self.webpackChunkleetcode_101||[]).push([[8832],{6703:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"two-pointer-techniques/2-4-sliding-window","title":"2.4 Sliding Window","description":"76. Minimum Window Substring","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/2-two-pointer-techniques/2-4-sliding-window.mdx","sourceDirName":"2-two-pointer-techniques","slug":"/two-pointer-techniques/2-4-sliding-window","permalink":"/leetcode_101/en/two-pointer-techniques/2-4-sliding-window","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"sidebar_position":8},"sidebar":"tutorialSidebar","previous":{"title":"2.3 Merging Two Sorted Arrays","permalink":"/leetcode_101/en/two-pointer-techniques/2-3-merge-sorted-arrays"},"next":{"title":"2.5 Fast and Slow Pointers","permalink":"/leetcode_101/en/two-pointer-techniques/2-5-fast-slow-pointers"}}');var s=i(4848),r=i(8453);const o={sidebar_position:8},a="2.4 Sliding Window",l={},c=[{value:"76. Minimum Window Substring",id:"76-minimum-window-substring",level:2},{value:"Problem Description",id:"problem-description",level:3},{value:"Input and Output Example",id:"input-and-output-example",level:3},{value:"Solution Explanation",id:"solution-explanation",level:3}];function d(n){const e={a:"a",annotation:"annotation",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",math:"math",mi:"mi",mo:"mo",mrow:"mrow",p:"p",pre:"pre",semantics:"semantics",span:"span",...(0,r.R)(),...n.components},{TabItem:i,Tabs:t}=e;return i||m("TabItem",!0),t||m("Tabs",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"24-sliding-window",children:"2.4 Sliding Window"})}),"\n",(0,s.jsx)(e.h2,{id:"76-minimum-window-substring",children:(0,s.jsx)(e.a,{href:"https://leetcode.com/problems/minimum-window-substring/",children:"76. Minimum Window Substring"})}),"\n",(0,s.jsx)(e.h3,{id:"problem-description",children:"Problem Description"}),"\n",(0,s.jsxs)(e.p,{children:["Given two strings ",(0,s.jsx)(e.code,{children:"s"})," and ",(0,s.jsx)(e.code,{children:"t"}),", find the length of the shortest contiguous substring in ",(0,s.jsx)(e.code,{children:"s"})," that contains all characters of ",(0,s.jsx)(e.code,{children:"t"}),". The solution must have a time complexity of no more than ",(0,s.jsxs)(e.span,{className:"katex",children:[(0,s.jsx)(e.span,{className:"katex-mathml",children:(0,s.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,s.jsxs)(e.semantics,{children:[(0,s.jsxs)(e.mrow,{children:[(0,s.jsx)(e.mi,{children:"O"}),(0,s.jsx)(e.mo,{stretchy:"false",children:"("}),(0,s.jsx)(e.mi,{children:"n"}),(0,s.jsx)(e.mo,{stretchy:"false",children:")"})]}),(0,s.jsx)(e.annotation,{encoding:"application/x-tex",children:"O(n)"})]})})}),(0,s.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,s.jsxs)(e.span,{className:"base",children:[(0,s.jsx)(e.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,s.jsx)(e.span,{className:"mopen",children:"("}),(0,s.jsx)(e.span,{className:"mord mathnormal",children:"n"}),(0,s.jsx)(e.span,{className:"mclose",children:")"})]})})]}),"."]}),"\n",(0,s.jsx)(e.h3,{id:"input-and-output-example",children:"Input and Output Example"}),"\n",(0,s.jsxs)(e.p,{children:["The input consists of two strings ",(0,s.jsx)(e.code,{children:"s"})," and ",(0,s.jsx)(e.code,{children:"t"}),", and the output is a substring of ",(0,s.jsx)(e.code,{children:"s"}),". If no solution exists, return an empty string."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'Input: s = "ADOBECODEBANC", t = "ABC"\nOutput: "BANC"\n'})}),"\n",(0,s.jsxs)(e.p,{children:["In this example, the shortest substring in ",(0,s.jsx)(e.code,{children:"s"})," that contains one ",(0,s.jsx)(e.code,{children:"A"}),", one ",(0,s.jsx)(e.code,{children:"B"}),", and one ",(0,s.jsx)(e.code,{children:"C"}),' is "BANC".']}),"\n",(0,s.jsx)(e.h3,{id:"solution-explanation",children:"Solution Explanation"}),"\n",(0,s.jsxs)(e.p,{children:["This problem can be solved using the sliding window technique. Two pointers, ",(0,s.jsx)(e.code,{children:"l"})," and ",(0,s.jsx)(e.code,{children:"r"}),", both move from the leftmost to the rightmost position, with ",(0,s.jsx)(e.code,{children:"l"})," always positioned at or before ",(0,s.jsx)(e.code,{children:"r"}),". In the C++ solution, two arrays of length 128, ",(0,s.jsx)(e.code,{children:"valid"})," and ",(0,s.jsx)(e.code,{children:"freq"}),", are used to map characters (ASCII contains only 128 characters). The ",(0,s.jsx)(e.code,{children:"valid"})," array indicates whether a character exists in ",(0,s.jsx)(e.code,{children:"t"}),", and the ",(0,s.jsx)(e.code,{children:"freq"})," array indicates the number of characters in ",(0,s.jsx)(e.code,{children:"t"})," that are still missing in the sliding window of ",(0,s.jsx)(e.code,{children:"s"}),": a positive value indicates missing characters, while a negative value indicates surplus characters. In the Python solution, the ",(0,s.jsx)(e.code,{children:"Counter"})," data structure is used to simultaneously track characters in ",(0,s.jsx)(e.code,{children:"t"})," and their missing quantities (a dictionary can also be used instead)."]}),"\n",(0,s.jsxs)(e.p,{children:["Even though the solution contains a ",(0,s.jsx)(e.code,{children:"while"})," loop nested inside a ",(0,s.jsx)(e.code,{children:"for"})," loop, the ",(0,s.jsx)(e.code,{children:"while"})," loop moves the ",(0,s.jsx)(e.code,{children:"l"})," pointer from left to right only once, so the total time complexity remains ",(0,s.jsxs)(e.span,{className:"katex",children:[(0,s.jsx)(e.span,{className:"katex-mathml",children:(0,s.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,s.jsxs)(e.semantics,{children:[(0,s.jsxs)(e.mrow,{children:[(0,s.jsx)(e.mi,{children:"O"}),(0,s.jsx)(e.mo,{stretchy:"false",children:"("}),(0,s.jsx)(e.mi,{children:"n"}),(0,s.jsx)(e.mo,{stretchy:"false",children:")"})]}),(0,s.jsx)(e.annotation,{encoding:"application/x-tex",children:"O(n)"})]})})}),(0,s.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,s.jsxs)(e.span,{className:"base",children:[(0,s.jsx)(e.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,s.jsx)(e.span,{className:"mopen",children:"("}),(0,s.jsx)(e.span,{className:"mord mathnormal",children:"n"}),(0,s.jsx)(e.span,{className:"mclose",children:")"})]})})]}),"."]}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)(i,{value:"cpp",label:"C++",children:(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:"string minWindow(string s, string t) {\n    vector<bool> valid(128, false);\n    vector<int> freq(128, 0);\n    // Count characters in t.\n    for (int i = 0; i < t.length(); ++i) {\n        valid[t[i]] = true;\n        ++freq[t[i]];\n    }\n    // Move the sliding window and update statistics.\n    int count = 0;\n    int min_l = -1, min_length = -1;\n    for (int l = 0, r = 0; r < s.length(); ++r) {\n        if (!valid[s[r]]) {\n            continue;\n        }\n        // Add the character at position r to frequency stats and check if t's missing characters are filled.\n        if (--freq[s[r]] >= 0) {\n            ++count;\n        }\n        // If the sliding window contains all characters from t, try to move l to find the shortest substring.\n        while (count == t.length()) {\n            if (min_length == -1 || r - l + 1 < min_length) {\n                min_l = l;\n                min_length = r - l + 1;\n            }\n            // Remove the character at position l from stats and check if t's corresponding character is missing again.\n            if (valid[s[l]] && ++freq[s[l]] > 0) {\n                --count;\n            }\n            ++l;\n        }\n    }\n    return min_length == -1 ? \"\" : s.substr(min_l, min_length);\n}\n"})})}),(0,s.jsx)(i,{value:"py",label:"Python",children:(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-py",children:"def minWindow(s: str, t: str) -> str:\n    # Count characters in t. Equivalent to:\n    # freq = dict()\n    # for c in t:\n    #     freq[c] = freq.get(c, 0) + 1\n    freq = Counter(t)\n    # Move the sliding window and update statistics.\n    count = 0\n    min_l, min_length = None, None\n    l = 0\n    for r in range(len(s)):\n        if s[r] not in freq:\n            continue\n        # Add the character at position r to frequency stats and check if t's missing characters are filled.\n        freq[s[r]] -= 1\n        if freq[s[r]] >= 0:\n            count += 1\n        # If the sliding window contains all characters from t, try to move l to find the shortest substring.\n        while count == len(t):\n            if min_length is None or r - l + 1 < min_length:\n                min_l = l\n                min_length = r - l + 1\n            # Remove the character at position l from stats and check if t's corresponding character is missing again.\n            if s[l] in freq:\n                freq[s[l]] += 1\n                if freq[s[l]] > 0:\n                    count -= 1\n            l += 1\n    return \"\" if min_length is None else s[min_l: min_l + min_length]\n"})})})]})]})}function h(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(d,{...n})}):d(n)}function m(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);