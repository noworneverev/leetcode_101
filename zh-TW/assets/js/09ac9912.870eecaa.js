"use strict";(self.webpackChunkleetcode_101=self.webpackChunkleetcode_101||[]).push([[4789],{4349:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"advanced-data-structures/15-2-union-find","title":"15.2 \u4e26\u67e5\u96c6","description":"\u4e26\u67e5\u96c6\uff08union-find, disjoint set\uff09\u662f\u4e00\u7a2e\u7528\u65bc\u52d5\u614b\u9023\u901a\u6027\u554f\u984c\u7684\u6578\u64da\u7d50\u69cb\uff0c\u53ef\u4ee5\u9ad8\u6548\u5730\u5be6\u73fe\u52d5\u614b\u9023\u63a5\u5169\u500b\u9ede\uff0c\u4e26\u5feb\u901f\u5224\u65b7\u5169\u500b\u9ede\u662f\u5426\u9023\u901a\u3002\u5047\u8a2d\u6709 n \u500b\u7bc0\u9ede\uff0c\u6211\u5011\u521d\u59cb\u5316\u6642\u5c07\u6240\u6709\u7bc0\u9ede\u7684\u7236\u7bc0\u9ede\u8a2d\u70ba\u81ea\u8eab\uff1b\u6bcf\u6b21\u9700\u8981\u9023\u63a5\u7bc0\u9ede i \u548c j \u6642\uff0c\u53ef\u4ee5\u5c07\u79e9\u8f03\u5c0f\u4e00\u65b9\u7684\u7236\u7bc0\u9ede\u6a19\u8a18\u70ba\u53e6\u4e00\u65b9\uff08\u6309\u79e9\u5408\u4f75\uff09\uff1b\u6bcf\u6b21\u9700\u8981\u67e5\u8a62\u5169\u500b\u7bc0\u9ede\u662f\u5426\u76f8\u9023\u6642\uff0c\u53ef\u4ee5\u67e5\u627e i \u548c j \u7684\u7956\u5148\u662f\u5426\u76f8\u540c\uff0c\u4e26\u901a\u904e\u8def\u5f91\u58d3\u7e2e\u6e1b\u5c11\u7956\u5148\u5c64\u7d1a\uff0c\u5f9e\u800c\u52a0\u901f\u5f8c\u7e8c\u7684\u67e5\u8a62\u64cd\u4f5c\u3002","source":"@site/i18n/zh-TW/docusaurus-plugin-content-docs/current/15-advanced-data-structures/15-2-union-find.mdx","sourceDirName":"15-advanced-data-structures","slug":"/advanced-data-structures/15-2-union-find","permalink":"/leetcode_101/zh-TW/advanced-data-structures/15-2-union-find","draft":false,"unlisted":false,"editUrl":"https://github.com/noworneverev/leetcode_101/tree/master/leetcode_101/docs/15-advanced-data-structures/15-2-union-find.mdx","tags":[],"version":"current","sidebarPosition":76,"frontMatter":{"sidebar_position":76},"sidebar":"tutorialSidebar","previous":{"title":"15.1 \u5f15\u8a00","permalink":"/leetcode_101/zh-TW/advanced-data-structures/15-1-introduction"},"next":{"title":"15.3 \u8907\u5408\u8cc7\u6599\u7d50\u69cb","permalink":"/leetcode_101/zh-TW/advanced-data-structures/15-3-composite-data-structures"}}');var d=i(4848),s=i(8453);const r={sidebar_position:76},l="15.2 \u4e26\u67e5\u96c6",c={},o=[{value:"684. Redundant Connection",id:"684-redundant-connection",level:2},{value:"\u984c\u76ee\u63cf\u8ff0",id:"\u984c\u76ee\u63cf\u8ff0",level:3},{value:"\u8f38\u5165\u8f38\u51fa\u7bc4\u4f8b",id:"\u8f38\u5165\u8f38\u51fa\u7bc4\u4f8b",level:3},{value:"\u984c\u89e3",id:"\u984c\u89e3",level:3}];function a(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",p:"p",pre:"pre",...(0,s.R)(),...n.components},{TabItem:t,Tabs:r}=e;return t||f("TabItem",!0),r||f("Tabs",!0),(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(e.header,{children:(0,d.jsx)(e.h1,{id:"152-\u4e26\u67e5\u96c6",children:"15.2 \u4e26\u67e5\u96c6"})}),"\n",(0,d.jsxs)(e.p,{children:[(0,d.jsx)(e.code,{children:"\u4e26\u67e5\u96c6"}),"\uff08union-find, disjoint set\uff09\u662f\u4e00\u7a2e\u7528\u65bc\u52d5\u614b\u9023\u901a\u6027\u554f\u984c\u7684\u6578\u64da\u7d50\u69cb\uff0c\u53ef\u4ee5\u9ad8\u6548\u5730\u5be6\u73fe\u52d5\u614b\u9023\u63a5\u5169\u500b\u9ede\uff0c\u4e26\u5feb\u901f\u5224\u65b7\u5169\u500b\u9ede\u662f\u5426\u9023\u901a\u3002\u5047\u8a2d\u6709 n \u500b\u7bc0\u9ede\uff0c\u6211\u5011\u521d\u59cb\u5316\u6642\u5c07\u6240\u6709\u7bc0\u9ede\u7684\u7236\u7bc0\u9ede\u8a2d\u70ba\u81ea\u8eab\uff1b\u6bcf\u6b21\u9700\u8981\u9023\u63a5\u7bc0\u9ede i \u548c j \u6642\uff0c\u53ef\u4ee5\u5c07\u79e9\u8f03\u5c0f\u4e00\u65b9\u7684\u7236\u7bc0\u9ede\u6a19\u8a18\u70ba\u53e6\u4e00\u65b9\uff08\u6309\u79e9\u5408\u4f75\uff09\uff1b\u6bcf\u6b21\u9700\u8981\u67e5\u8a62\u5169\u500b\u7bc0\u9ede\u662f\u5426\u76f8\u9023\u6642\uff0c\u53ef\u4ee5\u67e5\u627e i \u548c j \u7684\u7956\u5148\u662f\u5426\u76f8\u540c\uff0c\u4e26\u901a\u904e\u8def\u5f91\u58d3\u7e2e\u6e1b\u5c11\u7956\u5148\u5c64\u7d1a\uff0c\u5f9e\u800c\u52a0\u901f\u5f8c\u7e8c\u7684\u67e5\u8a62\u64cd\u4f5c\u3002"]}),"\n",(0,d.jsxs)("figure",{children:[(0,d.jsx)("span",{style:{display:"block",width:"30%",margin:"0 auto"},children:(0,d.jsx)(e.p,{children:(0,d.jsx)(e.img,{src:i(2561).A+"",width:"206",height:"619"})})}),(0,d.jsx)("figcaption",{style:{textAlign:"center"},children:"\u5716 15.1: \u4e26\u67e5\u96c6\u7bc4\u4f8b\uff0c\u5176\u4e2d union \u64cd\u4f5c\u53ef\u4ee5\u5c07\u5169\u500b\u96c6\u5408\u6309\u79e9\u5408\u4f75\uff0cfind \u64cd\u4f5c\u53ef\u4ee5\u67e5\u627e\u7bc0\u9ede\u7684\u7956\u5148\u4e26\u58d3\u7e2e\u8def\u5f91\u3002"})]}),"\n",(0,d.jsx)(e.h2,{id:"684-redundant-connection",children:(0,d.jsx)(e.a,{href:"https://leetcode.com/problems/redundant-connection/",children:"684. Redundant Connection"})}),"\n",(0,d.jsx)(e.h3,{id:"\u984c\u76ee\u63cf\u8ff0",children:"\u984c\u76ee\u63cf\u8ff0"}),"\n",(0,d.jsx)(e.p,{children:"\u5728\u7121\u5411\u5716\u4e2d\u627e\u51fa\u4e00\u689d\u908a\uff0c\u79fb\u9664\u5f8c\u8a72\u5716\u53ef\u4ee5\u6210\u70ba\u4e00\u68f5\u6a39\uff08\u5373\u7121\u5411\u7121\u74b0\u5716\uff09\u3002\u5982\u679c\u6709\u591a\u500b\u89e3\uff0c\u8fd4\u56de\u539f\u9663\u5217\u4e2d\u4f4d\u7f6e\u6700\u9760\u5f8c\u7684\u90a3\u689d\u908a\u3002"}),"\n",(0,d.jsx)(e.h3,{id:"\u8f38\u5165\u8f38\u51fa\u7bc4\u4f8b",children:"\u8f38\u5165\u8f38\u51fa\u7bc4\u4f8b"}),"\n",(0,d.jsx)(e.p,{children:"\u8f38\u5165\u662f\u4e00\u500b\u4e8c\u7dad\u9663\u5217\uff0c\u8868\u793a\u6240\u6709\u7684\u908a\uff08\u5c0d\u61c9\u7684\u5169\u500b\u7bc0\u9ede\uff09\uff1b\u8f38\u51fa\u662f\u4e00\u500b\u4e00\u7dad\u9663\u5217\uff0c\u8868\u793a\u9700\u8981\u79fb\u9664\u7684\u908a\uff08\u5c0d\u61c9\u7684\u5169\u500b\u7bc0\u9ede\uff09\u3002"}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{children:"Input: [[1,2], [1,3], [2,3]]\n  1\n / \\\n2 - 3\nOutput: [2,3]\n"})}),"\n",(0,d.jsx)(e.h3,{id:"\u984c\u89e3",children:"\u984c\u89e3"}),"\n",(0,d.jsx)(e.p,{children:"\u7531\u65bc\u9700\u8981\u5224\u65b7\u662f\u5426\u5169\u500b\u7bc0\u9ede\u88ab\u91cd\u8907\u9023\u901a\uff0c\u6211\u5011\u53ef\u4ee5\u4f7f\u7528\u4e26\u67e5\u96c6\u4f86\u89e3\u6c7a\u6b64\u985e\u554f\u984c\u3002\u4ee5\u4e0b\u70ba\u5be6\u73fe\u7d30\u7bc0\uff1a"}),"\n",(0,d.jsxs)(r,{children:[(0,d.jsx)(t,{value:"cpp",label:"C++",children:(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-cpp",children:"class Solution {\n   public:\n    vector<int> findRedundantConnection(vector<vector<int>>& edges) {\n        n_ = edges.size();\n        id_ = vector<int>(n_);\n        depth_ = vector<int>(n_, 1);\n        for (int i = 0; i < n_; ++i) {\n            id_[i] = i;\n        }\n        for (auto& edge : edges) {\n            int i = edge[0], j = edge[1];\n            if (linked(i - 1, j - 1)) {\n                return vector<int>{i, j};\n            }\n            connect(i - 1, j - 1);\n        }\n        return vector<int>();\n    }\n\n   private:\n    int find(int i) {\n        // \u8def\u5f91\u58d3\u7e2e\u3002\n        while (i != id_[i]) {\n            id_[i] = id_[id_[i]];\n            i = id_[i];\n        }\n        return i;\n    }\n\n    void connect(int i, int j) {\n        i = find(i), j = find(j);\n        if (i == j) {\n            return;\n        }\n        // \u6309\u79e9\u5408\u4f75\u3002\n        if (depth_[i] <= depth_[j]) {\n            id_[i] = j;\n            depth_[j] = max(depth_[j], depth_[i] + 1);\n        } else {\n            id_[j] = i;\n            depth_[i] = max(depth_[i], depth_[j] + 1);\n        }\n    }\n\n    bool linked(int i, int j) { return find(i) == find(j); }\n\n    int n_;\n    vector<int> id_;\n    vector<int> depth_;\n};\n"})})}),(0,d.jsx)(t,{value:"py",label:"Python",children:(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-py",children:"class Solution:\n    def __init__(self):\n        self.n = 0\n        self.id = None\n        self.depth = None\n\n    def find(self, i: int) -> int:\n        # \u8def\u5f91\u58d3\u7e2e\u3002\n        while i != self.id[i]:\n            self.id[i] = self.id[self.id[i]]\n            i = self.id[i]\n        return i\n\n    def connect(self, i: int, j: int):\n        i = self.find(i)\n        j = self.find(j)\n        if i == j:\n            return\n        # \u6309\u79e9\u5408\u4f75\u3002\n        if self.depth[i] <= self.depth[j]:\n            self.id[i] = j\n            self.depth[j] = max(self.depth[j], self.depth[i] + 1)\n        else:\n            self.id[j] = i\n            self.depth[i] = max(self.depth[i], self.depth[j] + 1)\n\n    def linked(self, i: int, j: int) -> bool:\n        return self.find(i) == self.find(j)\n\n    def findRedundantConnection(self, edges: List[List[int]]) -> List[int]:\n        self.n = len(edges)\n        self.id = list(range(self.n))\n        self.depth = [1] * self.n\n        for i, j in edges:\n            if self.linked(i - 1, j - 1):\n                return [i, j]\n            self.connect(i - 1, j - 1)\n        return []\n"})})})]})]})}function u(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,d.jsx)(e,{...n,children:(0,d.jsx)(a,{...n})}):a(n)}function f(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}},2561:(n,e,i)=>{i.d(e,{A:()=>t});const t=i.p+"assets/images/15.1-998289baad97da9d58281ad30dc8523a.png"}}]);