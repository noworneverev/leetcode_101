"use strict";(self.webpackChunkleetcode_101=self.webpackChunkleetcode_101||[]).push([[7002],{353:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>c,frontMatter:()=>l,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"data-structures/10-6-priority-queue","title":"10.6 \u4f18\u5148\u961f\u5217","description":"\u4f18\u5148\u961f\u5217\uff08priority queue\uff09\u53ef\u4ee5\u5728 O(1) \u65f6\u95f4\u5185\u83b7\u5f97\u6700\u5927\u503c\uff0c\u5e76\u4e14\u53ef\u4ee5\u5728 O(log n) \u65f6\u95f4\u5185\u53d6\u51fa\u6700\u5927\u503c\u6216\u63d2\u5165\u4efb\u610f\u503c\u3002","source":"@site/docs/10-data-structures/10-6-priority-queue.mdx","sourceDirName":"10-data-structures","slug":"/data-structures/10-6-priority-queue","permalink":"/leetcode_101/zh-TW/data-structures/10-6-priority-queue","draft":false,"unlisted":false,"editUrl":"https://github.com/noworneverev/leetcode_101/tree/master/leetcode_101/docs/10-data-structures/10-6-priority-queue.mdx","tags":[],"version":"current","sidebarPosition":53,"frontMatter":{"sidebar_position":53},"sidebar":"tutorialSidebar","previous":{"title":"10.5 \u5355\u8c03\u6808","permalink":"/leetcode_101/zh-TW/data-structures/10-5-monotonic-stack"},"next":{"title":"10.7 \u53cc\u7aef\u961f\u5217","permalink":"/leetcode_101/zh-TW/data-structures/10-7-deque"}}');var p=s(4848),t=s(8453);const l={sidebar_position:53},r="10.6 \u4f18\u5148\u961f\u5217",o={},d=[{value:"23. Merge k Sorted Lists",id:"23-merge-k-sorted-lists",level:2},{value:"\u9898\u76ee\u63cf\u8ff0",id:"\u9898\u76ee\u63cf\u8ff0",level:3},{value:"\u8f93\u5165\u8f93\u51fa\u6837\u4f8b",id:"\u8f93\u5165\u8f93\u51fa\u6837\u4f8b",level:3},{value:"\u9898\u89e3",id:"\u9898\u89e3",level:3},{value:"218. The Skyline Problem",id:"218-the-skyline-problem",level:2},{value:"\u9898\u76ee\u63cf\u8ff0",id:"\u9898\u76ee\u63cf\u8ff0-1",level:3},{value:"\u8f93\u5165\u8f93\u51fa\u6837\u4f8b",id:"\u8f93\u5165\u8f93\u51fa\u6837\u4f8b-1",level:3},{value:"\u9898\u89e3",id:"\u9898\u89e3-1",level:3}];function a(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",p:"p",pre:"pre",...(0,t.R)(),...e.components},{TabItem:i,Tabs:l}=n;return i||h("TabItem",!0),l||h("Tabs",!0),(0,p.jsxs)(p.Fragment,{children:[(0,p.jsx)(n.header,{children:(0,p.jsx)(n.h1,{id:"106-\u4f18\u5148\u961f\u5217",children:"10.6 \u4f18\u5148\u961f\u5217"})}),"\n",(0,p.jsxs)(n.p,{children:[(0,p.jsx)(n.code,{children:"\u4f18\u5148\u961f\u5217"}),"\uff08priority queue\uff09\u53ef\u4ee5\u5728 O(1) \u65f6\u95f4\u5185\u83b7\u5f97\u6700\u5927\u503c\uff0c\u5e76\u4e14\u53ef\u4ee5\u5728 O(log n) \u65f6\u95f4\u5185\u53d6\u51fa\u6700\u5927\u503c\u6216\u63d2\u5165\u4efb\u610f\u503c\u3002"]}),"\n",(0,p.jsxs)("figure",{children:[(0,p.jsx)("span",{style:{display:"block",width:"50%",margin:"0 auto"},children:(0,p.jsx)(n.p,{children:(0,p.jsx)(n.img,{src:s(650).A+"",width:"1200",height:"889"})})}),(0,p.jsx)("figcaption",{style:{textAlign:"center"},children:"\u56fe 10.2: \uff08\u6700\u5927\uff09\u5806\uff0c\u7ef4\u62a4\u7684\u662f\u6570\u636e\u7ed3\u6784\u4e2d\u7684\u5927\u4e8e\u5173\u7cfb"})]}),"\n",(0,p.jsx)(n.p,{children:"\u4f18\u5148\u961f\u5217\u5e38\u5e38\u7528\u5806\uff08heap\uff09\u6765\u5b9e\u73b0\u3002\u5806\u662f\u4e00\u4e2a\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u5176\u6bcf\u4e2a\u8282\u70b9\u7684\u503c\u603b\u662f\u5927\u4e8e\u7b49\u4e8e\u5b50\u8282\u70b9\u7684\u503c\u3002\u5b9e\u9645\u5b9e\u73b0\u5806\u65f6\uff0c\u6211\u4eec\u901a\u5e38\u7528\u4e00\u4e2a\u6570\u7ec4\u800c\u4e0d\u662f\u7528\u6307\u9488\u5efa\u7acb\u4e00\u4e2a\u6811\u3002\u8fd9\u662f\u56e0\u4e3a\u5806\u662f\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u6240\u4ee5\u7528\u6570\u7ec4\u8868\u793a\u65f6\uff0c\u4f4d\u7f6e i \u7684\u8282\u70b9\u7684\u7236\u8282\u70b9\u4f4d\u7f6e\u4e00\u5b9a\u4e3a (i-1)/2\uff0c\u800c\u5b83\u7684\u4e24\u4e2a\u5b50\u8282\u70b9\u7684\u4f4d\u7f6e\u53c8\u4e00\u5b9a\u5206\u522b\u4e3a 2i+1 \u548c 2i+2\u3002"}),"\n",(0,p.jsx)(n.p,{children:"\u4ee5\u4e0b\u662f\u5806\u7684\u5b9e\u73b0\u65b9\u6cd5\uff0c\u5176\u4e2d\u6700\u6838\u5fc3\u7684\u4e24\u4e2a\u64cd\u4f5c\u662f\u4e0a\u6d6e\u548c\u4e0b\u6c89\uff1a\u5982\u679c\u4e00\u4e2a\u8282\u70b9\u6bd4\u7236\u8282\u70b9\u5927\uff0c\u90a3\u4e48\u9700\u8981\u4ea4\u6362\u8fd9\u4e2a\u4e24\u4e2a\u8282\u70b9\uff1b\u4ea4\u6362\u540e\u8fd8\u53ef\u80fd\u6bd4\u5b83\u65b0\u7684\u7236\u8282\u70b9\u5927\uff0c\u56e0\u6b64\u9700\u8981\u4e0d\u65ad\u5730\u8fdb\u884c\u6bd4\u8f83\u548c\u4ea4\u6362\u64cd\u4f5c\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u4e0a\u6d6e\uff1b\u7c7b\u4f3c\u5730\uff0c\u5982\u679c\u4e00\u4e2a\u8282\u70b9\u6bd4\u7236\u8282\u5c0f\uff0c\u4e5f\u9700\u8981\u4e0d\u65ad\u5730\u5411\u4e0b\u8fdb\u884c\u6bd4\u8f83\u548c\u4ea4\u6362\u64cd\u4f5c\u6211\u4eec\u79f0\u4e4b\u4e3a\u4e0b\u6c89\u3002\u5982\u679c\u4e00\u4e2a\u8282\u70b9\u6709\u4e24\u4e2a\u5b50\u8282\u70b9\uff0c\u6211\u4eec\u603b\u662f\u4ea4\u6362\u6700\u5927\u7684\u5b50\u8282\u70b9\u3002"}),"\n",(0,p.jsxs)(l,{children:[(0,p.jsx)(i,{value:"cpp",label:"C++",children:(0,p.jsx)(n.pre,{children:(0,p.jsx)(n.code,{className:"language-cpp",children:"class Heap {\n   public:\n    Heap() {}\n    // \u4e0a\u6d6e\u3002\n    void swim(int pos) {\n        int next_pos = (pos - 1) / 2;\n        while (pos > 0 && heap_[next_pos] < heap_[pos]) {\n            swap(heap_[next_pos], heap_[pos]);\n            pos = next_pos;\n            next_pos = (pos - 1) / 2;\n        }\n    }\n    // \u4e0b\u6c89\u3002\n    void sink(int pos) {\n        int n = heap_.size();\n        int next_pos = 2 * pos + 1;\n        while (next_pos < n) {\n            if (next_pos < n - 1 && heap_[next_pos] < heap_[next_pos + 1]) {\n                ++next_pos;\n            }\n            if (heap_[pos] >= heap_[next_pos]) {\n                break;\n            }\n            swap(heap_[next_pos], heap_[pos]);\n            pos = next_pos;\n            next_pos = 2 * pos + 1;\n        }\n    }\n    // \u63d2\u5165\u4efb\u610f\u503c\uff1a\u628a\u65b0\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\u4e00\u4f4d\uff0c\u7136\u540e\u4e0a\u6d6e\u3002\n    void push(int k) {\n        heap_.push_back(k);\n        swim(heap_.size() - 1);\n    }\n    // \u5220\u9664\u6700\u5927\u503c\uff1a\u628a\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u632a\u5230\u5f00\u5934\uff0c\u7136\u540e\u4e0b\u6c89\u3002\n    void pop() {\n        heap_[0] = heap_.back();\n        heap_.pop_back();\n        sink(0);\n    }\n    // \u83b7\u5f97\u6700\u5927\u503c\u3002\n    int top() { return heap_[0]; }\n\n   private:\n    vector<int> heap_;\n};\n"})})}),(0,p.jsx)(i,{value:"py",label:"Python",children:(0,p.jsx)(n.pre,{children:(0,p.jsx)(n.code,{className:"language-py",children:"class Heap:\n    def __init__(self):\n        self.heap = []\n\n    # \u4e0a\u6d6e\u3002\n    def swim(self, pos: int):\n        next_pos = (pos - 1) // 2\n        while pos > 0 and self.heap[next_pos] < self.heap[pos]:\n            self.heap[next_pos], self.heap[pos] = self.heap[pos], self.heap[next_pos]\n            pos = next_pos\n            next_pos = (pos - 1) // 2\n\n    # \u4e0b\u6c89\u3002\n    def sink(self, pos: int):\n        n = len(self.heap)\n        next_pos = 2 * pos + 1\n        while next_pos < n:\n            if next_pos < n - 1 and self.heap[next_pos] < self.heap[next_pos + 1]:\n                next_pos += 1\n            if self.heap[pos] >= self.heap[next_pos]:\n                break\n            self.heap[next_pos], self.heap[pos] = self.heap[pos], self.heap[next_pos]\n            pos = next_pos\n            next_pos = 2 * pos + 1\n\n    # \u63d2\u5165\u4efb\u610f\u503c\uff1a\u628a\u65b0\u7684\u6570\u5b57\u653e\u5728\u6700\u540e\u4e00\u4f4d\uff0c\u7136\u540e\u4e0a\u6d6e\u3002\n    def push(self, k: int):\n        self.heap.append(k)\n        self.swim(len(self.heap) - 1)\n\n    # \u5220\u9664\u6700\u5927\u503c\uff1a\u628a\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u632a\u5230\u5f00\u5934\uff0c\u7136\u540e\u4e0b\u6c89\u3002\n    def pop(self):\n        self.heap[0] = self.heap.pop()\n        self.sink(0)\n\n    # \u83b7\u5f97\u6700\u5927\u503c\u3002\n    def top(self) -> int:\n        return self.heap[0]\n\n"})})})]}),"\n",(0,p.jsx)(n.p,{children:"\u901a\u8fc7\u5c06\u7b97\u6cd5\u4e2d\u7684\u5927\u4e8e\u53f7\u548c\u5c0f\u4e8e\u53f7\u4e92\u6362\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u5feb\u901f\u83b7\u5f97\u6700\u5c0f\u503c\u7684\u4f18\u5148\u961f\u5217\u3002"}),"\n",(0,p.jsx)(n.h2,{id:"23-merge-k-sorted-lists",children:(0,p.jsx)(n.a,{href:"https://leetcode.com/problems/merge-k-sorted-lists/",children:"23. Merge k Sorted Lists"})}),"\n",(0,p.jsx)(n.h3,{id:"\u9898\u76ee\u63cf\u8ff0",children:"\u9898\u76ee\u63cf\u8ff0"}),"\n",(0,p.jsx)(n.p,{children:"\u7ed9\u5b9a k \u4e2a\u589e\u5e8f\u7684\u94fe\u8868\uff0c\u8bd5\u5c06\u5b83\u4eec\u5408\u5e76\u6210\u4e00\u6761\u589e\u5e8f\u94fe\u8868\u3002"}),"\n",(0,p.jsx)(n.h3,{id:"\u8f93\u5165\u8f93\u51fa\u6837\u4f8b",children:"\u8f93\u5165\u8f93\u51fa\u6837\u4f8b"}),"\n",(0,p.jsx)(n.p,{children:"\u8f93\u5165\u662f\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4\uff0c\u6bcf\u4e2a\u4f4d\u7f6e\u5b58\u50a8\u94fe\u8868\u7684\u5934\u8282\u70b9\uff1b\u8f93\u51fa\u662f\u4e00\u6761\u94fe\u8868\u3002"}),"\n",(0,p.jsx)(n.pre,{children:(0,p.jsx)(n.code,{children:"Input:\n[1->4->5,\n 1->3->4,\n 2->6]\nOutput: 1->1->2->3->4->4->5->6\n"})}),"\n",(0,p.jsx)(n.h3,{id:"\u9898\u89e3",children:"\u9898\u89e3"}),"\n",(0,p.jsx)(n.p,{children:"\u672c\u9898\u53ef\u4ee5\u6709\u5f88\u591a\u4e2d\u89e3\u6cd5\uff0c\u6bd4\u5982\u7c7b\u4f3c\u4e8e\u5f52\u5e76\u6392\u5e8f\u8fdb\u884c\u4e24\u4e24\u5408\u5e76\u3002\u6211\u4eec\u8fd9\u91cc\u5c55\u793a\u4e00\u4e2a\u901f\u5ea6\u6bd4\u8f83\u5feb\u7684\u65b9\u6cd5\uff0c\u5373\u628a\u6240\u6709\u7684\u94fe\u8868\u5b58\u50a8\u5728\u4e00\u4e2a\u4f18\u5148\u961f\u5217\u4e2d\uff0c\u6bcf\u6b21\u63d0\u53d6\u6240\u6709\u94fe\u8868\u5934\u90e8\u8282\u70b9\u503c\u6700\u5c0f\u7684\u90a3\u4e2a\u8282\u70b9\uff0c\u76f4\u5230\u6240\u6709\u94fe\u8868\u90fd\u88ab\u63d0\u53d6\u5b8c\u4e3a\u6b62\u3002"}),"\n",(0,p.jsx)(n.p,{children:"\u56e0\u4e3a C++ priority_queue \u7684\u6bd4\u8f83\u51fd\u6570\u9ed8\u8ba4\u662f\u5bf9\u6700\u5927\u5806\u8fdb\u884c\u6bd4\u8f83\u5e76\u7ef4\u6301\u9012\u589e\u5173\u7cfb\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8981\u83b7\u53d6\u6700\u5c0f\u7684\u8282\u70b9\u503c\uff0c\u6211\u4eec\u5219\u9700\u8981\u5b9e\u73b0\u4e00\u4e2a\u6700\u5c0f\u5806\u3002\u56e0\u6b64\u5806\u7684\u6bd4\u8f83\u51fd\u6570\u5e94\u8be5\u7ef4\u6301\u9012\u51cf\u5173\u7cfb\uff0c\u5373 lambda \u51fd\u6570\u4e2d\u8fd4\u56de\u65f6\u7528\u5927\u4e8e\u53f7\u800c\u4e0d\u662f\u9012\u589e\u5173\u7cfb\u65f6\u7684\u5c0f\u4e8e\u53f7\u8fdb\u884c\u6bd4\u8f83\u3002"}),"\n",(0,p.jsxs)(l,{children:[(0,p.jsx)(i,{value:"cpp",label:"C++",children:(0,p.jsx)(n.pre,{children:(0,p.jsx)(n.code,{className:"language-cpp",children:"ListNode* mergeKLists(vector<ListNode*>& lists) {\n    auto comp = [](ListNode* l1, ListNode* l2) { return l1->val > l2->val; };\n    priority_queue<ListNode*, vector<ListNode*>, decltype(comp)> pq;\n    for (ListNode* l : lists) {\n        if (l) {\n            pq.push(l);\n        }\n    }\n    ListNode *dummy = new ListNode(0), *cur = dummy;\n    while (!pq.empty()) {\n        cur->next = pq.top();\n        pq.pop();\n        cur = cur->next;\n        if (cur->next) {\n            pq.push(cur->next);\n        }\n    }\n    return dummy->next;\n}\n"})})}),(0,p.jsx)(i,{value:"py",label:"Python",children:(0,p.jsx)(n.pre,{children:(0,p.jsx)(n.code,{className:"language-py",children:"def mergeKLists(lists: List[Optional[ListNode]]) -> Optional[ListNode]:\n    pq = []\n    for idx, l in enumerate(lists):\n        if l is not None:\n            # ListNode\u4e0d\u53ef\u88ab\u54c8\u5e0c\uff0c\u6240\u4ee5\u8fd9\u91cc\u6211\u4eec\u76f4\u63a5\u8bb0\u5f55\u5b83\u5728lists\u4e2d\u7684\u4f4d\u7f6e\u3002\n            pq.append((l.val, idx))\n    heapq.heapify(pq)\n    \n    dummy = ListNode()\n    cur = dummy\n    \n    while len(pq) > 0:\n        _, l_idx = heapq.heappop(pq)\n        cur.next = lists[l_idx]\n        cur = cur.next\n        if cur.next is not None:\n            lists[l_idx] = lists[l_idx].next\n            heapq.heappush(pq, (cur.next.val, l_idx))\n    \n    return dummy.next\n\n"})})})]}),"\n",(0,p.jsx)(n.h2,{id:"218-the-skyline-problem",children:(0,p.jsx)(n.a,{href:"https://leetcode.com/problems/the-skyline-problem/",children:"218. The Skyline Problem"})}),"\n",(0,p.jsx)(n.h3,{id:"\u9898\u76ee\u63cf\u8ff0-1",children:"\u9898\u76ee\u63cf\u8ff0"}),"\n",(0,p.jsx)(n.p,{children:"\u7ed9\u5b9a\u5efa\u7b51\u7269\u7684\u8d77\u6b62\u4f4d\u7f6e\u548c\u9ad8\u5ea6\uff0c\u8fd4\u56de\u5efa\u7b51\u7269\u8f6e\u5ed3\uff08\u5929\u9645\u7ebf\uff09\u7684\u62d0\u70b9\u3002"}),"\n",(0,p.jsx)(n.h3,{id:"\u8f93\u5165\u8f93\u51fa\u6837\u4f8b-1",children:"\u8f93\u5165\u8f93\u51fa\u6837\u4f8b"}),"\n",(0,p.jsx)(n.p,{children:"\u8f93\u5165\u662f\u4e00\u4e2a\u4e8c\u7ef4\u6574\u6570\u6570\u7ec4\uff0c\u8868\u793a\u6bcf\u4e2a\u5efa\u7b51\u7269\u7684 [\u5de6\u7aef, \u53f3\u7aef, \u9ad8\u5ea6]\uff1b\u8f93\u51fa\u662f\u4e00\u4e2a\u4e8c\u7ef4\u6574\u6570\u6570\u7ec4\uff0c\u8868\u793a\u6bcf\u4e2a\u62d0\u70b9\u7684\u6a2a\u7eb5\u5750\u6807\u3002"}),"\n",(0,p.jsxs)("figure",{children:[(0,p.jsx)("span",{style:{display:"block",width:"90%",margin:"0 auto"},children:(0,p.jsx)(n.p,{children:(0,p.jsx)(n.img,{src:s(9507).A+"",width:"2000",height:"800"})})}),(0,p.jsx)("figcaption",{style:{textAlign:"center"},children:"\u56fe 10.3: \u9898\u76ee 218 - \u5efa\u7b51\u7269\u53ca\u5176\u5929\u9645\u7ebf\u6837\u4f8b"})]}),"\n",(0,p.jsx)(n.pre,{children:(0,p.jsx)(n.code,{children:"Input: [[2 9 10], [3 7 15], [5 12 12], [15 20 10], [19 24 8]]\nOutput: [[2 10], [3 15], [7 12], [12 0], [15 10], [20 8], [24, 0]]\n"})}),"\n",(0,p.jsx)(n.h3,{id:"\u9898\u89e3-1",children:"\u9898\u89e3"}),"\n",(0,p.jsx)(n.p,{children:"\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4f18\u5148\u961f\u5217\u50a8\u5b58\u6bcf\u4e2a\u5efa\u7b51\u7269\u7684\u9ad8\u5ea6\u548c\u53f3\u7aef\uff08\u8fd9\u91cc\u4f7f\u7528 pair\uff0c\u5176\u9ed8\u8ba4\u6bd4\u8f83\u51fd\u6570\u662f\u5148\u6bd4\u8f83\u7b2c\u4e00\u4e2a\u503c\uff0c\u5982\u679c\u76f8\u7b49\u5219\u518d\u6bd4\u8f83\u7b2c\u4e8c\u4e2a\u503c\uff09\uff0c\u4ece\u800c\u83b7\u53d6\u76ee\u524d\u4f1a\u62d4\u9ad8\u5929\u9645\u7ebf\u3001\u4e14\u59a8\u788d\u5230\u524d\u4e00\u4e2a\u5efa\u7b51\u7269\uff08\u7684\u53f3\u7aef\u7aef\u70b9\uff09\u7684\u4e0b\u4e00\u4e2a\u5efa\u7b51\u7269\u3002"}),"\n",(0,p.jsx)(n.p,{children:"\u56e0\u4e3a Python \u4e2d heapq \u662f\u6700\u5c0f\u5806\uff0c\u6240\u4ee5\u6211\u4eec\u5728\u5b58\u503c\u7684\u65f6\u5019\u53ef\u4ee5\u5b58\u8d1f\u503c\uff0c\u8fd9\u6837\u5c31\u53d8\u6210\u4e86\u6700\u5927\u5806\u3002"}),"\n",(0,p.jsx)(n.p,{children:"\u8fd9\u9053\u9898\u6bd4\u8f83\u590d\u6742\uff0c\u5982\u679c\u5b9e\u5728\u96be\u4ee5\u7406\u89e3\uff0c\u5efa\u8bae\u8bfb\u8005\u6682\u65f6\u8df3\u8fc7\u6b64\u9898\uff0c\u6216\u8005\u5728\u7eb8\u4e0a\u4e3e\u4f8b\u5b50\u753b\u4e00\u753b\u3002"}),"\n",(0,p.jsxs)(l,{children:[(0,p.jsx)(i,{value:"cpp",label:"C++",children:(0,p.jsx)(n.pre,{children:(0,p.jsx)(n.code,{className:"language-cpp",children:"vector<vector<int>> getSkyline(vector<vector<int>>& buildings) {\n    vector<vector<int>> skyline;\n    priority_queue<pair<int, int>> pq;  // <\u9ad8\u5ea6, \u53f3\u7aef>\n    int i = 0, n = buildings.size();\n    int cur_x, cur_h;\n    while (i < n || !pq.empty()) {\n        if (pq.empty() || (i < n && buildings[i][0] <= pq.top().second)) {\n            cur_x = buildings[i][0];\n            while (i < n && cur_x == buildings[i][0]) {\n                pq.emplace(buildings[i][2], buildings[i][1]);\n                ++i;\n            }\n        } else {\n            cur_x = pq.top().second;\n            while (!pq.empty() && cur_x >= pq.top().second) {\n                pq.pop();\n            }\n        }\n        cur_h = pq.empty() ? 0 : pq.top().first;\n        if (skyline.empty() || cur_h != skyline.back()[1]) {\n            skyline.push_back({cur_x, cur_h});\n        }\n    }\n    return skyline;\n}\n"})})}),(0,p.jsx)(i,{value:"py",label:"Python",children:(0,p.jsx)(n.pre,{children:(0,p.jsx)(n.code,{className:"language-py",children:"def getSkyline(buildings: List[List[int]]) -> List[List[int]]:\n    skyline = []\n    pq = []  # <\u8d1f\u9ad8\u5ea6\uff0c\u53f3\u7aef>\n    heapq.heapify(pq)\n    i, n = 0, len(buildings)\n    \n    while i < n or len(pq) > 0:\n        if len(pq) == 0 or (i < n and buildings[i][0] <= pq[0][1]):\n            cur_x = buildings[i][0]\n            while i < n and cur_x == buildings[i][0]:\n                heapq.heappush(pq, (-buildings[i][2], buildings[i][1]))\n                i += 1\n        else:\n            cur_x = pq[0][1]\n            while len(pq) > 0 and cur_x >= pq[0][1]:\n                heapq.heappop(pq)\n        \n        cur_h = -pq[0][0] if len(pq) > 0 else 0\n        if len(skyline) == 0 or cur_h != skyline[-1][1]:\n            skyline.append([cur_x, cur_h])\n    \n    return skyline\n\n"})})})]})]})}function c(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,p.jsx)(n,{...e,children:(0,p.jsx)(a,{...e})}):a(e)}function h(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},650:(e,n,s)=>{s.d(n,{A:()=>i});const i=s.p+"assets/images/10.2-a73e084fc742289b88c9fd1d46e997df.png"},9507:(e,n,s)=>{s.d(n,{A:()=>i});const i=s.p+"assets/images/10.3-016f1aab3e24ba87beaf329ee6c2a4a7.png"}}]);