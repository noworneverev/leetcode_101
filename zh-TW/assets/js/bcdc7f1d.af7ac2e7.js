"use strict";(self.webpackChunkleetcode_101=self.webpackChunkleetcode_101||[]).push([[5393],{7948:(e,n,d)=>{d.r(n),d.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>a});const l=JSON.parse('{"id":"linked-lists/12-2-basic-linked-list-operations","title":"12.2 \u94fe\u8868\u7684\u57fa\u672c\u64cd\u4f5c","description":"206. Reverse Linked List","source":"@site/i18n/zh-TW/docusaurus-plugin-content-docs/current/12-linked-lists/12-2-basic-linked-list-operations.mdx","sourceDirName":"12-linked-lists","slug":"/linked-lists/12-2-basic-linked-list-operations","permalink":"/leetcode_101/zh-TW/linked-lists/12-2-basic-linked-list-operations","draft":false,"unlisted":false,"editUrl":"https://github.com/noworneverev/leetcode_101/tree/master/leetcode_101/docs/12-linked-lists/12-2-basic-linked-list-operations.mdx","tags":[],"version":"current","sidebarPosition":65,"frontMatter":{"sidebar_position":65},"sidebar":"tutorialSidebar","previous":{"title":"12.1 \u8cc7\u6599\u7d50\u69cb\u4ecb\u7d39","permalink":"/leetcode_101/zh-TW/linked-lists/12-1-data-structure-introduction"},"next":{"title":"12.3 \u5176\u4ed6\u93c8\u7d50\u4e32\u5217\u6280\u5de7","permalink":"/leetcode_101/zh-TW/linked-lists/12-3-other-linked-list-techniques"}}');var t=d(4848),s=d(8453);const i={sidebar_position:65},r="12.2 \u94fe\u8868\u7684\u57fa\u672c\u64cd\u4f5c",o={},a=[{value:"206. Reverse Linked List",id:"206-reverse-linked-list",level:2},{value:"\u984c\u76ee\u63cf\u8ff0",id:"\u984c\u76ee\u63cf\u8ff0",level:3},{value:"\u8f38\u5165\u8f38\u51fa\u7bc4\u4f8b",id:"\u8f38\u5165\u8f38\u51fa\u7bc4\u4f8b",level:3},{value:"\u984c\u89e3",id:"\u984c\u89e3",level:3},{value:"21. Merge Two Sorted Lists",id:"21-merge-two-sorted-lists",level:2},{value:"\u984c\u76ee\u63cf\u8ff0",id:"\u984c\u76ee\u63cf\u8ff0-1",level:3},{value:"\u8f38\u5165\u8f38\u51fa\u7bc4\u4f8b",id:"\u8f38\u5165\u8f38\u51fa\u7bc4\u4f8b-1",level:3},{value:"\u984c\u89e3",id:"\u984c\u89e3-1",level:3},{value:"24. Swap Nodes in Pairs",id:"24-swap-nodes-in-pairs",level:2},{value:"\u984c\u76ee\u63cf\u8ff0",id:"\u984c\u76ee\u63cf\u8ff0-2",level:3},{value:"\u8f38\u5165\u8f38\u51fa\u7bc4\u4f8b",id:"\u8f38\u5165\u8f38\u51fa\u7bc4\u4f8b-2",level:3},{value:"\u984c\u89e3",id:"\u984c\u89e3-2",level:3}];function h(e){const n={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components},{TabItem:d,Tabs:l}=n;return d||x("TabItem",!0),l||x("Tabs",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"122-\u94fe\u8868\u7684\u57fa\u672c\u64cd\u4f5c",children:"12.2 \u94fe\u8868\u7684\u57fa\u672c\u64cd\u4f5c"})}),"\n",(0,t.jsx)(n.h2,{id:"206-reverse-linked-list",children:(0,t.jsx)(n.a,{href:"https://leetcode.com/problems/reverse-linked-list/",children:"206. Reverse Linked List"})}),"\n",(0,t.jsx)(n.h3,{id:"\u984c\u76ee\u63cf\u8ff0",children:"\u984c\u76ee\u63cf\u8ff0"}),"\n",(0,t.jsx)(n.p,{children:"\u7ffb\u8f49\u4e00\u500b\u93c8\u7d50\u4e32\u5217\u3002"}),"\n",(0,t.jsx)(n.h3,{id:"\u8f38\u5165\u8f38\u51fa\u7bc4\u4f8b",children:"\u8f38\u5165\u8f38\u51fa\u7bc4\u4f8b"}),"\n",(0,t.jsx)(n.p,{children:"\u8f38\u5165\u4e00\u500b\u93c8\u7d50\u4e32\u5217\uff0c\u8f38\u51fa\u8a72\u93c8\u7d50\u4e32\u5217\u7ffb\u8f49\u5f8c\u7684\u7d50\u679c\u3002"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Input: 1->2->3->4->5->nullptr\nOutput: 5->4->3->2->1->nullptr\n"})}),"\n",(0,t.jsx)(n.h3,{id:"\u984c\u89e3",children:"\u984c\u89e3"}),"\n",(0,t.jsx)(n.p,{children:"\u93c8\u7d50\u4e32\u5217\u7ffb\u8f49\u662f\u975e\u5e38\u57fa\u790e\u4e5f\u5fc5\u9808\u638c\u63e1\u7684\u6280\u80fd\u3002\u6211\u5011\u63d0\u4f9b\u4e86\u5169\u7a2e\u5beb\u6cd5\u2014\u2014\u905e\u8ff4\u548c\u975e\u905e\u8ff4\u3002\u5efa\u8b70\u540c\u6642\u638c\u63e1\u9019\u5169\u7a2e\u5beb\u6cd5\u3002"}),"\n",(0,t.jsx)(n.p,{children:"\u905e\u8ff4\u7684\u5beb\u6cd5\u70ba\uff1a"}),"\n",(0,t.jsxs)(l,{children:[(0,t.jsx)(d,{value:"cpp",label:"C++",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"ListNode* reverseList(ListNode* head, ListNode* head_prev = nullptr) {\n    if (head == nullptr) {\n        return head_prev;\n    }\n    ListNode* head_next = head->next;\n    head->next = head_prev;\n    return reverseList(head_next, head);\n}\n"})})}),(0,t.jsx)(d,{value:"py",label:"Python",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-py",children:"def reverseList(\n    head: Optional[ListNode], head_prev: Optional[ListNode] = None\n) -> Optional[ListNode]:\n    if head is None:\n        return head_prev\n    head_next = head.next\n    head.next = head_prev\n    return reverseList(head_next, head)\n"})})})]}),"\n",(0,t.jsx)(n.p,{children:"\u975e\u905e\u8ff4\u7684\u5beb\u6cd5\u70ba\uff1a"}),"\n",(0,t.jsxs)(l,{children:[(0,t.jsx)(d,{value:"cpp",label:"C++",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"ListNode* reverseList(ListNode* head) {\n    ListNode *head_prev = nullptr, *head_next;\n    while (head) {\n        head_next = head->next;\n        head->next = head_prev;\n        head_prev = head;\n        head = head_next;\n    }\n    return head_prev;\n}\n"})})}),(0,t.jsx)(d,{value:"py",label:"Python",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-py",children:"def reverseList(head: Optional[ListNode]) -> Optional[ListNode]:\n    head_prev = None\n    while head is not None:\n        head_next = head.next\n        head.next = head_prev\n        head_prev = head\n        head = head_next\n    return head_prev\n"})})})]}),"\n",(0,t.jsx)(n.h2,{id:"21-merge-two-sorted-lists",children:(0,t.jsx)(n.a,{href:"https://leetcode.com/problems/merge-two-sorted-lists/",children:"21. Merge Two Sorted Lists"})}),"\n",(0,t.jsx)(n.h3,{id:"\u984c\u76ee\u63cf\u8ff0-1",children:"\u984c\u76ee\u63cf\u8ff0"}),"\n",(0,t.jsx)(n.p,{children:"\u7d66\u5b9a\u5169\u500b\u905e\u589e\u6392\u5e8f\u7684\u93c8\u8868\uff0c\u5c07\u5b83\u5011\u5408\u4f75\u6210\u4e00\u500b\u905e\u589e\u6392\u5e8f\u7684\u93c8\u8868\u3002"}),"\n",(0,t.jsx)(n.h3,{id:"\u8f38\u5165\u8f38\u51fa\u7bc4\u4f8b-1",children:"\u8f38\u5165\u8f38\u51fa\u7bc4\u4f8b"}),"\n",(0,t.jsxs)(n.p,{children:["\u8f38\u5165\uff1a\u5169\u500b\u93c8\u8868\u3002",(0,t.jsx)(n.br,{}),"\n","\u8f38\u51fa\uff1a\u4e00\u500b\u93c8\u8868\uff0c\u8868\u793a\u5408\u4f75\u7684\u7d50\u679c\u3002"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Input: 1->2->4, 1->3->4\nOutput: 1->1->2->3->4->4\n"})}),"\n",(0,t.jsx)(n.h3,{id:"\u984c\u89e3-1",children:"\u984c\u89e3"}),"\n",(0,t.jsxs)(n.p,{children:["\u6211\u5011\u63d0\u4f9b\u905e\u8ff4\u8207\u975e\u905e\u8ff4\u5169\u7a2e\u5beb\u6cd5\u3002",(0,t.jsx)(n.br,{}),"\n","\u905e\u8ff4\u7684\u5beb\u6cd5\u5982\u4e0b\uff1a"]}),"\n",(0,t.jsxs)(l,{children:[(0,t.jsx)(d,{value:"cpp",label:"C++",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\n    if (l2 == nullptr) {\n        return l1;\n    }\n    if (l1 == nullptr) {\n        return l2;\n    }\n    if (l1->val < l2->val) {\n        l1->next = mergeTwoLists(l1->next, l2);\n        return l1;\n    }\n    l2->next = mergeTwoLists(l1, l2->next);\n    return l2;\n}\n"})})}),(0,t.jsx)(d,{value:"py",label:"Python",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-py",children:"def mergeTwoLists(\n    l1: Optional[ListNode], l2: Optional[ListNode]\n) -> Optional[ListNode]:\n    if l1 is None or l2 is None:\n        return l1 or l2\n    if l1.val < l2.val:\n        l1.next = mergeTwoLists(l1.next, l2)\n        return l1\n    l2.next = mergeTwoLists(l1, l2.next)\n    return l2\n"})})})]}),"\n",(0,t.jsx)(n.p,{children:"\u975e\u905e\u8ff4\u7684\u5beb\u6cd5\u70ba\uff1a"}),"\n",(0,t.jsxs)(l,{children:[(0,t.jsx)(d,{value:"cpp",label:"C++",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"ListNode *mergeTwoLists(ListNode *l1, ListNode *l2) {\n    ListNode *dummy = new ListNode(0), *node = dummy;\n    while (l1 && l2) {\n        if (l1->val < l2->val) {\n            node->next = l1;\n            l1 = l1->next;\n        } else {\n            node->next = l2;\n            l2 = l2->next;\n        }\n        node = node->next;\n    }\n    node->next = l1 == nullptr ? l2 : l1;\n    return dummy->next;\n}\n"})})}),(0,t.jsx)(d,{value:"py",label:"Python",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-py",children:"def mergeTwoLists(\n    l1: Optional[ListNode], l2: Optional[ListNode]\n) -> Optional[ListNode]:\n    dummy = ListNode()\n    head = dummy\n    \n    while l1 and l2:\n        if l1.val < l2.val:\n            dummy.next = l1\n            l1 = l1.next\n        else:\n            dummy.next = l2\n            l2 = l2.next\n        dummy = dummy.next\n    \n    dummy.next = l1 or l2\n    return head.next\n\n"})})})]}),"\n",(0,t.jsx)(n.h2,{id:"24-swap-nodes-in-pairs",children:(0,t.jsx)(n.a,{href:"https://leetcode.com/problems/swap-nodes-in-pairs/",children:"24. Swap Nodes in Pairs"})}),"\n",(0,t.jsx)(n.h3,{id:"\u984c\u76ee\u63cf\u8ff0-2",children:"\u984c\u76ee\u63cf\u8ff0"}),"\n",(0,t.jsx)(n.p,{children:"\u7d66\u5b9a\u4e00\u500b\u93c8\u8868\uff0c\u4ea4\u63db\u6bcf\u4e00\u5c0d\u76f8\u9130\u7684\u7bc0\u9ede\u3002"}),"\n",(0,t.jsx)(n.h3,{id:"\u8f38\u5165\u8f38\u51fa\u7bc4\u4f8b-2",children:"\u8f38\u5165\u8f38\u51fa\u7bc4\u4f8b"}),"\n",(0,t.jsx)(n.p,{children:"\u8f38\u5165\u4e00\u500b\u93c8\u8868\uff0c\u8f38\u51fa\u4ea4\u63db\u5f8c\u7684\u93c8\u8868\u3002"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Input: 1->2->3->4\nOutput: 2->1->4->3\n"})}),"\n",(0,t.jsx)(n.h3,{id:"\u984c\u89e3-2",children:"\u984c\u89e3"}),"\n",(0,t.jsx)(n.p,{children:"\u4f7f\u7528\u6307\u6a19\u9032\u884c\u4ea4\u63db\u64cd\u4f5c\uff0c\u984c\u76ee\u96e3\u5ea6\u4e0d\u9ad8\uff0c\u4f46\u9700\u8981\u7d30\u5fc3\u3002"}),"\n",(0,t.jsxs)(l,{children:[(0,t.jsx)(d,{value:"cpp",label:"C++",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"ListNode* swapPairs(ListNode* head) {\n    ListNode *node1 = head, *node2;\n    if (node1 && node1->next) {\n        node2 = node1->next;\n        node1->next = node2->next;\n        node2->next = node1;\n        head = node2;\n        while (node1->next && node1->next->next) {\n            node2 = node1->next->next;\n            node1->next->next = node2->next;\n            node2->next = node1->next;\n            node1->next = node2;\n            node1 = node2->next;\n        }\n    }\n    return head;\n}\n"})})}),(0,t.jsx)(d,{value:"py",label:"Python",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-py",children:"def swapPairs(head: Optional[ListNode]) -> Optional[ListNode]:\n    node1 = head\n    if node1 is not None and node1.next is not None:\n        node2 = node1.next\n        node1.next = node2.next\n        node2.next = node1\n        head = node2\n        while node1.next is not None and node1.next.next is not None:\n            node2 = node1.next.next\n            node1.next.next = node2.next\n            node2.next = node1.next\n            node1.next = node2\n            node1 = node2.next\n    return head\n"})})})]})]})}function c(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}function x(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);