"use strict";(self.webpackChunkleetcode_101=self.webpackChunkleetcode_101||[]).push([[3378],{7185:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>c,frontMatter:()=>l,metadata:()=>r,toc:()=>s});const r=JSON.parse('{"id":"trees/13-2-tree-recursion","title":"13.2 \u6a39\u7684\u905e\u8ff4","description":"\u5c0d\u65bc\u4e00\u4e9b\u7c21\u55ae\u7684\u905e\u8ff4\u984c\uff0c\u67d0\u4e9b LeetCode \u9054\u4eba\u559c\u6b61\u5beb one-line code\uff0c\u5373\u7528\u4e00\u884c\u7a0b\u5f0f\u78bc\u89e3\u6c7a\u554f\u984c\u3002\u6211\u5011\u4e5f\u6703\u5c55\u793a\u4e00\u4e9b\u9019\u6a23\u7684\u7a0b\u5f0f\u78bc\uff0c\u4f46\u5c0d\u65bc\u65b0\u624b\uff0c\u7b46\u8005\u4ecd\u7136\u5efa\u8b70\u60a8\u4f7f\u7528\u591a\u884c\u7684 if-else \u5224\u65b7\u8a9e\u53e5\u3002","source":"@site/i18n/zh-TW/docusaurus-plugin-content-docs/current/13-trees/13-2-tree-recursion.mdx","sourceDirName":"13-trees","slug":"/trees/13-2-tree-recursion","permalink":"/leetcode_101/zh-TW/trees/13-2-tree-recursion","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":69,"frontMatter":{"sidebar_position":69},"sidebar":"tutorialSidebar","previous":{"title":"13.1 \u8cc7\u6599\u7d50\u69cb\u4ecb\u7d39","permalink":"/leetcode_101/zh-TW/trees/13-1-data-structure-introduction"},"next":{"title":"13.3 \u5c64\u6b21\u904d\u6b77","permalink":"/leetcode_101/zh-TW/trees/13-3-level-order-traversal"}}');var o=t(4848),i=t(8453);const l={sidebar_position:69},d="13.2 \u6a39\u7684\u905e\u8ff4",a={},s=[{value:"104. Maximum Depth of Binary Tree",id:"104-maximum-depth-of-binary-tree",level:2},{value:"\u984c\u76ee\u63cf\u8ff0",id:"\u984c\u76ee\u63cf\u8ff0",level:3},{value:"\u8f38\u5165\u8f38\u51fa\u7bc4\u4f8b",id:"\u8f38\u5165\u8f38\u51fa\u7bc4\u4f8b",level:3},{value:"\u984c\u89e3",id:"\u984c\u89e3",level:3},{value:"110. Balanced Binary Tree",id:"110-balanced-binary-tree",level:2},{value:"\u984c\u76ee\u63cf\u8ff0",id:"\u984c\u76ee\u63cf\u8ff0-1",level:3},{value:"\u8f38\u5165\u8f38\u51fa\u7bc4\u4f8b",id:"\u8f38\u5165\u8f38\u51fa\u7bc4\u4f8b-1",level:3},{value:"\u984c\u89e3",id:"\u984c\u89e3-1",level:3},{value:"543. Diameter of Binary Tree",id:"543-diameter-of-binary-tree",level:2},{value:"\u984c\u76ee\u63cf\u8ff0",id:"\u984c\u76ee\u63cf\u8ff0-2",level:3},{value:"\u8f38\u5165\u8f38\u51fa\u7bc4\u4f8b",id:"\u8f38\u5165\u8f38\u51fa\u7bc4\u4f8b-2",level:3},{value:"\u984c\u89e3",id:"\u984c\u89e3-2",level:3},{value:"437. Path Sum III",id:"437-path-sum-iii",level:2},{value:"\u984c\u76ee\u63cf\u8ff0",id:"\u984c\u76ee\u63cf\u8ff0-3",level:3},{value:"\u8f38\u5165\u8f38\u51fa\u7bc4\u4f8b",id:"\u8f38\u5165\u8f38\u51fa\u7bc4\u4f8b-3",level:3},{value:"\u984c\u89e3",id:"\u984c\u89e3-3",level:3},{value:"101. Symmetric Tree",id:"101-symmetric-tree",level:2},{value:"\u984c\u76ee\u63cf\u8ff0",id:"\u984c\u76ee\u63cf\u8ff0-4",level:3},{value:"\u8f38\u5165\u8f38\u51fa\u7bc4\u4f8b",id:"\u8f38\u5165\u8f38\u51fa\u7bc4\u4f8b-4",level:3},{value:"\u984c\u89e3",id:"\u984c\u89e3-4",level:3},{value:"1110. Delete Nodes And Return Forest",id:"1110-delete-nodes-and-return-forest",level:2},{value:"\u984c\u76ee\u63cf\u8ff0",id:"\u984c\u76ee\u63cf\u8ff0-5",level:3},{value:"\u8f38\u5165\u8f38\u51fa\u7bc4\u4f8b",id:"\u8f38\u5165\u8f38\u51fa\u7bc4\u4f8b-5",level:3},{value:"\u984c\u89e3",id:"\u984c\u89e3-5",level:3}];function h(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,i.R)(),...e.components},{TabItem:t,Tabs:r}=n;return t||u("TabItem",!0),r||u("Tabs",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"132-\u6a39\u7684\u905e\u8ff4",children:"13.2 \u6a39\u7684\u905e\u8ff4"})}),"\n",(0,o.jsx)(n.p,{children:"\u5c0d\u65bc\u4e00\u4e9b\u7c21\u55ae\u7684\u905e\u8ff4\u984c\uff0c\u67d0\u4e9b LeetCode \u9054\u4eba\u559c\u6b61\u5beb one-line code\uff0c\u5373\u7528\u4e00\u884c\u7a0b\u5f0f\u78bc\u89e3\u6c7a\u554f\u984c\u3002\u6211\u5011\u4e5f\u6703\u5c55\u793a\u4e00\u4e9b\u9019\u6a23\u7684\u7a0b\u5f0f\u78bc\uff0c\u4f46\u5c0d\u65bc\u65b0\u624b\uff0c\u7b46\u8005\u4ecd\u7136\u5efa\u8b70\u60a8\u4f7f\u7528\u591a\u884c\u7684 if-else \u5224\u65b7\u8a9e\u53e5\u3002"}),"\n",(0,o.jsx)(n.p,{children:"\u5728\u8a31\u591a\u60c5\u6cc1\u4e0b\uff0c\u6a39\u905e\u8ff4\u7684\u5beb\u6cd5\u8207\u6df1\u5ea6\u512a\u5148\u641c\u7d22\u7684\u905e\u8ff4\u5beb\u6cd5\u76f8\u540c\uff0c\u56e0\u6b64\u672c\u66f8\u4e0d\u6703\u5340\u5206\u5169\u8005\u3002"}),"\n",(0,o.jsx)(n.h2,{id:"104-maximum-depth-of-binary-tree",children:(0,o.jsx)(n.a,{href:"https://leetcode.com/problems/maximum-depth-of-binary-tree/",children:"104. Maximum Depth of Binary Tree"})}),"\n",(0,o.jsx)(n.h3,{id:"\u984c\u76ee\u63cf\u8ff0",children:"\u984c\u76ee\u63cf\u8ff0"}),"\n",(0,o.jsx)(n.p,{children:"\u6c42\u4e00\u500b\u4e8c\u5143\u6a39\u7684\u6700\u5927\u6df1\u5ea6\u3002"}),"\n",(0,o.jsx)(n.h3,{id:"\u8f38\u5165\u8f38\u51fa\u7bc4\u4f8b",children:"\u8f38\u5165\u8f38\u51fa\u7bc4\u4f8b"}),"\n",(0,o.jsx)(n.p,{children:"\u8f38\u5165\u662f\u4e00\u500b\u4e8c\u5143\u6a39\uff0c\u8f38\u51fa\u662f\u4e00\u500b\u6574\u6578\uff0c\u8868\u793a\u8a72\u6a39\u7684\u6700\u5927\u6df1\u5ea6\u3002"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"Input:\n    3\n   / \\\n  9  20\n     / \\\n    15  7\nOutput: 3\n"})}),"\n",(0,o.jsx)(n.h3,{id:"\u984c\u89e3",children:"\u984c\u89e3"}),"\n",(0,o.jsx)(n.p,{children:"\u5229\u7528\u905e\u8ff4\uff0c\u6211\u5011\u53ef\u4ee5\u5f88\u65b9\u4fbf\u5730\u6c42\u5f97\u6700\u5927\u6df1\u5ea6\u3002"}),"\n",(0,o.jsxs)(r,{children:[(0,o.jsx)(t,{value:"cpp",label:"C++",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-cpp",children:"int maxDepth(TreeNode* root) {\n    if (root == nullptr) {\n        return 0;\n    }\n    return max(maxDepth(root->left), maxDepth(root->right)) + 1;\n}\n"})})}),(0,o.jsx)(t,{value:"py",label:"Python",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-py",children:"def maxDepth(root: Optional[TreeNode]) -> int:\n    if root is None:\n        return 0\n    return max(maxDepth(root.left), maxDepth(root.right)) + 1\n"})})})]}),"\n",(0,o.jsx)(n.h2,{id:"110-balanced-binary-tree",children:(0,o.jsx)(n.a,{href:"https://leetcode.com/problems/balanced-binary-tree/",children:"110. Balanced Binary Tree"})}),"\n",(0,o.jsx)(n.h3,{id:"\u984c\u76ee\u63cf\u8ff0-1",children:"\u984c\u76ee\u63cf\u8ff0"}),"\n",(0,o.jsx)(n.p,{children:"\u5224\u65b7\u4e00\u500b\u4e8c\u5143\u6a39\u662f\u5426\u5e73\u8861\u3002\u5e73\u8861\u6a39\u7684\u5b9a\u7fa9\u662f\uff1a\u5c0d\u65bc\u6a39\u4e0a\u7684\u4efb\u610f\u7bc0\u9ede\uff0c\u5176\u5de6\u53f3\u5b50\u7bc0\u9ede\u7684\u6700\u5927\u6df1\u5ea6\u5dee\u4e0d\u5f97\u8d85\u904e 1\u3002"}),"\n",(0,o.jsx)(n.h3,{id:"\u8f38\u5165\u8f38\u51fa\u7bc4\u4f8b-1",children:"\u8f38\u5165\u8f38\u51fa\u7bc4\u4f8b"}),"\n",(0,o.jsx)(n.p,{children:"\u8f38\u5165\u662f\u4e00\u500b\u4e8c\u5143\u6a39\uff0c\u8f38\u51fa\u662f\u4e00\u500b\u5e03\u6797\u503c\uff0c\u8868\u793a\u8a72\u6a39\u662f\u5426\u5e73\u8861\u3002"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"Input:\n      1\n     / \\\n    2   2\n   / \\\n  3   3\n / \\\n4   4 \nOutput: false\n"})}),"\n",(0,o.jsx)(n.h3,{id:"\u984c\u89e3-1",children:"\u984c\u89e3"}),"\n",(0,o.jsx)(n.p,{children:"\u89e3\u6cd5\u985e\u4f3c\u65bc\u8a08\u7b97\u6a39\u7684\u6700\u5927\u6df1\u5ea6\uff0c\u4f46\u6709\u5169\u500b\u4e0d\u540c\u9ede\uff1a"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"\u5fc5\u9808\u5148\u8a08\u7b97\u5b50\u6a39\u7684\u6df1\u5ea6\uff0c\u518d\u9032\u884c\u6bd4\u8f03\u3002"}),"\n",(0,o.jsx)(n.li,{children:"\u5982\u679c\u5728\u8655\u7406\u5b50\u6a39\u6642\u767c\u73fe\u8a72\u5b50\u6a39\u5df2\u7d93\u4e0d\u5e73\u8861\uff0c\u5247\u7acb\u5373\u8fd4\u56de -1\uff0c\u8b93\u5176\u7956\u5148\u7bc0\u9ede\u80fd\u907f\u514d\u4e0d\u5fc5\u8981\u7684\u5224\u65b7\u3002\uff08\u672c\u984c\u7684\u5224\u65b7\u76f8\u5c0d\u7c21\u55ae\uff0c\u53ea\u9700\u8a08\u7b97\u6df1\u5ea6\u5dee\u7684\u7d55\u5c0d\u503c\u5373\u53ef\uff1b\u4f46\u5982\u679c\u6bd4\u8f03\u904e\u7a0b\u8f03\u70ba\u8907\u96dc\uff0c\u907f\u514d\u91cd\u8907\u5224\u65b7\u53ef\u4ee5\u7bc0\u7701\u5927\u91cf\u8a08\u7b97\u6642\u9593\u3002\uff09"}),"\n"]}),"\n",(0,o.jsxs)(r,{children:[(0,o.jsx)(t,{value:"cpp",label:"C++",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-cpp",children:"// \u8f14\u52a9\u51fd\u5f0f\u3002\nint balancedDepth(TreeNode* root) {\n    if (root == nullptr) {\n        return 0;\n    }\n    int left = balancedDepth(root->left);\n    int right = balancedDepth(root->right);\n    if (left == -1 || right == -1 || abs(left - right) > 1) {\n        return -1;\n    }\n    return max(left, right) + 1;\n}\n// \u4e3b\u51fd\u5f0f\u3002\nbool isBalanced(TreeNode* root) { return balancedDepth(root) != -1; }\n"})})}),(0,o.jsx)(t,{value:"py",label:"Python",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-py",children:"# \u8f14\u52a9\u51fd\u5f0f\u3002\ndef balancedDepth(root: Optional[TreeNode]) -> int:\n    if root is None:\n        return 0\n    left = balancedDepth(root.left)\n    right = balancedDepth(root.right)\n    if left == -1 or right == -1 or abs(left - right) > 1:\n        return -1\n    return max(left, right) + 1\n\n# \u4e3b\u51fd\u5f0f\u3002\ndef isBalanced(root: Optional[TreeNode]) -> bool:\n    return balancedDepth(root) != -1\n\n"})})})]}),"\n",(0,o.jsx)(n.h2,{id:"543-diameter-of-binary-tree",children:(0,o.jsx)(n.a,{href:"https://leetcode.com/problems/diameter-of-binary-tree/",children:"543. Diameter of Binary Tree"})}),"\n",(0,o.jsx)(n.h3,{id:"\u984c\u76ee\u63cf\u8ff0-2",children:"\u984c\u76ee\u63cf\u8ff0"}),"\n",(0,o.jsx)(n.p,{children:"\u6c42\u4e00\u500b\u4e8c\u5143\u6a39\u7684\u6700\u9577\u76f4\u5f91\u3002\u76f4\u5f91\u7684\u5b9a\u7fa9\u662f\u4e8c\u5143\u6a39\u4e0a\u4efb\u610f\u5169\u7bc0\u9ede\u4e4b\u9593\u7684\u7121\u5411\u8ddd\u96e2\u3002"}),"\n",(0,o.jsx)(n.h3,{id:"\u8f38\u5165\u8f38\u51fa\u7bc4\u4f8b-2",children:"\u8f38\u5165\u8f38\u51fa\u7bc4\u4f8b"}),"\n",(0,o.jsx)(n.p,{children:"\u8f38\u5165\u662f\u4e00\u500b\u4e8c\u5143\u6a39\uff0c\u8f38\u51fa\u662f\u4e00\u500b\u6574\u6578\uff0c\u8868\u793a\u6700\u9577\u76f4\u5f91\u3002"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"Input:\n      1\n     / \\\n    2   3\n   / \\\n  4   5\nOutput: 3\n"})}),"\n",(0,o.jsx)(n.p,{children:"\u5728\u9019\u500b\u7bc4\u4f8b\u4e2d\uff0c\u6700\u9577\u76f4\u5f91\u662f [4,2,1,3] \u548c [5,2,1,3]\u3002"}),"\n",(0,o.jsx)(n.h3,{id:"\u984c\u89e3-2",children:"\u984c\u89e3"}),"\n",(0,o.jsx)(n.p,{children:"\u6211\u5011\u53ef\u4ee5\u5229\u7528\u905e\u8ff4\u4f86\u8655\u7406\u4e8c\u5143\u6a39\u3002\u5728\u89e3\u984c\u6642\u9700\u8981\u6ce8\u610f\u4e00\u9ede\uff1a\u7576\u6211\u5011\u8655\u7406\u67d0\u500b\u5b50\u6a39\u6642\uff0c\u6211\u5011\u66f4\u65b0\u7684\u6700\u9577\u76f4\u5f91\u503c\u548c\u905e\u8ff4\u8fd4\u56de\u7684\u503c\u662f\u4e0d\u76f8\u540c\u7684\u3002"}),"\n",(0,o.jsx)(n.p,{children:"\u66f4\u65b0\u7684\u6700\u9577\u76f4\u5f91\u503c\u662f\u6307\u7d93\u904e\u8a72\u5b50\u6a39\u6839\u7bc0\u9ede\u7684\u6700\u9577\u76f4\u5f91\uff08\u4e5f\u5c31\u662f\u5de6\u53f3\u5b50\u6a39\u7684\u9577\u5ea6\u7e3d\u548c\uff09\uff1b\u800c\u51fd\u6578\u8fd4\u56de\u7684\u503c\u5247\u662f\u4ee5\u8a72\u5b50\u6a39\u6839\u7bc0\u9ede\u70ba\u7aef\u9ede\u7684\u6700\u9577\u76f4\u5f91\uff08\u4e5f\u5c31\u662f\u55ae\u5074\u5b50\u6a39\u7684\u9577\u5ea6\uff09\u3002\u9019\u6a23\u8a2d\u8a08\u8fd4\u56de\u503c\uff0c\u53ef\u4ee5\u905e\u8ff4\u5730\u66f4\u65b0\u7236\u7bc0\u9ede\u7684\u6700\u9577\u76f4\u5f91\u3002"}),"\n",(0,o.jsxs)(r,{children:[(0,o.jsx)(t,{value:"cpp",label:"C++",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-cpp",children:"// \u8f14\u52a9\u51fd\u5f0f\u3002\nint updateDiameter(TreeNode* node, int& diameter) {\n    if (node == nullptr) {\n        return 0;\n    }\n    int left = updateDiameter(node->left, diameter);\n    int right = updateDiameter(node->right, diameter);\n    diameter = max(diameter, left + right);\n    return max(left, right) + 1;\n}\n// \u4e3b\u51fd\u5f0f\u3002\nint diameterOfBinaryTree(TreeNode* root) {\n    int diameter = 0;\n    updateDiameter(root, diameter);\n    return diameter;\n}\n"})})}),(0,o.jsx)(t,{value:"py",label:"Python",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-py",children:"# \u8f14\u52a9\u51fd\u5f0f\u3002\ndef updateDiameter(node: Optional[TreeNode], diameter: List[int]) -> int:\n    if node is None:\n        return 0\n    left = updateDiameter(node.left, diameter)\n    right = updateDiameter(node.right, diameter)\n    diameter[0] = max(diameter[0], left + right)\n    return max(left, right) + 1\n\n# \u4e3b\u51fd\u5f0f\u3002\ndef diameterOfBinaryTree(root: Optional[TreeNode]) -> int:\n    diameter = [0]\n    updateDiameter(root, diameter)\n    return diameter[0]\n\n"})})})]}),"\n",(0,o.jsx)(n.h2,{id:"437-path-sum-iii",children:(0,o.jsx)(n.a,{href:"https://leetcode.com/problems/path-sum-iii/",children:"437. Path Sum III"})}),"\n",(0,o.jsx)(n.h3,{id:"\u984c\u76ee\u63cf\u8ff0-3",children:"\u984c\u76ee\u63cf\u8ff0"}),"\n",(0,o.jsx)(n.p,{children:"\u7d66\u5b9a\u4e00\u500b\u6574\u6578\u4e8c\u5143\u6a39\uff0c\u6c42\u8def\u5f91\u7bc0\u9ede\u503c\u7684\u7e3d\u548c\u7b49\u65bc\u7d66\u5b9a\u76ee\u6a19\u503c\u7684\u8def\u5f91\u6578\u91cf\u3002"}),"\n",(0,o.jsx)(n.h3,{id:"\u8f38\u5165\u8f38\u51fa\u7bc4\u4f8b-3",children:"\u8f38\u5165\u8f38\u51fa\u7bc4\u4f8b"}),"\n",(0,o.jsx)(n.p,{children:"\u8f38\u5165\u662f\u4e00\u500b\u4e8c\u5143\u6a39\u548c\u4e00\u500b\u76ee\u6a19\u6574\u6578\u3002\u8f38\u51fa\u662f\u4e00\u500b\u6574\u6578\uff0c\u8868\u793a\u6eff\u8db3\u689d\u4ef6\u7684\u8def\u5f91\u6578\u91cf\u3002"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"Input: sum = 8, tree =\n        10\n       / \\\n      5  -3\n     / \\   \\\n    3   2   11\n   / \\   \\\n  3 -2    1\nOutput: 3\n"})}),"\n",(0,o.jsxs)(n.p,{children:["\u5728\u9019\u500b\u4f8b\u5b50\u4e2d\uff0c\u7e3d\u548c\u70ba 8 \u7684\u8def\u5f91\u5171\u6709\u4e09\u689d\uff1a",(0,o.jsx)(n.code,{children:"[[5,3],[5,2,1],[-3,11]]"}),"\u3002"]}),"\n",(0,o.jsx)(n.h3,{id:"\u984c\u89e3-3",children:"\u984c\u89e3"}),"\n",(0,o.jsx)(n.p,{children:"\u5728\u905e\u8ff4\u8655\u7406\u6bcf\u500b\u7bc0\u9ede\u6642\uff0c\u9700\u8981\u5206\u70ba\u5169\u7a2e\u60c5\u6cc1\u8003\u616e\uff1a"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"\u82e5\u9078\u53d6\u7576\u524d\u7bc0\u9ede\u52a0\u5165\u8def\u5f91\uff0c\u5247\u4e4b\u5f8c\u7684\u7bc0\u9ede\u5fc5\u9808\u9023\u7e8c\u52a0\u5165\uff0c\u6216\u505c\u6b62\u52a0\u5165\u3002"}),"\n",(0,o.jsx)(n.li,{children:"\u82e5\u4e0d\u9078\u53d6\u7576\u524d\u7bc0\u9ede\uff0c\u5247\u9700\u5c0d\u5176\u5de6\u53f3\u5b50\u7bc0\u9ede\u91cd\u65b0\u9032\u884c\u8003\u616e\u3002"}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"\u70ba\u6b64\uff0c\u6211\u5011\u53ef\u4ee5\u5efa\u7acb\u4e00\u500b\u8f14\u52a9\u51fd\u5f0f\uff0c\u5c08\u9580\u8a08\u7b97\u5f9e\u7576\u524d\u7bc0\u9ede\u958b\u59cb\u7684\u9023\u7e8c\u8def\u5f91\u6578\u91cf\u3002"}),"\n",(0,o.jsxs)(r,{children:[(0,o.jsx)(t,{value:"cpp",label:"C++",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-cpp",children:"// \u8f14\u52a9\u51fd\u5f0f\u3002\n// \u4f7f\u7528 long long \u9632\u6b62 test case \u4e2d\u51fa\u73fe\u5927\u6578\u6ea2\u4f4d\uff0c\u901a\u5e38\u60c5\u6cc1\u4e0b int \u5373\u53ef\u3002\nlong long pathSumStartWithRoot(TreeNode* root, long long targetSum) {\n    if (root == nullptr) {\n        return 0;\n    }\n    return (root->val == targetSum) +\n           pathSumStartWithRoot(root->left, targetSum - root->val) +\n           pathSumStartWithRoot(root->right, targetSum - root->val);\n}\n// \u4e3b\u51fd\u5f0f\u3002\nint pathSum(TreeNode* root, int targetSum) {\n    if (root == nullptr) {\n        return 0;\n    }\n    return pathSumStartWithRoot(root, targetSum) +\n           pathSum(root->left, targetSum) + pathSum(root->right, targetSum);\n}\n"})})}),(0,o.jsx)(t,{value:"py",label:"Python",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-py",children:"# \u8f14\u52a9\u51fd\u5f0f\u3002\ndef pathSumStartWithRoot(root: Optional[TreeNode], targetSum: int) -> int:\n    if root is None:\n        return 0\n    return (\n        int(root.val == targetSum)\n        + pathSumStartWithRoot(root.left, targetSum - root.val)\n        + pathSumStartWithRoot(root.right, targetSum - root.val)\n    )\n\n# \u4e3b\u51fd\u5f0f\u3002\ndef pathSum(root: Optional[TreeNode], targetSum: int) -> int:\n    if root is None:\n        return 0\n    return (\n        pathSumStartWithRoot(root, targetSum)\n        + pathSum(root.left, targetSum)\n        + pathSum(root.right, targetSum)\n    )\n\n"})})})]}),"\n",(0,o.jsx)(n.h2,{id:"101-symmetric-tree",children:(0,o.jsx)(n.a,{href:"https://leetcode.com/problems/symmetric-tree/",children:"101. Symmetric Tree"})}),"\n",(0,o.jsx)(n.h3,{id:"\u984c\u76ee\u63cf\u8ff0-4",children:"\u984c\u76ee\u63cf\u8ff0"}),"\n",(0,o.jsx)(n.p,{children:"\u5224\u65b7\u4e00\u500b\u4e8c\u5143\u6a39\u662f\u5426\u5c0d\u7a31\u3002"}),"\n",(0,o.jsx)(n.h3,{id:"\u8f38\u5165\u8f38\u51fa\u7bc4\u4f8b-4",children:"\u8f38\u5165\u8f38\u51fa\u7bc4\u4f8b"}),"\n",(0,o.jsx)(n.p,{children:"\u8f38\u5165\u4e00\u500b\u4e8c\u5143\u6a39\uff0c\u8f38\u51fa\u4e00\u500b\u5e03\u6797\u503c\uff0c\u8868\u793a\u8a72\u6a39\u662f\u5426\u5c0d\u7a31\u3002"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"Input:\n    1\n   / \\\n  2   2\n / \\ / \\\n3  4 4 3\nOutput: true\n"})}),"\n",(0,o.jsx)(n.h3,{id:"\u984c\u89e3-4",children:"\u984c\u89e3"}),"\n",(0,o.jsx)(n.p,{children:"\u5224\u65b7\u4e00\u68f5\u6a39\u662f\u5426\u5c0d\u7a31\u7b49\u50f9\u65bc\u5224\u65b7\u5de6\u53f3\u5b50\u6a39\u662f\u5426\u5c0d\u7a31\u3002\u7b46\u8005\u4e00\u822c\u7fd2\u6163\u5c07\u5224\u65b7\u5169\u500b\u5b50\u6a39\u662f\u5426\u76f8\u7b49\u6216\u5c0d\u7a31\u985e\u578b\u7684\u984c\u89e3\u6cd5\u7a31\u70ba\u300c\u56db\u6b65\u6cd5\u300d\uff1a"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"\u5982\u679c\u5169\u500b\u5b50\u6a39\u90fd\u70ba\u7a7a\u6307\u6a19\uff0c\u5247\u5b83\u5011\u76f8\u7b49\u6216\u5c0d\u7a31\u3002"}),"\n",(0,o.jsx)(n.li,{children:"\u5982\u679c\u5169\u500b\u5b50\u6a39\u53ea\u6709\u4e00\u500b\u70ba\u7a7a\u6307\u6a19\uff0c\u5247\u5b83\u5011\u4e0d\u76f8\u7b49\u6216\u4e0d\u5c0d\u7a31\u3002"}),"\n",(0,o.jsx)(n.li,{children:"\u5982\u679c\u5169\u500b\u5b50\u6a39\u6839\u7bc0\u9ede\u7684\u503c\u4e0d\u76f8\u7b49\uff0c\u5247\u5b83\u5011\u4e0d\u76f8\u7b49\u6216\u4e0d\u5c0d\u7a31\u3002"}),"\n",(0,o.jsx)(n.li,{children:"\u6839\u64da\u76f8\u7b49\u6216\u5c0d\u7a31\u7684\u8981\u6c42\uff0c\u9032\u884c\u905e\u8ff4\u8655\u7406\u3002"}),"\n"]}),"\n",(0,o.jsxs)(r,{children:[(0,o.jsx)(t,{value:"cpp",label:"C++",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-cpp",children:"// \u8f14\u52a9\u51fd\u5f0f\u3002\nbool isLeftRightSymmetric(TreeNode* left, TreeNode* right) {\n    if (left == nullptr && right == nullptr) {\n        return true;\n    }\n    if (left == nullptr or right == nullptr) {\n        return false;\n    }\n    if (left->val != right->val) {\n        return false;\n    }\n    return isLeftRightSymmetric(left->left, right->right) &&\n           isLeftRightSymmetric(left->right, right->left);\n}\n// \u4e3b\u51fd\u5f0f\u3002\nbool isSymmetric(TreeNode* root) {\n    if (root == nullptr) {\n        return true;\n    }\n    return isLeftRightSymmetric(root->left, root->right);\n}\n"})})}),(0,o.jsx)(t,{value:"py",label:"Python",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-py",children:"# \u8f14\u52a9\u51fd\u5f0f\u3002\ndef isLeftRightSymmetric(\n    left: Optional[TreeNode], right: Optional[TreeNode]\n) -> bool:\n    if left is None and right is None:\n        return True\n    if left is None or right is None:\n        return False\n    if left.val != right.val:\n        return False\n    return (\n        isLeftRightSymmetric(left.left, right.right) and\n        isLeftRightSymmetric(left.right, right.left)\n    )\n\n# \u4e3b\u51fd\u5f0f\u3002\ndef isSymmetric(root: Optional[TreeNode]) -> bool:\n    if root is None:\n        return True\n    return isLeftRightSymmetric(root.left, root.right)\n\n"})})})]}),"\n",(0,o.jsx)(n.h2,{id:"1110-delete-nodes-and-return-forest",children:(0,o.jsx)(n.a,{href:"https://leetcode.com/problems/delete-nodes-and-return-forest/",children:"1110. Delete Nodes And Return Forest"})}),"\n",(0,o.jsx)(n.h3,{id:"\u984c\u76ee\u63cf\u8ff0-5",children:"\u984c\u76ee\u63cf\u8ff0"}),"\n",(0,o.jsx)(n.p,{children:"\u7d66\u5b9a\u4e00\u500b\u6574\u6578\u4e8c\u5143\u6a39\u548c\u4e00\u4e9b\u6574\u6578\uff0c\u6c42\u522a\u6389\u9019\u4e9b\u6574\u6578\u5c0d\u61c9\u7684\u7bc0\u9ede\u5f8c\uff0c\u5269\u9918\u7684\u5b50\u6a39\u3002"}),"\n",(0,o.jsx)(n.h3,{id:"\u8f38\u5165\u8f38\u51fa\u7bc4\u4f8b-5",children:"\u8f38\u5165\u8f38\u51fa\u7bc4\u4f8b"}),"\n",(0,o.jsx)(n.p,{children:"\u8f38\u5165\u662f\u4e00\u500b\u6574\u6578\u4e8c\u5143\u6a39\u548c\u4e00\u7dad\u6574\u6578\u9663\u5217\uff0c\u8f38\u51fa\u662f\u4e00\u500b\u9663\u5217\uff0c\u6bcf\u500b\u4f4d\u7f6e\u5132\u5b58\u4e00\u500b\u5b50\u6a39\uff08\u7684\u6839\u7bc0\u9ede\uff09\u3002"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"Input: to_delete = [3,5], tree =\n    1\n   / \\\n  2   3\n / \\ / \\\n 4 5 6 7\nOutput: [\n    1\n   /\n  2\n /\n4  ,6 ,7]\n"})}),"\n",(0,o.jsx)(n.h3,{id:"\u984c\u89e3-5",children:"\u984c\u89e3"}),"\n",(0,o.jsx)(n.p,{children:"\u672c\u984c\u4e3b\u8981\u9700\u8981\u6ce8\u610f\u7684\u7d30\u7bc0\u5305\u62ec\u5982\u4f55\u900f\u904e\u905e\u8ff4\u8655\u7406\u539f\u6a39\uff0c\u4ee5\u53ca\u5728\u4f55\u6642\u65b7\u958b\u6307\u6a19\u3002\u540c\u6642\uff0c\u70ba\u4e86\u65b9\u4fbf\u5c0b\u627e\u5f85\u522a\u9664\u7684\u7bc0\u9ede\uff0c\u53ef\u4ee5\u5efa\u7acb\u4e00\u500b\u96dc\u6e4a\u8868\u9032\u884c\u5feb\u901f\u67e5\u627e\u3002\u7b46\u8005\u5f37\u70c8\u5efa\u8b70\u8b80\u8005\u5728\u770b\u5b8c\u984c\u89e3\u5f8c\uff0c\u81ea\u5df1\u5be6\u73fe\u4e00\u6b21\u672c\u984c\uff0c\u52a0\u6df1\u5c0d\u65bc\u905e\u8ff4\u7684\u7406\u89e3\u8207\u904b\u7528\u80fd\u529b\u3002"}),"\n",(0,o.jsxs)(r,{children:[(0,o.jsx)(t,{value:"cpp",label:"C++",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-cpp",children:"// \u8f14\u52a9\u51fd\u5f0f\u3002\nTreeNode* moveNodesToForest(TreeNode* root, unordered_set<int>& undeleted,\n                            vector<TreeNode*>& forest) {\n    if (root == nullptr) {\n        return nullptr;\n    }\n    root->left = moveNodesToForest(root->left, undeleted, forest);\n    root->right = moveNodesToForest(root->right, undeleted, forest);\n    if (undeleted.contains(root->val)) {\n        if (root->left != nullptr) {\n            forest.push_back(root->left);\n        }\n        if (root->right != nullptr) {\n            forest.push_back(root->right);\n        }\n        root = nullptr;\n    }\n    return root;\n}\n// \u4e3b\u51fd\u5f0f\u3002\nvector<TreeNode*> delNodes(TreeNode* root, vector<int>& to_delete) {\n    vector<TreeNode*> forest;\n    unordered_set<int> undeleted(to_delete.begin(), to_delete.end());\n    root = moveNodesToForest(root, undeleted, forest);\n    if (root != nullptr) {\n        forest.push_back(root);\n    }\n    return forest;\n}\n"})})}),(0,o.jsx)(t,{value:"py",label:"Python",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-py",children:"# \u8f14\u52a9\u51fd\u5f0f\u3002\ndef moveNodesToForest(\n    root: Optional[TreeNode], undeleted: Set[int], forest: List[TreeNode]\n) -> Optional[TreeNode]:\n    if root is None:\n        return None\n    \n    root.left = moveNodesToForest(root.left, undeleted, forest)\n    root.right = moveNodesToForest(root.right, undeleted, forest)\n    \n    if root.val in undeleted:\n        if root.left is not None:\n            forest.append(root.left)\n        if root.right is not None:\n            forest.append(root.right)\n        root = None\n    \n    return root\n\n# \u4e3b\u51fd\u5f0f\u3002\ndef delNodes(root: Optional[TreeNode], to_delete: List[int]) -> List[TreeNode]:\n    forest = []\n    undeleted = set(to_delete)\n    root = moveNodesToForest(root, undeleted, forest)\n    if root is not None:\n        forest.append(root)\n    return forest\n\n"})})})]})]})}function c(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}function u(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);